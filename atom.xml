<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2021-12-17T15:21:18.896Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-12-17T15:21:08.000Z</published>
    <updated>2021-12-17T15:21:18.896Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/jpfss/p/9928747.html" target="_blank" rel="noopener">Java泛型详解：<T>和Class<T>的使用。泛型类，泛型方法的详细使用实例 </T></T></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jpfss/p/9928747.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 &lt;/T&gt;&lt;/T&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring security 处理filter chain抛出的异常</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/</id>
    <published>2021-12-15T14:55:00.000Z</published>
    <updated>2021-12-15T15:13:43.565Z</updated>
    
    <content type="html"><![CDATA[<p>springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json<br>异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,<br>另一种是spring security filter chain 抛出的异常,由于在@RestControllerAdvice之前,所以需要其它方式处理.<br>1: 自定义MyErrorController ,overriding default Spring Boot /error handler<br>2:在filter chain里第一的位置新增自定义filter,处理后面没有处理掉的异常.</p><p><strong><a href="https://blog.csdn.net/muyuanjin67/article/details/120373168" target="_blank" rel="noopener">Spring和SpringSecurity 的全局异常处理</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring" target="_blank" rel="noopener">How to manage exceptions thrown in filters in Spring?</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://www.jianshu.com/p/f528fe2377e2" target="_blank" rel="noopener">Spring security restful like 服务下的异常处理</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json&lt;br&gt;异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,&lt;br&gt;另一种是sp
      
    
    </summary>
    
    
    
      <category term="spring security" scheme="http://blog.zhangzonglinagain.xyz/tags/spring-security/"/>
    
      <category term="filter chain" scheme="http://blog.zhangzonglinagain.xyz/tags/filter-chain/"/>
    
  </entry>
  
  <entry>
    <title>js  0 == &#39;&#39; 引出的判等</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/</id>
    <published>2021-12-07T16:13:22.000Z</published>
    <updated>2021-12-07T16:16:54.048Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://segmentfault.com/a/1190000021394035" target="_blank" rel="noopener">javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)</a></strong> &nbsp;&nbsp;&nbsp;<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">JavaScript 中的相等性判断</a></strong></p><a id="more"></a><table class="standard-table"> <caption>判等</caption> <thead>  <tr>   <th scope="col" style="text-align: center;">x</th>   <th scope="col" style="text-align: center;">y</th>   <th scope="col" style="width: 10em; text-align: center;"><code>==</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>===</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>Object.is</code></th>  </tr> </thead> <tbody>  <tr>   <td><code>undefined</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>true</code></td>   <td><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>false</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>+0</code></td>   <td><code>-0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"0"</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"17"</code></td>   <td><code>17</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>[1,2]</code></td>   <td><code>"1,2"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>undefined</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>{ foo: "bar" }</code></td>   <td><code>{ foo: "bar" }</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>new String("foo")</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>NaN</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr> </tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000021394035&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)&lt;/a&gt;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 中的相等性判断&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hashtable、HashMap、ConcurrentHashMap</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/</id>
    <published>2021-12-01T13:40:33.000Z</published>
    <updated>2021-12-01T13:46:33.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://blog.csdn.net/Mr_YanMingXin/article/details/118601591" target="_blank" rel="noopener">详解Java中HashMap、HashTable、ConcurrentHashMap常见问题</a></strong> &nbsp;;&nbsp;<strong><a href="https://blog.csdn.net/amunamuna/article/details/107773902" target="_blank" rel="noopener">Hashtable、HashMap、ConcurrentHashMap等及常用阻塞队列</a></strong> &nbsp;&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.csdn.net/Mr_YanMingXin/article/details/118601591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解Java中HashMap、HashTable、C
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-29T11:14:00.000Z</published>
    <updated>2021-11-29T11:14:41.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.it610.com/article/1280947627608784896.htm" target="_blank" rel="noopener">Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.it610.com/article/1280947627608784896.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="zssh" scheme="http://blog.zhangzonglinagain.xyz/tags/zssh/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Form Data &amp; Request Payload</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/</id>
    <published>2021-11-27T13:10:00.000Z</published>
    <updated>2021-11-27T13:23:52.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>简单来说,request headers里的Content-Type: application/json 表明request body里是json数据; Content-Type: application/x-www-form-urlencoded表明request body里是Form Data数据(以key1=value1&amp;key2=value2形式). 根据content-type的不同, 后端也要相应处理,或@RequestParam 处理表单数据, 或@RequestBody处理json数据等.<br><strong><a href="https://segmentfault.com/a/1190000018774494" target="_blank" rel="noopener">前后端联调之Form Data与Request Payload，你真的了解吗？</a></strong> &nbsp;&nbsp;<strong><a href="https://www.cnblogs.com/zoro-zero/p/11608491.html" target="_blank" rel="noopener">SpringBoot 传入JSON对象参数</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;简单来说,request headers里的Content-Type: application/json 表明request body里是j
      
    
    </summary>
    
    
    
      <category term="application/x-www-form-urlencoded" scheme="http://blog.zhangzonglinagain.xyz/tags/application-x-www-form-urlencoded/"/>
    
      <category term="application/json" scheme="http://blog.zhangzonglinagain.xyz/tags/application-json/"/>
    
  </entry>
  
  <entry>
    <title>vue cli 前端跨域设置</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-11-27T12:13:00.000Z</published>
    <updated>2021-11-27T12:22:11.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.</p><a id="more"></a><p><strong><a href="https://blog.csdn.net/qq_34450741/article/details/107444815?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link" target="_blank" rel="noopener">[vue] vue cli 4.0+ 解决前端跨域问题</a></strong> &nbsp;&nbsp;<strong><a href="https://blog.csdn.net/weixin_39553363/article/details/104152142" target="_blank" rel="noopener">图解vue3.0/vueCli4解决跨域问题</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="跨域" scheme="http://blog.zhangzonglinagain.xyz/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>@PostConstruct注解原理解析</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-16T05:31:00.000Z</published>
    <updated>2021-11-16T05:32:14.597Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lay2017/p/11735802.html" target="_blank" rel="noopener">@PostConstruct注解原理解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lay2017/p/11735802.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@PostConstruct注解原理解析&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
      <category term="PostConstruct" scheme="http://blog.zhangzonglinagain.xyz/tags/PostConstruct/"/>
    
  </entry>
  
  <entry>
    <title>Filter和Interceptor的比较</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2021-11-15T12:58:00.000Z</published>
    <updated>2021-11-15T13:12:15.065Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/5f5e5211bbdb" target="_blank" rel="noopener">Filter和Interceptor的比较</a>, &nbsp;&nbsp;&nbsp;<a href="https://www.cnblogs.com/hellovoyager1/p/9152292.html" target="_blank" rel="noopener">Listener、Filter 和Interceptor 总结</a>, &nbsp;&nbsp;<a href="https://www.cnblogs.com/hhhshct/p/8808115.html" target="_blank" rel="noopener">springboot配置监听器、过滤器和拦截器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/5f5e5211bbdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filter和Interceptor的比较&lt;/a&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="spring" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/"/>
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/java/"/>
    
    
      <category term="interceptor" scheme="http://blog.zhangzonglinagain.xyz/tags/interceptor/"/>
    
      <category term="filter" scheme="http://blog.zhangzonglinagain.xyz/tags/filter/"/>
    
      <category term="listener" scheme="http://blog.zhangzonglinagain.xyz/tags/listener/"/>
    
  </entry>
  
  <entry>
    <title> ThreadLocal 详解</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-13T03:57:48.000Z</published>
    <updated>2021-11-13T04:02:29.178Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html" target="_blank" rel="noopener">ThreadLocal原理</a>  ,&nbsp;&nbsp;&nbsp; <a href="https://juejin.cn/post/6844903487193481224" target="_blank" rel="noopener">Java 之 ThreadLocal 详解: 内存泄漏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadLocal原理&lt;/a&gt;  ,&amp;nbsp;&amp;n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>@interface 简介</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/11/interface/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/11/interface/</id>
    <published>2021-11-11T13:28:27.000Z</published>
    <updated>2021-11-11T13:29:41.370Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zhangbeizhen18/article/details/87885441/" target="_blank" rel="noopener">自定义注释@interface的用法理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhangbeizhen18/article/details/87885441/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义注释@interface的用法理解&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node升级提示(sudo: npm: command not found)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/</id>
    <published>2021-08-12T13:40:51.000Z</published>
    <updated>2021-08-12T14:42:57.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：<em>sudo npm install n -g</em>，结果提示：<em>sudo : npm :command not found</em>。</p><a id="more"></a><h3 id="node、npm升级"><a href="#node、npm升级" class="headerlink" title="node、npm升级"></a>node、npm升级</h3><p>正常情况下，先安装工具<em>n</em>，然后通过它升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line"></span><br><span class="line">sudo n stable  # 安装最新版本</span><br></pre></td></tr></table></figure><p>但出现了前言里的错误，不加sudo，权限不够，加了又无法识别命令。</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这是什么原因呢？<br>输入<em>which npm*可以得到</em>/home/zzl/.nvm/versions/node/v12.21.0/bin/npm*，这个是普通用户的目录。<br>而sudo执行的是/usr/bin目录，这是root用户的目录,<br>所以使用sudo命令是识别不到这个命令的，我们可以使用软链接来处理这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node</span><br><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;bin&#x2F;npm</span><br></pre></td></tr></table></figure><p>将上面左边的命令位置，替换用which npm查询出来的就行了。</p><p><strong>当然我用了which node之后就意识到我以前是用的nvm管理node的版本，差点儿就用n在另外的位置重新下了个版本，而且还发现以前用apt-get下了个更早的版本，每个工具下载的位置都不同，混乱不堪，统统删了，以后只用nvm管理node版本！教训啊～</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：&lt;em&gt;sudo npm install n -g&lt;/em&gt;，结果提示：&lt;em&gt;sudo : npm :command not found&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>H5页面在微信浏览器中通过网页授权获取用户信息(openid、昵称、头像等)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/</id>
    <published>2021-08-10T18:22:00.000Z</published>
    <updated>2021-08-11T08:38:33.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>公众号准备：生产环境的微信公众号，需要按照官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）设置。开发环境可以前往<strong><a href="https://link.segmentfault.com/?url=https%3A%2F%2Fmp.weixin.qq.com%2Fdebug%2Fcgi-bin%2Fsandbox%3Ft%3Dsandbox%2Flogin" target="_blank" rel="noopener">微信公众平台</a></strong>申请测试号。</p><p>注意：正式的公众号不需要关注，也可以通过网页授权获取用户信息，而测试号必须要关注！</p><h3 id="微信授权流程"><a href="#微信授权流程" class="headerlink" title="微信授权流程"></a>微信授权流程</h3><p>详细流程见官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）。</p><p>具体而言，网页授权流程分为四步：</p><ol><li><p>引导用户进入授权页面同意授权，获取code</p></li><li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p></li><li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p></li><li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p></li></ol><p>时序图如下：</p><p><img src="/images/pasted-47.png" alt="upload successful"></p><h3 id="授权code的获取"><a href="#授权code的获取" class="headerlink" title="授权code的获取"></a>授权code的获取</h3><p>以上是大概流程，这里主要分析用户统一授权后，获取code的两个路径：前端截取及后端获取。</p><p>原理是：获取用户授权需要按照微信规定拼装链接，让用户点击访问，其中拼接的链接中有个redirect_uri参数(授权后重定向的回调链接地址)，微信服务器处理后会将redirect_uri拼接code等参数，浏览器会重定向该地址，也就形成了两个获取code的方法，前端在url截取code,后端也可以通过浏览器访问此链接获取code参数。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line">const url &#x3D; &#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br></pre></td></tr></table></figure><h4 id="前端获取"><a href="#前端获取" class="headerlink" title="前端获取"></a>前端获取</h4><p>如果不是每次进入页面都要从微信获取code码时（用户信息），建议在前端获取，需要时才改变浏览器链接让用户访问链接获取授权，把code码传给后端获取用户信息。</p><p>也可以参看此代码：<strong><a href="https://www.cnblogs.com/congfeicong/p/11125575.html" target="_blank" rel="noopener">H5页面获取微信公众号的openid</a></strong>，或者如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line"></span><br><span class="line">const url&#x3D;&#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br><span class="line"></span><br><span class="line">const querystring &#x3D; getQueryString()</span><br><span class="line">let code &#x3D; querystring.code;</span><br><span class="line"></span><br><span class="line">if(!code)&#123;</span><br><span class="line">    location.href &#x3D; url;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    https.get(&#39;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;auth&#39;,&#123;code&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getQueryString() &#123;</span><br><span class="line">    const url &#x3D; location.search;</span><br><span class="line">    const rs &#x3D; &#123;&#125;</span><br><span class="line">    if(url.indexOf(&#39;?&#39;) &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">        const querystring &#x3D; url.substr(1);</span><br><span class="line">        const kvArr &#x3D; querystring.split(&#39;&amp;&#39;);</span><br><span class="line">        kvArr.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">            const temp &#x3D; item.split(&#39;&#x3D;&#39;)</span><br><span class="line">            const key &#x3D; temp[0];</span><br><span class="line">            const val &#x3D; temp[1];</span><br><span class="line">            rs[key] &#x3D; val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return rs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端获取"><a href="#后端获取" class="headerlink" title="后端获取"></a>后端获取</h4><p>如果每次都要获取code码，就让用户只要进入页面就访问接口链接，但这时的redirectUri要配置成后端接口的链接，也就是说微信会带着code码访问后端接口，后端直接获取code码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;后端使用koa2</span><br><span class="line">&#x2F;&#x2F;Superagent时一个后端的http请求中间件</span><br><span class="line">router.get(&#39;&#x2F;auth&#39;, async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    code &#x3D; ctx.querystring.split(&#39;&amp;&#39;)[0].split(&#39;&#x3D;&#39;)[1];</span><br><span class="line">    &#x2F;&#x2F; 使用code获取openid和access_token </span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;oauth2&#x2F;access_token?appid&#x3D;$&#123;appid&#125;&amp;secret&#x3D;$&#123;appsecret&#125;&amp;code&#x3D;$&#123;code&#125;&amp;grant_type&#x3D;authorization_code&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            let result &#x3D; JSON.parse(res.text)</span><br><span class="line">            access_token &#x3D; result.access_token</span><br><span class="line">            openid &#x3D; result.openid</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用ACCESS_TOKEN和openid获取userinfo</span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;userinfo?access_token&#x3D;$&#123;access_token&#125;&amp;openid&#x3D;$&#123;openid&#125;&amp;lang&#x3D;zh_CN&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F;userinfo返回给前端</span><br><span class="line">            userinfo &#x3D; JSON.parse(res.text)</span><br><span class="line">            ctx.body &#x3D; res.text</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.zhangzonglinagain.xyz/categories/Vue/"/>
    
    
      <category term="微信公众号" scheme="http://blog.zhangzonglinagain.xyz/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/</id>
    <published>2021-05-31T07:32:08.000Z</published>
    <updated>2021-05-31T07:32:59.094Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://cloud.tencent.com/developer/article/1626729" target="_blank" rel="noopener">Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1626729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vertx-plugin build vertx app with gradle</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/</id>
    <published>2021-05-05T17:42:00.000Z</published>
    <updated>2021-05-05T18:06:04.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://plugins.gradle.org/plugin/io.vertx.vertx-plugin" target="_blank" rel="noopener">io.vertx.vertx-plugin</a> 介绍，gradle 添加vertx-plugin，脚本启动vertx application.</p><a id="more"></a><ol><li>build.gradle</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;io.vertx.vertx-plugin&#39; version &#39;1.2.0&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &#39;org.example&#39;</span><br><span class="line">version &#39;1.0-SNAPSHOT&#39;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">![upload successful](&#x2F;images&#x2F;pasted-45.png)</span><br><span class="line">    testImplementation &#39;org.junit.jupiter:junit-jupiter-api:5.6.0&#39;</span><br><span class="line">    testRuntimeOnly &#39;org.junit.jupiter:junit-jupiter-engine&#39;</span><br><span class="line">    compile &quot;io.vertx:vertx-core:4.0.3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vertx &#123;</span><br><span class="line">  mainVerticle &#x3D; &quot;MainVerticle&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>idea Run/Debug configurations</li></ol><p><img src="/images/pasted-46.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/io.vertx.vertx-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;io.vertx.vertx-plugin&lt;/a&gt; 介绍，gradle 添加vertx-plugin，脚本启动vertx application.&lt;/p&gt;
    
    </summary>
    
    
      <category term="vertx" scheme="http://blog.zhangzonglinagain.xyz/categories/vertx/"/>
    
    
      <category term="vertx-plugin" scheme="http://blog.zhangzonglinagain.xyz/tags/vertx-plugin/"/>
    
  </entry>
  
  <entry>
    <title>websocket data transfer </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/</id>
    <published>2021-05-05T10:08:00.000Z</published>
    <updated>2021-05-05T10:09:28.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><a id="more"></a><h3 id="Receiving-Text-and-Binary-Data"><a href="#Receiving-Text-and-Binary-Data" class="headerlink" title="Receiving Text and Binary Data"></a>Receiving Text and Binary Data</h3><p><strong>参考：<a href="https://www.oreilly.com/library/view/high-performance-browser/9781449344757/ch17.html" target="_blank" rel="noopener">websocket receiving Text and Binary Data</a></strong></p><p>WebSocket communication consists of messages and application code and does not need to worry about buffering, parsing, and reconstructing received data. For example, if the server sends a 1 MB payload, the application’s onmessage callback will be called only when the entire message is available on the client.</p><p>Further, the WebSocket protocol makes no assumptions and places no constraints on the application payload: both text and binary data are fair game. Internally, the protocol tracks only two pieces of information about the message: the length of payload as a variable-length field and the type of payload to distinguish UTF-8 from binary transfers.</p><p>When a new message is received by the browser, it is automatically converted to a DOMString object for text-based data, or a Blob object for binary data, and then passed directly to the application. The only other option, which acts as performance hint and optimization for the client, is to tell the browser to convert the received binary data to an ArrayBuffer instead of Blob:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var ws &#x3D; new WebSocket(&#39;wss:&#x2F;&#x2F;example.com&#x2F;socket&#39;);</span><br><span class="line">ws.binaryType &#x3D; &quot;arraybuffer&quot;; 1</span><br><span class="line"></span><br><span class="line">ws.onmessage &#x3D; function(msg) &#123;</span><br><span class="line">  if(msg.data instanceof ArrayBuffer) &#123;</span><br><span class="line">    processArrayBuffer(msg.data);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    processText(msg.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Data-transfer"><a href="#Data-transfer" class="headerlink" title="Data transfer"></a>Data transfer</h3><p><strong>参考：<a href="https://javascript.info/websocket#data-transfer" target="_blank" rel="noopener">websocket data transfer</a></strong></p><p>WebSocket communication consists of “frames” – data fragments, that can be sent from either side, and can be of several kinds:</p><ul><li>“text frames” – contain text data that parties send to each other.</li><li>“binary data frames” – contain binary data that parties send to each other.</li><li>“ping/pong frames” are used to check the connection, sent from the server, the browser responds to these automatically.</li><li>there’s also “connection close frame” and a few other service frames.<br>In the browser, we directly work only with text or binary frames.</li></ul><p><em>WebSocket .send()</em> method can send either text or binary data.</p><p>A call <em>socket.send(body)</em> allows body in string or a binary format, including Blob, ArrayBuffer, etc. No settings required: just send it out in any format.</p><p>When we receive the data, text always comes as string. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><p>That’s set by <em>socket.binaryType</em> property, it’s “blob” by default, so binary data comes as Blob objects.</p><p>Blob is a high-level binary object, it directly integrates with <a>, <img> and other tags, so that’s a sane default. But for binary processing, to access individual data bytes, we can change it to “arraybuffer”:</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  ws.binaryType &#x3D; &quot;arraybuffer&quot;;</span><br><span class="line">  ws.onmessage &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; event.data is either a string (if text) or arraybuffer (if binary)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.&lt;/p&gt;
    
    </summary>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/categories/websocket/"/>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>ProcessExecutor、ProcessBuilder、Runtime.getRuntime().exec(...) </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/</id>
    <published>2021-05-02T05:55:00.000Z</published>
    <updated>2021-05-02T06:47:59.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。</p><a id="more"></a><h3 id="Runtime-amp-ProcessBuilder"><a href="#Runtime-amp-ProcessBuilder" class="headerlink" title="Runtime&amp;ProcessBuilder"></a>Runtime&amp;ProcessBuilder</h3><p><em>Runtime.getInstance().exec (String cmd)</em>和<em>new ProcessBuilder(String cmd).start()</em>都可以产生子进程对象Process。通过调用Process对象的waitFor()方法可以使主进程进入等待状态，直至子进程执行完毕，再进行下一步工作。如果对子进程处理不当，有可能造成主进程阻塞，整个程序死掉。(A program is executed with command(). With waitFor() we can wait for the process to finish.)<br><strong>通过查看JDK源码可知，Runtime.exec最终是通过调用ProcessBuilder来真正执行操作的</strong>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Process exec(String command) throws IOException &#123;</span><br><span class="line">    return exec(command, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String command, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    if (command.length() &#x3D;&#x3D; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Empty command&quot;);</span><br><span class="line"></span><br><span class="line">    StringTokenizer st &#x3D; new StringTokenizer(command);</span><br><span class="line">    String[] cmdarray &#x3D; new String[st.countTokens()];</span><br><span class="line">    for (int i &#x3D; 0; st.hasMoreTokens(); i++)</span><br><span class="line">        cmdarray[i] &#x3D; st.nextToken();</span><br><span class="line">    return exec(cmdarray, envp, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String[] cmdarray, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    return new ProcessBuilder(cmdarray)</span><br><span class="line">        .environment(envp)</span><br><span class="line">        .directory(dir)</span><br><span class="line">        .start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessExecutor-amp-ProcessBuilder"><a href="#ProcessExecutor-amp-ProcessBuilder" class="headerlink" title="ProcessExecutor&amp;ProcessBuilder"></a>ProcessExecutor&amp;ProcessBuilder</h3><p>ProcessExecutor is implemented as a wrapper of <em>ProcessBuilder</em> complementing it with additional features.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ProcessExecutor &#123;</span><br><span class="line"></span><br><span class="line">  private static final Logger log &#x3D; LoggerFactory.getLogger(ProcessExecutor.class);</span><br><span class="line"></span><br><span class="line">  private static final boolean IS_OS_WINDOWS &#x3D; System.getProperty(&quot;os.name&quot;).startsWith(&quot;Windows&quot;);</span><br><span class="line"></span><br><span class="line">  public static final Integer[] DEFAULT_EXIT_VALUES &#x3D; null;</span><br><span class="line"></span><br><span class="line">  private static final Integer NORMAL_EXIT_VALUE &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  public static final boolean DEFAULT_REDIRECT_ERROR_STREAM &#x3D; true;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Process builder used by this executor.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final ProcessBuilder builder &#x3D; new ProcessBuilder();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Environment variables which are added (removed in case of &lt;code&gt;null&lt;&#x2F;code&gt; values) to the process being started.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final Map&lt;String, String&gt; environment &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Set of accepted exit codes or &lt;code&gt;null&lt;&#x2F;code&gt; if all exit codes are allowed.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private Set&lt;Integer&gt; allowedExitValues;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ProcessExecutor在后台运行进程（不阻塞当前代码对执行）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runInBackground() throws IOException, InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    List&lt;Future&lt;ProcessResult&gt;&gt; tasks &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">        Future&lt;ProcessResult&gt; future &#x3D; new ProcessExecutor().command(&quot;java&quot;, &quot;-version&quot;)</span><br><span class="line">                .start().getFuture();</span><br><span class="line">        tasks.add(future);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Future&lt;ProcessResult&gt; future : tasks) &#123;</span><br><span class="line">        ProcessResult processResult &#x3D; future.get(1, TimeUnit.SECONDS);</span><br><span class="line">        int exitValue &#x3D; processResult.getExitValue();</span><br><span class="line">        log.info(&quot;The exit value of the finished process is &#123;&#125;&quot;, exitValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<strong><a href="https://github.com/zeroturnaround/zt-exec" target="_blank" rel="noopener">GitHub: ZT Process Executor</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu apt-get autoclean,clean,autoremove</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/29/Ubuntu-apt-get-autoclean-clean-autoremove/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/29/Ubuntu-apt-get-autoclean-clean-autoremove/</id>
    <published>2021-04-29T11:50:00.000Z</published>
    <updated>2021-04-29T12:03:21.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ubuntu移除安装包时用到的几个命令：autoclean,clean,autoremove</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoclean:</span><br></pre></td></tr></table></figure><blockquote><p>如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删<br>除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get clean:</span><br></pre></td></tr></table></figure><blockquote><p>类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoremove:</span><br></pre></td></tr></table></figure><blockquote><p>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。</p></blockquote><p>其它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove 软件包名称：</span><br></pre></td></tr></table></figure><blockquote><p>删除已安装的软件包（保留配置文件）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get --purge remove 软件包名称：</span><br></pre></td></tr></table></figure><blockquote><p>删除已安装包（不保留配置文件)。</p></blockquote><p>This completely depends on what you want to achieve, they are separate for a reason. But lets see what they actually do:</p><blockquote><p>apt/apt-get clean → cleans the packages and install script in /var/cache/apt/archives/<br>apt/apt-get autoclean → cleans obsolete deb-packages, less than clean<br>apt/apt-get autoremove → removes orphaned packages which are not longer needed from the system, but not purges them, use the –purge option together with the command for that.  </p></blockquote><p>So it is up to you to decide if you want to combine one of the first two with the last one and you can do this like below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove &amp;&amp; sudo apt clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ubuntu移除安装包时用到的几个命令：autoclean,clean,autoremove&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/ubuntu/"/>
    
    
      <category term="apt-get" scheme="http://blog.zhangzonglinagain.xyz/tags/apt-get/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 桌面死机(重启gnome-shell)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/19/ubuntu-%E6%A1%8C%E9%9D%A2%E6%AD%BB%E6%9C%BA/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/19/ubuntu-%E6%A1%8C%E9%9D%A2%E6%AD%BB%E6%9C%BA/</id>
    <published>2021-04-19T10:54:00.000Z</published>
    <updated>2021-04-19T17:01:55.765Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu有时桌面会卡死，鼠标点击失灵，解决方法：重启gnome-shell。<br>建议以下两种二选一：</p><ul><li><span style="color:red">alt + F2</span>  弹出的输入框里输入小写<span style="color:red">r</span> ，回车，如此重启gnome-shell桌面环境。</li><li><span style="color:red">ctrl + alt + F3</span> 切换到其它虚拟终端tty3(Ubuntu18.04 默认tty1是选择用户登录界面，tty2往往就是对应卡死的桌面位置，我们选择tty3进行操作)，输入用户密码登录，输入<span style="color:red">ps -ef|grep gnome-shell</span> ，找到tty2对应的gnome-shell pid（一般有两个，一个是tty1的，一个是tty2的），<span style="color:red">kill -9 pidNum</span> ，系统自动重启gnome-shell,最后<span style="color:red">crl + alt +F2</span> 切换至tty2,这种方法的优点是不会干扰其他正在运行的程序。<a id="more"></a>其他方法还有（未验证）：</li></ul><h3 id="How-to-restart-GUI-on-Ubuntu-20-04-step-by-step-instructions"><a href="#How-to-restart-GUI-on-Ubuntu-20-04-step-by-step-instructions" class="headerlink" title="How to restart GUI on Ubuntu 20.04 step by step instructions"></a>How to restart GUI on Ubuntu 20.04 step by step instructions</h3><p>Sometimes you many need to restart/reload GUI because you may have done some changes which require it. However, occasionally you are forced to restart GUI because it froze and you do not wish to restart the entire system. In any case you might find some of the bellow information helpful.</p><h4 id="The-first-method-is-the-least-destructing-however-it-might-not-provide-the-expected-result"><a href="#The-first-method-is-the-least-destructing-however-it-might-not-provide-the-expected-result" class="headerlink" title="The first method is the least destructing, however, it might not provide the expected result."></a>The first method is the least destructing, however, it might not provide the expected result.</h4><p>Enter a restart gui Command</p><p><img src="/images/pasted-36.png" alt="upload successful"></p><p>While logged in to your GNOME desktop press <span style="color:red">ALT + F2</span> key combination. Into the Enter a Command box type <span style="color:red">r </span> and press <span style="color:red">Enter</span> .</p><h4 id="Another-alternative-to-do-the-GUI-restart-trick-might-be-the-most-obvious-to-simply-re-login"><a href="#Another-alternative-to-do-the-GUI-restart-trick-might-be-the-most-obvious-to-simply-re-login" class="headerlink" title="Another alternative to do the GUI restart trick might be the most obvious to simply re-login."></a>Another alternative to do the GUI restart trick might be the most obvious to simply re-login.</h4><p><img src="/images/pasted-37.png" alt="upload successful"><br>Restart GUI by first Log Out and consequently Log In to your GUI desktop</p><h4 id="In-this-scenario-we-simply-restart-the-gnome-shell-as-non-privileged-user"><a href="#In-this-scenario-we-simply-restart-the-gnome-shell-as-non-privileged-user" class="headerlink" title="In this scenario we simply restart the gnome-shell as non-privileged user."></a>In this scenario we simply restart the gnome-shell as non-privileged user.</h4><p><img src="/images/pasted-38.png" alt="upload successful"><br>Open up terminal and enter the <span style="color:red">gnome-shell –replace </span>command.</p><h4 id="The-following-restart-GUI-solution-is-guaranteed-to-restart-your-desktop-even-if-your-GUI-froze-while-the-system-is-still-functioning-However-it-needs-administrative-sudo-privileges"><a href="#The-following-restart-GUI-solution-is-guaranteed-to-restart-your-desktop-even-if-your-GUI-froze-while-the-system-is-still-functioning-However-it-needs-administrative-sudo-privileges" class="headerlink" title="The following restart GUI solution is guaranteed to restart your desktop even if your GUI froze while the system is still functioning. However, it needs administrative sudo privileges."></a>The following restart GUI solution is guaranteed to restart your desktop even if your GUI froze while the system is still functioning. However, it needs administrative sudo privileges.</h4><p><img src="/images/pasted-39.png" alt="upload successful"><br>Either enter the <span style="color:red">sudo systemctl restart systemd-logind.service </span>command directly into the terminal while in GUI. However, if your GUI is frozen you may need to first change to TTY console using <span style="color:red">CTRL + ALT + F2</span>, login and execute command from there.</p><h4 id="In-this-method-we-will-restart-the-Display-Manager-which-will-consequently-also-restart-GNOME-shell"><a href="#In-this-method-we-will-restart-the-Display-Manager-which-will-consequently-also-restart-GNOME-shell" class="headerlink" title="In this method we will restart the Display Manager which will consequently also restart GNOME shell."></a>In this method we will restart the Display Manager which will consequently also restart GNOME shell.</h4><p><img src="/images/pasted-40.png" alt="upload successful"><br>Either from GUI and TTY console <span style="color:red">CTRL + ALT + F2</span> execute <span style="color:red">sudo systemctl restart gdm</span> command. However, if you have deployed LightDM display manager in that case execute<span style="color:red"> sudo systemctl restart lightdm</span> command.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu有时桌面会卡死，鼠标点击失灵，解决方法：重启gnome-shell。&lt;br&gt;建议以下两种二选一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color:red&quot;&gt;alt + F2&lt;/span&gt;  弹出的输入框里输入小写&lt;span style=&quot;color:red&quot;&gt;r&lt;/span&gt; ，回车，如此重启gnome-shell桌面环境。&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color:red&quot;&gt;ctrl + alt + F3&lt;/span&gt; 切换到其它虚拟终端tty3(Ubuntu18.04 默认tty1是选择用户登录界面，tty2往往就是对应卡死的桌面位置，我们选择tty3进行操作)，输入用户密码登录，输入&lt;span style=&quot;color:red&quot;&gt;ps -ef|grep gnome-shell&lt;/span&gt; ，找到tty2对应的gnome-shell pid（一般有两个，一个是tty1的，一个是tty2的），&lt;span style=&quot;color:red&quot;&gt;kill -9 pidNum&lt;/span&gt; ，系统自动重启gnome-shell,最后&lt;span style=&quot;color:red&quot;&gt;crl + alt +F2&lt;/span&gt; 切换至tty2,这种方法的优点是不会干扰其他正在运行的程序。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/ubuntu/"/>
    
    
      <category term="gnome-shell" scheme="http://blog.zhangzonglinagain.xyz/tags/gnome-shell/"/>
    
  </entry>
  
  <entry>
    <title>markdown的html标签应用及常用语法</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/19/markdown%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/19/markdown%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0/</id>
    <published>2021-04-19T06:59:00.000Z</published>
    <updated>2021-04-29T11:54:24.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Markdown 是一种轻量级标记语言，非常适合网络书写。同时，Markdown支持嵌入html标签，我们就可以借此实现markdown不具有的某些功能，如代码折叠和文字样式等。</p><p><strong><a href="http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/" target="_blank" rel="noopener">Markdown的常用语法(个人总结) | ConnorLin’s Blog </a></strong></p><a id="more"></a><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;</span><br><span class="line">  &lt;font color&#x3D;&quot;#0000ff&quot; &gt;点击时的区域标题：点击查看详细内容&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;&#x2F;summary&gt;</span><br><span class="line">  &lt;p&gt; - 测试 测试测试&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;pre&gt;&lt;code&gt;  title，value，callBack可以缺省  &lt;&#x2F;code&gt;  &lt;&#x2F;pre&gt;</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><ul><li><p>summary：折叠语法展示的摘要</p></li><li><p>details：折叠语法标签</p></li><li><p>pre：以原有格式显示元素内的文字是已经格式化的文本。</p></li><li><p>blockcode：表示程序的代码块。</p></li><li><p>code：指定代码范例。</p></li></ul><p>效果如下：</p><details>  <summary><font color="#0000ff">点击时的区域标题：点击查看详细内容</font></summary>  <p> - 测试 测试测试</p>  <pre><code>  title，value，callBack可以缺省  </code>  </pre></details><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style&#x3D;&#39;color:red&#39;&gt;This is red&lt;&#x2F;span&gt;   &#x2F;&#x2F;字体颜色</span><br><span class="line">&lt;ruby&gt; 漢 &lt;rt&gt; ㄏㄢˋ &lt;&#x2F;rt&gt; &lt;&#x2F;ruby&gt; &#x2F;&#x2F; 特殊字</span><br><span class="line">&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;F9&lt;&#x2F;kbd&gt;  &#x2F;&#x2F; 按键标识</span><br><span class="line">&lt;span style&#x3D;&quot;font-size:2rem; background:yellow;&quot;&gt;**Bigger**&lt;&#x2F;span&gt; &#x2F;&#x2F;字体大小和背景</span><br><span class="line"></span><br><span class="line">&lt;font face&#x3D;&quot;微软雅黑&quot; color&#x3D;&quot;red&quot; size&#x3D;&quot;6&quot;&gt;字体及字体颜色和大小&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;&quot;#0000ff&quot;&gt;字体颜色&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">&lt;p align&#x3D;&quot;left&quot;&gt;居左文本&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;center&quot;&gt;居中文本&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;right&quot;&gt;居右文本&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>使用span或者font标签，同时用style属性控制样式。</p><p>效果如下：<br><span style="color:red">This is red</span>   //字体颜色</p><p><ruby> 漢 <rt> ㄏㄢˋ </rt> </ruby> // 特殊字</p><p><kbd>Ctrl</kbd>+<kbd>F9</kbd>  // 按键标识</p><p><span style="font-size:2rem; background:yellow;"><strong>Bigger</strong></span> //字体大小和背景</p><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font></p><p><font color="#0000ff">字体颜色</font></p><p align="left">居左文本</p><p align="center">居中文本</p><p align="right">居右文本</p><p>参考来源：<br><strong><a href="https://www.cnblogs.com/buwuliao/p/9578918.html" target="_blank" rel="noopener">【MarkDown】使用Html样式和折叠语法</a></strong>、<br><strong><a href="http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/" target="_blank" rel="noopener">Markdown的常用语法(个人总结) | ConnorLin’s Blog </a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，非常适合网络书写。同时，Markdown支持嵌入html标签，我们就可以借此实现markdown不具有的某些功能，如代码折叠和文字样式等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown的常用语法(个人总结) | ConnorLin’s Blog &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://blog.zhangzonglinagain.xyz/categories/markdown/"/>
    
    
  </entry>
  
</feed>
