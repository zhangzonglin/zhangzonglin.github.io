<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2024-08-07T12:24:53.260Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端请求Connection Start, Stalled时间过长</title>
    <link href="http://blog.zhangzonglinagain.xyz/2024/08/07/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82Connection-Start-Stalled%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/"/>
    <id>http://blog.zhangzonglinagain.xyz/2024/08/07/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82Connection-Start-Stalled%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF/</id>
    <published>2024-08-07T11:18:00.000Z</published>
    <updated>2024-08-07T12:24:53.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这两天发现前端页面长时间不操作后，第一次的请求偶尔会长达3、4秒，后续请求则正常。</p><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>chrome debug network timing ,发现是Stalled耗时太久，如下图所示：</p><p><img src="/%5Cimages%5Cpasted-70.png" alt="upload successful"><br>网上关于Stalled的解释很多，这里不再赘述。第一个反应是http版本的原因，但当时只有一个请求，不应该是并发导致的，本着试试也没差的态度，先升级到http2再说。</p><h3 id="nginx配置http2"><a href="#nginx配置http2" class="headerlink" title="nginx配置http2"></a>nginx配置http2</h3><p>由于是已有的项目，nginx需要重新编译添加ngx_http_v2_module模块, 具体可以参考如下：<br><a href="https://segmentfault.com/a/1190000044036143" target="_blank" rel="noopener">Nginx—已安装了nginx，如何启用http2.0协议</a>。安装完毕后，修改conf配置，添加http2支持。<br><img src="/%5Cimages%5Cpasted-71.png" alt="upload successful"><br>重新载入，service nginx reload，查看chrome，已是http2<br><img src="/%5Cimages%5Cpasted-73.png" alt="upload successful">但是，Stalled阶段耗时太久的问题，还是会偶尔发生。</p><h3 id="chrome日志"><a href="#chrome日志" class="headerlink" title="chrome日志"></a>chrome日志</h3><p>一开始想着用wireshark抓包，后来发现chrome自带的抓包日志挺好用的。chrome里打开 chrome:&#x2F;&#x2F;net-export&#x2F;，参数默认，选择好日志文件名后，点击开始记录，回到前端项目发送请求（由于是偶发的时间过长，重复了多次才捕捉到一回耗时太久的请求）。然后打开<code>https://netlog-viewer.appspot.com/</code>(需要科学上网)，import刚刚生成的日志文件，如下图所示：</p><p><img src="/%5Cimages%5Cpasted-74.png" alt="upload successful"><br>点击左侧的Events,可以看到刚刚记录的所有请求，找到前端项目的那个请求，可以看到它的各个任务的耗时，</p><p><img src="/%5Cimages%5Cpasted-75.png" alt="upload successful">，参考<a href="https://blog.csdn.net/u010793461/article/details/109194973" target="_blank" rel="noopener">chrome Stalled时间过长</a>里对日志的解读方式，日志第一列为时间线，自请求发起时算。 第二列为每步操作所逝去的时间，时间差的概念，与第三列里面的dt不同，它会积累前面的耗时。 第三列为具体的事件，以及相应事件的耗时dt，此耗时为绝对耗时。这里主要看st以及后面的dt耗时就行。如图所示，本次请求耗时4407ms，其中<br><img src="/%5Cimages%5Cpasted-76.png" alt="upload successful">这里就耗时4015ms，可以根据层层包裹的ID，一直追踪到ID为131808的事件耗时3970ms</p><p><img src="/%5Cimages%5Cpasted-77.png" alt="upload successful"><br>打开131808: HOST_RESOLVER_IMPL_JOB，查看详细日志，如下图：</p><p><img src="/%5Cimages%5Cpasted-78.png" alt="upload successful"><br>到这里猜测是DNS解析的时候出了问题。</p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig +trace +nodnssec time.geekbang.org</span><br></pre></td></tr></table></figure><p>如何解读可以参考下面的连接。尝试多次，基本上十次里有两三次带有超时，就是通过IPV6地址连接DNS服务器ns1.dns-diy.com与ns2.dns-diy.com，然后本地ping这两个DNS服务器，有时正常，有时就ping不通。</p><p><img src="/%5Cimages/pasted-79.png" alt="upload successful"><br>换了其他网络的服务器，执行同样的命令，则一直正常，如下：</p><p><img src="/%5Cimages/pasted-80.png" alt="upload successful"><br>到了这里怀疑是我本地网络（杭州联通）的原因，后续再追查下</p><p>参考：<a href="https://blog.csdn.net/xixihahalelehehe/article/details/119218996" target="_blank" rel="noopener">DNS解析命令</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这两天发现前端页面长时间不操作后，第一次的请求偶尔会长达3、4秒，后续请求则正常。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="运维" scheme="http://blog.zhangzonglinagain.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>paddleocr 在centos7.9上的部署</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/10/27/paddleocr-%E5%9C%A8centos7-9%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/10/27/paddleocr-%E5%9C%A8centos7-9%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2/</id>
    <published>2023-10-27T10:36:18.000Z</published>
    <updated>2023-10-27T13:30:07.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>业务需求，要给项目加个身份证图片识别，看了一圈目前的开源OCR，发现除了百度的paddleocr还可以，其余的只能算是玩具，本地玩儿玩儿还可以，要上生产还不够，谨此记录一下部署paddleocr的步骤，后续参考。</p><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>系统centos7.9,为了避免搞乱生产环境，采取docker部署paddlehub的方式。</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>参考以下<a href="https://blog.csdn.net/qq_43721032/article/details/119134118" target="_blank" rel="noopener">CentOS 7.9下安装Docker及常用镜像</a>中安装dockery以及配置docker镜像源的部分。<br>另外考虑到系统系统盘大小有限，要把docker的数据存储目录设置在数据盘上(&#x2F;mnt&#x2F;docker),同样在上面设置镜像源的文件(&#x2F;etc&#x2F;docker&#x2F;daemon.json)里，配置”data-root”，结果如下：</p><p><img src="/images/pasted-63.png" alt="upload successful"></p><p>重启docker后，通过命令：docker info 查看设置是否生效</p><p><img src="/images/pasted-64.png" alt="upload successful"></p><h3 id="拉镜像以及安装ocr"><a href="#拉镜像以及安装ocr" class="headerlink" title="拉镜像以及安装ocr"></a>拉镜像以及安装ocr</h3><h4 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h4><p>直接从github或者gitgee下载paddleocr的代码（git clone的话，指定最新版本），放到系统上新建立的相应目录下，如：&#x2F;data&#x2F;PaddleOCR&#x2F;</p><h4 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h4><p>本次为了省事儿，直接用的飞桨官网的镜像（它们的镜像是ubuntu18 python是3.7，还需要重新安装python3.8，以及后面一系列的安装，下次可以直接用ubuntu22的镜像,就是需要各种安装）。参考官网：<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/install/docker/linux-docker.html#anchor-0" target="_blank" rel="noopener">Linux 下的 Docker 安装</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;PaddleOCR</span><br><span class="line"></span><br><span class="line">docker pull registry.baidubce.com&#x2F;paddlepaddle&#x2F;paddle:2.5.2  </span><br><span class="line"></span><br><span class="line">docker run --name paddle_docker -p 8868:8868 -it -v $PWD:&#x2F;PaddleOCR registry.baidubce.com&#x2F;paddlepaddle&#x2F;paddle:2.5.2 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>然后就可以进去配置环境了。以下命令查看系统信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">cat &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure><p>也可在在根目录下看到&#x2F;PaddleOCR目录，即上面paddleocr项目的目录。<br>以下的操作都是在该容器内进行</p><h4 id="安装python3-8"><a href="#安装python3-8" class="headerlink" title="安装python3.8"></a>安装python3.8</h4><p>从python官网下载安装包，解压安装，具体参考<a href="https://zhuanlan.zhihu.com/p/149796622#:~:text=Ubuntu%E5%AE%89%E8%A3%85Python3%201%20%E7%AC%AC2%E6%AD%A5%EF%BC%9A%E4%B8%8B%E8%BD%BD%20Python%20%E6%BA%90%E7%A0%81%20%E5%8E%BB%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99%E4%B8%8B%E8%BD%BD%EF%BC%9A%20wget%20https%3A%2F%2Fwww.python.org%2Fftp%2Fpython%2F3.8.3%2FPython-3.8.3.tgz,-s%20%2Fusr%2Flocal%2Fpython3.8%2Fbin%2Fpython3.8%20%2Fusr%2Fbin%2Fpython3.8%20ln%20-s%20%2Fusr%2Flocal%2Fpython3.8%2Fbin%2Fpython3.8-config%20%2Fusr%2Fbin%2Fpython3.8-config%20" target="_blank" rel="noopener">Ubuntu安装Python3</a>, 唯一的区别就是我把系统原来的python python3 pip pip3的软连接都删了，重新替换成python3.8的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;bin</span><br><span class="line">rm -rf python</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;python3.8</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">rm -rf python3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;python3.8 &#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">rm -rf pip</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;pip3.8 pip</span><br><span class="line">rm -rf pip3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;pip3.8 pip3</span><br></pre></td></tr></table></figure><p>至此，python升级到3.8，原来的3.7 3.6 等可删可不删。</p><h4 id="安装paddlehub"><a href="#安装paddlehub" class="headerlink" title="安装paddlehub"></a>安装paddlehub</h4><p>由于重新安装了python3.8，要从官网重新安装paddle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install paddlepaddle&#x3D;&#x3D;2.5.2 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install paddlehub --upgrade -i https:&#x2F;&#x2F;mirror.baidu.com&#x2F;pypi&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt -i https:&#x2F;&#x2F;mirror.baidu.com&#x2F;pypi&#x2F;simple</span><br></pre></td></tr></table></figure><p>中途报错如果缺什么组件，直接pip安装该组件即可。安装完之后，给hub命令建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3.8&#x2F;bin&#x2F;hub &#x2F;usr&#x2F;bin&#x2F;hub</span><br></pre></td></tr></table></figure><p>然后输入 hub version 即可看到paddlehub版本号</p><p>下载推理模型，并修改参数(github gitgee上找到推理模型的链接)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;PaddleOCR</span><br><span class="line">mkdir inference</span><br><span class="line">cd inference</span><br><span class="line">wget wget https:&#x2F;&#x2F;paddleocr.bj.bcebos.com&#x2F;PP-OCRv4&#x2F;chinese&#x2F;ch_PP-OCRv4_det_infer.tar </span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;paddleocr.bj.bcebos.com&#x2F;PP-OCRv4&#x2F;chinese&#x2F;ch_PP-OCRv4_rec_infer.tar</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;paddleocr.bj.bcebos.com&#x2F;dygraph_v2.0&#x2F;ch&#x2F;ch_ppocr_mobile_v2.0_cls_infer.tar</span><br></pre></td></tr></table></figure><p>并解压模型文件。</p><p>修改参数：在&#x2F;PaddleOCR&#x2F;deploy&#x2F;hubserving&#x2F;ocr_system&#x2F;下修改params.py，让模型名称跟inference下的一致。</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>将&#x2F;PaddleOCR&#x2F;deploy&#x2F;hubserving&#x2F;ocr_system&#x2F;下的config.json拷贝到&#x2F;PaddleOCR目录下，并根据自己需求修改配置</p><p><img src="/images/pasted-66.png" alt="upload successful"><br>config.josn 配置参考：<a href="https://gitee.com/paddlepaddle/PaddleClas/blob/release/2.3/docs/zh_CN/inference_deployment/paddle_hub_serving_deploy.md" target="_blank" rel="noopener">基于 PaddleHub Serving 的服务部署</a>, 也可以查找官网，不过都大同小异。</p><p>ps: 查找配置时，发现有人提issue,记录在此<a href="https://github.com/PaddlePaddle/PaddleOCR/issues/10497" target="_blank" rel="noopener">PaddleOcr在使用 mkldnn后精度下降</a>, 里面也有修复方法，但要看后续如何。</p><p>为了启动方便，在&#x2F;PaddleOCR下新建个脚本paddleServer.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">cd &#x2F;PaddleOCR</span><br><span class="line">hub install &#x2F;PaddleOCR&#x2F;deploy&#x2F;hubserving&#x2F;ocr_system &amp;&amp; nohup hub serving start -c config.json &amp;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 paddleServer.sh</span><br><span class="line">.&#x2F;paddleServer.sh</span><br></pre></td></tr></table></figure><p>就可以看到paddlehub成功启动。（后续可以考虑将脚本执行添加到docker容器启动里，不用每次进入容器内执行脚本）</p><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;PaddleOCR&#x2F;tools</span><br><span class="line"></span><br><span class="line">python test_hubserving.py --server_url http:&#x2F;&#x2F;anluyou.dibchina.com:8868&#x2F;predict&#x2F;ocr_system --image_dir ..&#x2F;doc&#x2F;imgs&#x2F;00006737.jpg</span><br></pre></td></tr></table></figure><p>就可以看到测试结果</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p>可以在&#x2F;root&#x2F;.paddlehub&#x2F;log&#x2F;看到hub日志<br>通过直接通过hub查看各个命令参数</p><p><img src="/images/pasted-69.png" alt="upload successful"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>每次退出docker容器是，要Ctrl+P+Q,不然容器也会停止运行。<br>也可以将上面布置的环境生成docker镜像,详情可以搜索docker commit 命令。</p><p>上面完成后可以给docker容器增加内存限制，命令如下：<a href="https://blog.51cto.com/u_16175465/7242290" target="_blank" rel="noopener">docker容器默认内存大小</a>、<br><a href="https://zhuanlan.zhihu.com/p/417472115#:~:text=%E9%99%90%E5%88%B6Docker%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%201%20-m%20%E6%88%96,--memory%EF%BC%9A%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E9%99%90%E9%A2%9D%EF%BC%8C%E4%BE%8B%E5%A6%82%EF%BC%9A100MB%EF%BC%8C2GB%E3%80%82%202%20--memory-swap%EF%BC%9A%E8%AE%BE%E7%BD%AE%20%E5%86%85%E5%AD%98%2Bswap%20%E7%9A%84%E4%BD%BF%E7%94%A8%E9%99%90%E9%A2%9D%E3%80%82" target="_blank" rel="noopener">限制Docker使用内存</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update -m 200M --memory-swap&#x3D;300M ubuntu</span><br></pre></td></tr></table></figure><p>后通过docker stats命令查看运行的容易状态：</p><p><img src="/images/pasted-68.png" alt="upload successful"></p><p>以上设置内存限制主要是为了应对paddleocr预测完之后，内存不会主动释放的问题。问题见：<a href="https://github.com/PaddlePaddle/PaddleOCR/issues/303" target="_blank" rel="noopener">识别时内存一直涨 溢出</a>、<a href="https://github.com/PaddlePaddle/Paddle/issues/43346" target="_blank" rel="noopener">paddle 推理完之后内存不释放 </a>、<a href="https://github.com/PaddlePaddle/PaddleOCR/issues/11075" target="_blank" rel="noopener">这个提交未完全解决内存泄漏问题</a><br>一定要控制输入图片的大小，最好不能大于1M，图片越大越慢，甚至预测失败…</p><p>还有一些常用的docker命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器名称： 查看容器日志</span><br><span class="line">docker image ls ：查看所有镜像</span><br><span class="line">docker ps -a : 查看所有容器（去掉a，查看运行的容器）</span><br><span class="line">docker rm 容器ID</span><br><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;业务需求，要给项目加个身份证图片识别，看了一圈目前的开源OCR，发现除了百度的paddleocr还可以，其余的只能算是玩具，本地玩儿玩儿还可以，要上生产还不够，谨此记录一下部署paddleocr的步骤，后续参考。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux 常用命令alias</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/10/10/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4alias/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/10/10/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4alias/</id>
    <published>2023-10-09T17:44:28.000Z</published>
    <updated>2023-10-09T17:46:17.761Z</updated>
    
    <content type="html"><![CDATA[<p>方便日常，ll也要显示隐藏目录及文件，在~&#x2F;.bashrc里添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias ll&#x3D;&#39;ls -alF&#39;</span><br><span class="line">alias la&#x3D;&#39;ls -A&#39;</span><br><span class="line">alias l&#x3D;&#39;ls -CF&#39;</span><br></pre></td></tr></table></figure><p>然后source ~&#x2F;.bashrc即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;方便日常，ll也要显示隐藏目录及文件，在~&amp;#x2F;.bashrc里添加如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>什么是公钥和私钥？</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/10/05/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%EF%BC%9F/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/10/05/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5%EF%BC%9F/</id>
    <published>2023-10-05T05:02:24.000Z</published>
    <updated>2023-10-05T05:02:45.422Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.ledger.com/zh-hans/academy/blockchain/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5" target="_blank" rel="noopener">什么是公钥和私钥？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.ledger.com/zh-hans/academy/blockchain/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%AC%E9%92%A5%E5%92%8C%E7%A7%81%E9%92%A5&quot; targ
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>let var</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/03/11/let-var/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/03/11/let-var/</id>
    <published>2023-03-10T19:28:27.000Z</published>
    <updated>2023-03-10T19:29:52.045Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6925641096152399880" target="_blank" rel="noopener">一看就懂的var、let、const三者区别</a>、<a href="https://www.cnblogs.com/95xdy/p/14578765.html" target="_blank" rel="noopener">let,var区别的实现原理以及变量环境、词法环境、执行上下文，作用域链查找</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">let</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6925641096152399880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一看就懂的var、let、const三者区别&lt;/a&gt;、&lt;a href=&quot;https://www.cnblo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【uni-app】小程序实现微信授权登陆（附流程图）</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/03/10/%E3%80%90uni-app%E3%80%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E9%99%86%EF%BC%88%E9%99%84%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/03/10/%E3%80%90uni-app%E3%80%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E9%99%86%EF%BC%88%E9%99%84%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89/</id>
    <published>2023-03-10T09:37:08.000Z</published>
    <updated>2023-03-10T11:05:33.026Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/haidong55/article/details/124559209" target="_blank" rel="noopener">【uni-app】小程序实现微信授权登陆（附流程图）</a>、<a href="https://blog.csdn.net/qq_43576866/article/details/113126676" target="_blank" rel="noopener">【uni-app】uni-app微信小程序授权登录（详细总结）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/haidong55/article/details/124559209&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【uni-app】小程序实现微信授权登陆（附流程图）&lt;/a&gt;、&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java 继承</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/03/06/java-%E7%BB%A7%E6%89%BF/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/03/06/java-%E7%BB%A7%E6%89%BF/</id>
    <published>2023-03-05T20:52:39.000Z</published>
    <updated>2023-03-08T23:25:44.201Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/133312663" target="_blank" rel="noopener">Java 类继承机制</a>、<a href="https://blog.csdn.net/dxtianlei/article/details/99299051" target="_blank" rel="noopener">Java继承–父类私有属性和私有方法的继承</a>、<a href="https://www.zhihu.com/question/51920553?utm_id=0" target="_blank" rel="noopener">java中，创建子类对象时，父类对象会也被一起创建么？</a>、<a href="https://developer.aliyun.com/article/1135982" target="_blank" rel="noopener">Java对象内存布局和对象头</a>、<br><a href="https://blog.csdn.net/lkforce/article/details/81128115" target="_blank" rel="noopener">Java的对象头和对象组成详解</a></p><a id="more"></a><p>所以位于堆内存中的对象中的对象头里的Klass word(类元信息，又叫类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例)即该对象的getClass()，当子类对象赋值给父类变量时，只是栈中的赋值，堆对象中的getClass()仍然是子类的class。另外，对象头里的类型指针指向的是位于方法区的类元信息，并不是位于堆中的该java.lang.class的对象。其中类元信息中包含该java.lang.class的引用。（类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在Jvm的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口）</p><p><a href="https://blog.csdn.net/qq_43209615/article/details/123542266" target="_blank" rel="noopener">java对象头的总体结构，MarkWord的结构、MarkWord和锁的关系</a>、<a href="https://zhuanlan.zhihu.com/p/30527228" target="_blank" rel="noopener">Java虚拟机Class对象是在方法区还是堆中</a>、<a href="https://juejin.cn/post/6995361827055992863" target="_blank" rel="noopener">深入理解JVM（六）一一运行时数据区（方法区）</a></p><p><img src="/images/pasted-62.png" alt="upload successful"></p><h3 id="virtual-method-table"><a href="#virtual-method-table" class="headerlink" title="virtual method table"></a>virtual method table</h3><p><a href="https://blog.csdn.net/lnazj/article/details/116752559" target="_blank" rel="noopener">Java 继承底层原理</a>、<a href="https://blog.csdn.net/wzq6578702/article/details/82712667" target="_blank" rel="noopener">jvm原理（34）虚方法表与动态分派机制详解</a></p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>If a subclass has a public property with the same name as a public property in its parent class, the subclass’s property will shadow or hide the parent class’s property. This means that when you access the property from within the subclass using its name (e.g., x), you will be accessing the subclass’s property, not the parent class’s property. However, you can still access the parent class’s property from within the subclass using the super keyword (e.g., super.x).</p><p>The underlying principle behind shadowing is that Java uses the concept of scope to determine which property or variable to access. When you access a property or variable using its name (e.g., x), Java will first look for it in the current scope (i.e., within the current block of code). If it doesn’t find it there, it will look for it in the next outer scope (e.g., within the current method), and so on until it finds it. If there are multiple properties or variables with the same name in different scopes, Java will always choose the one in the innermost scope.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/133312663&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 类继承机制&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/dxtianlei/article/details/99299051&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java继承–父类私有属性和私有方法的继承&lt;/a&gt;、&lt;a href=&quot;https://www.zhihu.com/question/51920553?utm_id=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java中，创建子类对象时，父类对象会也被一起创建么？&lt;/a&gt;、&lt;a href=&quot;https://developer.aliyun.com/article/1135982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java对象内存布局和对象头&lt;/a&gt;、&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/lkforce/article/details/81128115&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java的对象头和对象组成详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>谈谈Java的classpath </title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/03/05/%E8%B0%88%E8%B0%88Java%E7%9A%84classpath/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/03/05/%E8%B0%88%E8%B0%88Java%E7%9A%84classpath/</id>
    <published>2023-03-04T21:44:23.000Z</published>
    <updated>2023-03-04T21:45:26.982Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/LDZZDL/p/9081594.html" target="_blank" rel="noopener">谈谈Java的classpath </a></p><a id="more"></a><p>可打印classpath查看：<br> System.out.println(System.getProperty(“java.class.path”));</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/LDZZDL/p/9081594.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谈谈Java的classpath &lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅析 Java Stream 实现原理</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/26/%E6%B5%85%E6%9E%90-Java-Stream-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/26/%E6%B5%85%E6%9E%90-Java-Stream-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-26T14:27:05.000Z</published>
    <updated>2023-02-26T15:15:00.217Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/CarpenterLee/p/6637118.html" target="_blank" rel="noopener">深入理解Java Stream流水线</a>、<a href="https://zhuanlan.zhihu.com/p/47478339?utm_id=0" target="_blank" rel="noopener">浅析 Java Stream 实现原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/CarpenterLee/p/6637118.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解Java Stream流水线&lt;/a&gt;、&lt;a href=&quot;https://zhua
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java 泛型擦除</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/</id>
    <published>2023-02-24T20:00:28.000Z</published>
    <updated>2023-02-24T20:03:26.985Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/hongdada/p/13993251.html" target="_blank" rel="noopener">Java 泛型擦除 </a></p><p>Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。<br>例如：List<String> 和 List<Integer> 在编译后都变成 List。<br>  <a id="more"></a></Integer></String></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hongdada/p/13993251.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 泛型擦除 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。&lt;br&gt;例如：List&lt;String&gt; 和 List&lt;Integer&gt; 在编译后都变成 List。&lt;br&gt;&lt;/Integer&gt;&lt;/String&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java 内部类与实例化</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/</id>
    <published>2023-02-24T19:55:03.000Z</published>
    <updated>2023-03-06T12:13:35.805Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_47552600/article/details/106888302" target="_blank" rel="noopener">Java内部类基本介绍、如何实例化内部类和如何调用外部类属性和方法</a>、<a href="https://blog.csdn.net/qq_28214047/article/details/53229331" target="_blank" rel="noopener">java内部类的实例化</a>、<a href="https://zhuanlan.zhihu.com/p/61735448" target="_blank" rel="noopener">内部类和静态内部类的区别</a>、<a href="https://blog.csdn.net/naoguoteng/article/details/124177958?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&utm_relevant_index=4" target="_blank" rel="noopener">内部类与外部类之间的访问</a>、<a href="https://blog.csdn.net/cmder1000/article/details/108091460" target="_blank" rel="noopener">Java局部匿名内部类是否会持有外部类的引用？</a></p><p>内部类可以继承其他类，从而实现“多继承”的效果。其中局部内部类访问外部类的局部变量，局部变量必须用final修饰，使之成为常量。</p><a id="more"></a><p>为什么呢? 一说因为局部变量会”copy”给内部类为成员变量，为了前后数据的一致性，二说是局部变量会随着方法的调用完毕而消失，这个时候，局部对象并没有立马从堆内存中消失，还要使用那个变量。为了让数据还能继续被使用，就用final修饰，这样，在堆内存里面存储的其实是一个常量值。(JDK1.8之后，final会默认加上)  <a href="https://juejin.cn/post/7037139668718059534" target="_blank" rel="noopener">匿名内部类访问局部变量为什么要加final修饰（JDK1.7及其之前）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_47552600/article/details/106888302&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java内部类基本介绍、如何实例化内部类和如何调用外部类属性和方法&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/qq_28214047/article/details/53229331&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java内部类的实例化&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61735448&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内部类和静态内部类的区别&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/naoguoteng/article/details/124177958?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&amp;utm_relevant_index=4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内部类与外部类之间的访问&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/cmder1000/article/details/108091460&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java局部匿名内部类是否会持有外部类的引用？
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内部类可以继承其他类，从而实现“多继承”的效果。其中局部内部类访问外部类的局部变量，局部变量必须用final修饰，使之成为常量。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interface.super.method()</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/20/Parentinterface-super-method/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/20/Parentinterface-super-method/</id>
    <published>2023-02-19T16:30:32.000Z</published>
    <updated>2023-02-19T16:41:29.541Z</updated>
    
    <content type="html"><![CDATA[<p>看到类A有个方法，其中有一句 interface.super.method(),interface是该class实现的接口，method是interface的default method。</p><a id="more"></a><p>在java8里，这个用法主要是应对此场景：该类实现了多个接口，每个接口都有default method，并且它们的signature类似，此时该类调用接口的default method时，就要特别指出用的是哪个接口的。</p><p>Consider the example about computer-controlled cars that can now fly. You have two interfaces (OperateCar and FlyCar) that provide default implementations for the same method, (startEngine):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface OperateCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    default public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        &#x2F;&#x2F; Implementation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public interface FlyCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    default public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        &#x2F;&#x2F; Implementation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A class that implements both OperateCar and FlyCar must override the method startEngine. You could invoke any of the of the default implementations with the super keyword.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class FlyingCar implements OperateCar, FlyCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        FlyCar.super.startEngine(key);</span><br><span class="line">        OperateCar.super.startEngine(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The name preceding super (in this example, FlyCar or OperateCar) must refer to a direct superinterface that defines or inherits a default for the invoked method. This form of method invocation is not restricted to differentiating between multiple implemented interfaces that contain default methods with the same signature. You can use the super keyword to invoke a default method in both classes and interfaces.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到类A有个方法，其中有一句 interface.super.method(),interface是该class实现的接口，method是interface的default method。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringMVC工作原理</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/SpringMVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/SpringMVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-19T11:10:14.000Z</published>
    <updated>2023-02-19T11:13:18.761Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7139807630024769549" target="_blank" rel="noopener">深入理解SpringMVC工作原理</a></p><a id="more"></a><p><img src="/images/pasted-61.png" alt="upload successful"></p><blockquote><ul><li>用户发送请求至会先进入DispatcherServlet控制器进行相应处理。</li><li>DispatcherServlet会调用HandlerMapping根据请求路径查找Handler。</li><li>处理器映射器找到具体的处理器后，生成Handler对象及Handler拦截器（如果有则生成），然后返回给DispatcherServlet。</li><li>DispatcherServlet紧接着会调用HandlerAdapter，准备执行Handler。</li><li>HandlerAdapter底层会利用反射机制，对前面生成的Handler对象进行执行。</li><li>执行完对应的Java方法后，HandlerAdapter会得到一个ModelAndView对象。</li><li>HandlerAdapter将ModelAndView再返回给DispatcherServlet控制器。</li><li>DisPatcherServlet再调用ViewReslover，并将ModelAndView传递给它。</li><li>ViewReslover视图解析器开始解析ModelAndView并返回解析出的View视图。</li><li>解析出View视图后，对视图进行数据渲染（即将模型数据填充至视图中）。</li><li>DispatcherServlet最终将渲染好的View视图响应给用户浏览器。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7139807630024769549&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解SpringMVC工作原理&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu miss Settings</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/ubuntu-miss-Setting/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/ubuntu-miss-Setting/</id>
    <published>2023-02-19T05:10:08.000Z</published>
    <updated>2023-02-19T05:12:31.282Z</updated>
    
    <content type="html"><![CDATA[<p>清理磁盘空间，删了一大堆有的没的，不知道误删了哪块儿，系统的Settings没了,重新安装gnome-control-center即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall gnome-control-center</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;清理磁盘空间，删了一大堆有的没的，不知道误删了哪块儿，系统的Settings没了,重新安装gnome-control-center即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webflux mysql</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/webflux-mysql/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/webflux-mysql/</id>
    <published>2023-02-18T19:39:53.000Z</published>
    <updated>2023-02-18T19:46:56.972Z</updated>
    
    <content type="html"><![CDATA[<p>在熟悉webflux，看看跟vertx的区别，配置数据库的时候，发现项目跑不起来</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">R2DBC connection pooling configuration should be provided by either the spring.r2dbc.pool.* properties or the spring.r2dbc.url property but both have been used.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your configuration so that R2DBC connection pooling is configured using either the spring.r2dbc.url property or the spring.r2dbc.pool.* properties</span><br></pre></td></tr></table></figure><p>application.properties如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8088</span><br><span class="line"></span><br><span class="line">#USE MYSQL</span><br><span class="line">spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dev?useSSL&#x3D;false</span><br><span class="line">spring.r2dbc.username&#x3D;root</span><br><span class="line">spring.r2dbc.password&#x3D;12345678</span><br><span class="line">spring.r2dbc.pool.enabled&#x3D;true</span><br><span class="line">spring.r2dbc.pool.initial-size&#x3D;5</span><br><span class="line">spring.r2dbc.pool.max-size&#x3D;20</span><br><span class="line">spring.r2dbc.pool.max-idle-time&#x3D;30m</span><br><span class="line">spring.r2dbc.pool.validation-query&#x3D;SELECT 1</span><br><span class="line"></span><br><span class="line">#logging.level.org.springframework.data.r2dbc&#x3D;DEBUG</span><br><span class="line">logging.level.org.springframework&#x3D;DEBUG</span><br></pre></td></tr></table></figure><p>后面发现把spring.r2dbc.pool…注释掉就跑起来了，原来是spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dev?useSSL&#x3D;false中已经有了pool的配置，把url里的pool去掉，下面pool的配置不动就可以了，记录一下这个错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在熟悉webflux，看看跟vertx的区别，配置数据库的时候，发现项目跑不起来&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu20.04 mysql change data directory</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/18/ubuntu20-04-install-mysql-and-change-data-dir/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/18/ubuntu20-04-install-mysql-and-change-data-dir/</id>
    <published>2023-02-18T13:09:32.000Z</published>
    <updated>2023-02-18T14:03:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>安装mysql，主要是修改data directory。</p><a id="more"></a><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><h3 id="change-data-directory"><a href="#change-data-directory" class="headerlink" title="change data directory"></a>change data directory</h3><h4 id="Moving-the-MySQL-Data-Directory"><a href="#Moving-the-MySQL-Data-Directory" class="headerlink" title="Moving the MySQL Data Directory"></a>Moving the MySQL Data Directory</h4><p>First, shut down mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><p>Now that the server is shut down, you can copy the existing database directory, &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;, to the new location, &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data, with rsync. Using the -a flag preserves the permissions and other directory properties, while-v provides verbose output so you can follow the progress:</p><blockquote><p>Note: Be sure there is a trailing slash on the directory, which may be added if you use  tab completion. When there’s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -av &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data</span><br></pre></td></tr></table></figure><p>Once the rsync command is complete, rename the current folder with a .bak extension and keep it until you’ve confirmed the move was successful. By renaming it, you’ll avoid confusion that could arise from files in both the new and the old location:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;mysql &#x2F;var&#x2F;lib&#x2F;mysql.bak</span><br></pre></td></tr></table></figure><p>Now you’re ready to proceed with the next step and begin configuration.</p><h4 id="Pointing-to-the-New-Data-Location"><a href="#Pointing-to-the-New-Data-Location" class="headerlink" title="Pointing to the New Data Location"></a>Pointing to the New Data Location</h4><p>MySQL has several ways to override configuration values. By default, the datadir is set to <em>&#x2F;var&#x2F;lib&#x2F;mysql</em> in the <em>&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</em> file. Edit this file in your preferred text editor to reflect the new data directory. Here we’ll use vim:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>Find the line that begins with datadir&#x3D;. Uncomment the line by deleting the pound sign (#) and change the path to reflect the new location. In this case, the updated file(&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf) contents will be as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datadir &#x3D; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data</span><br></pre></td></tr></table></figure><p>Once you’ve made this update, save and exit the file.  Now it’s almost time to bring up MySQL again, but before that, there’s one more thing to configure in order to be successful.</p><h4 id="Configuring-AppArmor-Access-Control-Rules"><a href="#Configuring-AppArmor-Access-Control-Rules" class="headerlink" title="Configuring AppArmor Access Control Rules"></a>Configuring AppArmor Access Control Rules</h4><p>In this step, you need to tell AppArmor to let MySQL write to the new directory by creating an alias between the default directory and the new location. AppArmor is a security module in the Linux kernel that allows system administrators to restrict program capabilities through program profiles, rather than users themselves. Start by opening up and editing the AppArmor alias file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;apparmor.d&#x2F;tunables&#x2F;alias</span><br></pre></td></tr></table></figure><p>At the bottom of the file, uncomment the following line and add the alias rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; -&gt; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data&#x2F;,</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note: Don’t miss the last comma(,)</strong></p></blockquote><p>When you’re finished, save and exit the file.</p><p>For the changes to take effect, restart AppArmor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apparmor</span><br></pre></td></tr></table></figure><blockquote><p>Note: If you skipped the AppArmor configuration step, you will receive the following error message:</p><blockquote><p>Output<br>Job for mysql.service failed because the control process<br>exited with error code. See “systemctl status mysql.service”<br>and “journalctl -xe” for details.</p></blockquote><p>Since this message doesn’t make an explicit connection between AppArmor and the data directory, this error can take some time to figure out.</p></blockquote><p>Once you’ve properly configured AppArmor, you can move on to the next step.</p><h4 id="Restarting-MySQL"><a href="#Restarting-MySQL" class="headerlink" title="Restarting MySQL"></a>Restarting MySQL</h4><p>由于我的ubuntu安装的是mysql8.0.32，脚本跟下面的并不一致(没用写死&#x2F;var&#x2F;lib&#x2F;mysql的方式判断是否data dir存在)，也就没有碰到下面的错误，直接就重启了，下面脚本的部分仅供参考。</p><p>Now it’s time to start MySQL. If you do, however, you’ll run into another error. Instead of an AppArmor issue, this error is caused by mysql-systemd-start, a script that supports managing MySQL through systemd. You can inspect this script with the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start</span><br></pre></td></tr></table></figure><p>This script checks for the existence of either a directory, -d, or a symbolic link, -L, that matches the default data directory path. If it doesn’t find either of these, the script(&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start) will trigger an error and prevent MySQL from starting:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -d &#x2F;var&#x2F;lib&#x2F;mysql ] &amp;&amp; [ ! -L &#x2F;var&#x2F;lib&#x2F;mysql ]; then</span><br><span class="line"> echo &quot;MySQL data dir not found at &#x2F;var&#x2F;lib&#x2F;mysql. Please create one.&quot;</span><br><span class="line"> exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -d &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql ] &amp;&amp; [ ! -L &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql ]; then</span><br><span class="line"> echo &quot;MySQL system database not found. Please run mysql_install_db tool.&quot;</span><br><span class="line"> exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>After you’ve inspected this file, close it without making any changes.</p><p>Since you need either an appropriate directory or symbolic link to start the server, you must create the minimal directory structure to pass the script’s environment check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql -p</span><br></pre></td></tr></table></figure><p>Now you’re ready to start MySQL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p>Confirm MySQL is running by checking the status:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><blockquote><p>Output<br>● mysql.service - MySQL Community Server<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset:&gt;<br>     Active: active (running) since Wed 2022-03-23 20:51:18 UTC; 4s ago<br>    Process: 17145 ExecStartPre&#x3D;&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start pre (code&#x3D;&gt;<br>   Main PID: 17162 (mysqld)<br>     Status: “Server is operational”<br>      Tasks: 38 (limit: 1132)<br>     Memory: 376.7M<br>     CGroup: &#x2F;system.slice&#x2F;mysql.service<br>             └─17162 &#x2F;usr&#x2F;sbin&#x2F;mysqld</p></blockquote><p>To ensure that the new data directory is indeed in use, start the MySQL monitor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u sammy -p</span><br></pre></td></tr></table></figure><p>Now query for the value of the data directory again:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@datadir;</span><br><span class="line">Output</span><br><span class="line">+----------------------------+</span><br><span class="line">| @@datadir                  |</span><br><span class="line">+----------------------------+</span><br><span class="line">| &#x2F;mnt&#x2F;volume-nyc1-01&#x2F;mysql&#x2F; |</span><br><span class="line">+----------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>After you’ve restarted MySQL and confirmed that it’s using the new location, take the opportunity to ensure that your database is fully functional. Once you’ve finished, exit the database as in the following and return to the command prompt:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>Now that you’ve verified the integrity of any existing data, you can remove the backup data directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -Rf &#x2F;var&#x2F;lib&#x2F;mysql.bak</span><br></pre></td></tr></table></figure><p>Then restart MySQL one final time:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>And finally, confirm it’s working as expected by checking the status:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><blockquote><p>Output<br>● mysql.service - MySQL Community Server<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset:&gt;<br>     Active: active (running) since Wed 2022-03-23 20:53:03 UTC; 4s ago<br>    Process: 17215 ExecStartPre&#x3D;&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start pre (code&#x3D;&gt;<br>   Main PID: 17234 (mysqld)<br>     Status: “Server is operational”<br>      Tasks: 38 (limit: 1132)<br>     Memory: 368.9M<br>     CGroup: &#x2F;system.slice&#x2F;mysql.service<br>             └─17234 &#x2F;usr&#x2F;sbin&#x2F;mysqld</p></blockquote><p>If the Active line states active(running) this confirms that MySQL is working.</p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p><a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-20-04" target="_blank" rel="noopener">原文链接</a></p><p>In this tutorial, you learned how to move MySQL’s data directory to a new location and update Ubuntu’s AppArmor access control lists to accommodate the adjustment. Although we were using a block storage device, the instructions here should be suitable for redefining the location of the data directory regardless of the underlying technology.</p><p>For more information on managing MySQL’s data directories, check out the following sections in the official MySQL documentation:</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/data-directory.html" target="_blank" rel="noopener">The MySQL Data Directory</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/multiple-data-directories.html" target="_blank" rel="noopener">Setting Up Multiple Data Directories</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装mysql，主要是修改data directory。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SQL语句的执行顺序</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/12/07/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/12/07/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-12-07T15:31:52.000Z</published>
    <updated>2022-12-07T19:50:42.482Z</updated>
    
    <content type="html"><![CDATA[<p>Logical Query Processing Phases in Brief—《Microsoft SQL Server 2008技术内幕T-SQL语言基础.pdf》p27</p><a id="more"></a><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>  The FROM phase identifi es the query’s source tables and processes table operators. Each table operator applies a series of subphases. For example, the phases involved in a join are (1-J1) Cartesian Product, (1-J2) ON Filter, (1-J3) Add Outer Rows. The FROM phase generates virtual table VT1. </p><h4 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a><em>Cartesian Product</em></h4><p>This phase performs a Cartesian product (cross join) between the two tables involved in the table operator, generating VT1-J1. </p><h4 id="ON-Filter"><a href="#ON-Filter" class="headerlink" title="ON Filter"></a><em>ON Filter</em></h4><p>This phase fi lters the rows from VT1-J1 based on the predicate that appears in the ON clause (<on_predicate>). Only rows for which the predicate evaluates to TRUE are inserted into VT1-J2.</on_predicate></p><h4 id="Add-Outer-Rows"><a href="#Add-Outer-Rows" class="headerlink" title="Add Outer Rows"></a><em>Add Outer Rows</em></h4><p>If OUTER JOIN is specifi ed (as opposed to CROSS JOIN or INNER JOIN), rows from the preserved table or tables for which a match was not found are added to the rows from VT1-J2 as outer rows, generating VT1-J3.</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><p>This phase fi lters the rows from VT1 based on the predicate that appears in the WHERE clause (<where_predicate>). Only rows for which the predicate evaluates to TRUE are inserted into VT2. </where_predicate></p><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><p>This phase arranges the rows from VT2 in groups based on the column list specifi ed in the GROUP BY clause, generating VT3. Ultimately, there will be one result row per group. </p><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>This phase fi lters the groups from VT3 based on the predicate that appears in the HAVING clause (<having_predicate>). Only groups for which the predicate evaluates to TRUE are inserted into VT4. </having_predicate></p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p>This phase processes the elements in the SELECT clause, generating VT5. </p><h4 id="Evaluate-Expressions"><a href="#Evaluate-Expressions" class="headerlink" title="Evaluate Expressions"></a><em>Evaluate Expressions</em></h4><p>This phase evaluates the expressions in the SELECT list, generating VT5-1. </p><h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a><em>DISTINCT</em></h4><p>This phase removes duplicate rows from VT5-1, generating VT5-2. </p><h4 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a><em>TOP</em></h4><p>This phase fi lters the specifi ed top number or percentage of rows from VT5-2 based on the logical ordering defi ned by the ORDER BY clause, generating the table VT5-3. </p><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><p>This phase sorts the rows from VT5-3 according to the column list specifi ed in the ORDER BY clause, generating the cursor VC6.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logical Query Processing Phases in Brief—《Microsoft SQL Server 2008技术内幕T-SQL语言基础.pdf》p27&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>centos 命令补全失效(硬盘满了)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/12/04/centos-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8%E5%A4%B1%E6%95%88-%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/12/04/centos-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8%E5%A4%B1%E6%95%88-%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86/</id>
    <published>2022-12-04T14:37:32.000Z</published>
    <updated>2022-12-04T19:08:13.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tab补全失效"><a href="#Tab补全失效" class="headerlink" title="Tab补全失效"></a>Tab补全失效</h3><p>登录服务器，cd 相应路径按Tab补全时，提示*-bash: cannot create temp file for here-document: No space left on device*。</p><a id="more"></a><p>如图所示：<br><img src="/images/pasted-52.png" alt="upload successful"><br>谷歌查询是硬盘满了。df命令查看，果然如此：</p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>然后用du命令查看可以目录</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>发现可以目录&#x2F;var &#x2F;app &#x2F;sftproot,继续用du命令挨个查看，最后发现&#x2F;var&#x2F;log目录占用12G</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>进入log继续du加sort排序查看(ll -h也可)</p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>就是这几个messages文件占了10多G，且都是最近产生的，随便打开进去一看都是如下内容：</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><p>是crond产生的垃圾日志，不管它，先来个重启大法<em>service crond stop</em>、<em>service crond start</em>，再瞧问题依旧。谷歌之，<em>No configuration file found at &#x2F;root&#x2F;.esmtprc or &#x2F;etc&#x2F;esmtprc</em>,没找到问题原因，只看到个解决方法 <a href="https://www.axinblog.com/2022/02/16/Linux-%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/" target="_blank" rel="noopener">Linux 日志清理</a>，先暂且安装重启crond，记下来以观后效，明天再查…</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tab补全失效&quot;&gt;&lt;a href=&quot;#Tab补全失效&quot; class=&quot;headerlink&quot; title=&quot;Tab补全失效&quot;&gt;&lt;/a&gt;Tab补全失效&lt;/h3&gt;&lt;p&gt;登录服务器，cd 相应路径按Tab补全时，提示*-bash: cannot create temp file for here-document: No space left on device*。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java内存使用情况查看工具(jmap,jinfo,jstack...)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/07/02/Java%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/07/02/Java%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/</id>
    <published>2022-07-02T10:43:19.000Z</published>
    <updated>2022-12-04T19:29:57.085Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/hellozhxy/article/details/80496550" target="_blank" rel="noopener">Java内存使用情况查看工具</a>、或者直接采用阿里的开源工具<a href="https://developer.aliyun.com/article/764933" target="_blank" rel="noopener">Java 线上问题排查神器 Arthas 快速上手与原理浅谈</a>&amp;&amp;<a href="https://cloud.tencent.com/developer/article/1534894" target="_blank" rel="noopener">Arthas - Java 线上问题定位处理的终极利器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hellozhxy/article/details/80496550&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java内存使用情况查看工具&lt;/a&gt;、或者直接采用阿里的开源工具&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6中js的运算符（?.、?:、? ?、? ?=、）</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/06/25/ES6%E4%B8%ADjs%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%E3%80%81-%E3%80%81-%E3%80%81-%E3%80%81%EF%BC%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/06/25/ES6%E4%B8%ADjs%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%E3%80%81-%E3%80%81-%E3%80%81-%E3%80%81%EF%BC%89/</id>
    <published>2022-06-25T07:50:33.000Z</published>
    <updated>2022-07-15T20:58:25.094Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ShIcily/article/details/121673976" target="_blank" rel="noopener">ES6中js的运算符（?.、?:、? ?、? ?&#x3D;、）</a>、<a href="https://blog.csdn.net/sinat_36146776/article/details/112170829" target="_blank" rel="noopener">JavaScript表达式和运算符之：逻辑或赋值（||&#x3D; ），逻辑空赋值（??&#x3D;） ，逻辑与赋值（&amp;&amp;&#x3D;），空值合并操作符（??），可选链式操作符（?.）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ShIcily/article/details/121673976&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ES6中js的运算符（?.、?:、? ?、? ?&amp;#x3D;、）&lt;/a&gt;、&lt;a 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
