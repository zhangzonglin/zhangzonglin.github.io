<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2021-11-15T13:12:15.065Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Filter和Interceptor的比较</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2021-11-15T12:58:00.000Z</published>
    <updated>2021-11-15T13:12:15.065Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/5f5e5211bbdb" target="_blank" rel="noopener">Filter和Interceptor的比较</a>, &nbsp;&nbsp;&nbsp;<a href="https://www.cnblogs.com/hellovoyager1/p/9152292.html" target="_blank" rel="noopener">Listener、Filter 和Interceptor 总结</a>, &nbsp;&nbsp;<a href="https://www.cnblogs.com/hhhshct/p/8808115.html" target="_blank" rel="noopener">springboot配置监听器、过滤器和拦截器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/5f5e5211bbdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filter和Interceptor的比较&lt;/a&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="spring" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/"/>
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/java/"/>
    
    
      <category term="interceptor" scheme="http://blog.zhangzonglinagain.xyz/tags/interceptor/"/>
    
      <category term="filter" scheme="http://blog.zhangzonglinagain.xyz/tags/filter/"/>
    
      <category term="listener" scheme="http://blog.zhangzonglinagain.xyz/tags/listener/"/>
    
  </entry>
  
  <entry>
    <title> ThreadLocal 详解</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-13T03:57:48.000Z</published>
    <updated>2021-11-13T04:02:29.178Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html" target="_blank" rel="noopener">ThreadLocal原理</a>  ,&nbsp;&nbsp;&nbsp; <a href="https://juejin.cn/post/6844903487193481224" target="_blank" rel="noopener">Java 之 ThreadLocal 详解: 内存泄漏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadLocal原理&lt;/a&gt;  ,&amp;nbsp;&amp;n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>@interface 简介</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/11/interface/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/11/interface/</id>
    <published>2021-11-11T13:28:27.000Z</published>
    <updated>2021-11-11T13:29:41.370Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zhangbeizhen18/article/details/87885441/" target="_blank" rel="noopener">自定义注释@interface的用法理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhangbeizhen18/article/details/87885441/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义注释@interface的用法理解&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node升级提示(sudo: npm: command not found)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/</id>
    <published>2021-08-12T13:40:51.000Z</published>
    <updated>2021-08-12T14:42:57.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：<em>sudo npm install n -g</em>，结果提示：<em>sudo : npm :command not found</em>。</p><a id="more"></a><h3 id="node、npm升级"><a href="#node、npm升级" class="headerlink" title="node、npm升级"></a>node、npm升级</h3><p>正常情况下，先安装工具<em>n</em>，然后通过它升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line"></span><br><span class="line">sudo n stable  # 安装最新版本</span><br></pre></td></tr></table></figure><p>但出现了前言里的错误，不加sudo，权限不够，加了又无法识别命令。</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这是什么原因呢？<br>输入<em>which npm*可以得到</em>/home/zzl/.nvm/versions/node/v12.21.0/bin/npm*，这个是普通用户的目录。<br>而sudo执行的是/usr/bin目录，这是root用户的目录,<br>所以使用sudo命令是识别不到这个命令的，我们可以使用软链接来处理这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node</span><br><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;bin&#x2F;npm</span><br></pre></td></tr></table></figure><p>将上面左边的命令位置，替换用which npm查询出来的就行了。</p><p><strong>当然我用了which node之后就意识到我以前是用的nvm管理node的版本，差点儿就用n在另外的位置重新下了个版本，而且还发现以前用apt-get下了个更早的版本，每个工具下载的位置都不同，混乱不堪，统统删了，以后只用nvm管理node版本！教训啊～</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：&lt;em&gt;sudo npm install n -g&lt;/em&gt;，结果提示：&lt;em&gt;sudo : npm :command not found&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>H5页面在微信浏览器中通过网页授权获取用户信息(openid、昵称、头像等)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/</id>
    <published>2021-08-10T18:22:00.000Z</published>
    <updated>2021-08-11T08:38:33.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>公众号准备：生产环境的微信公众号，需要按照官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）设置。开发环境可以前往<strong><a href="https://link.segmentfault.com/?url=https%3A%2F%2Fmp.weixin.qq.com%2Fdebug%2Fcgi-bin%2Fsandbox%3Ft%3Dsandbox%2Flogin" target="_blank" rel="noopener">微信公众平台</a></strong>申请测试号。</p><p>注意：正式的公众号不需要关注，也可以通过网页授权获取用户信息，而测试号必须要关注！</p><h3 id="微信授权流程"><a href="#微信授权流程" class="headerlink" title="微信授权流程"></a>微信授权流程</h3><p>详细流程见官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）。</p><p>具体而言，网页授权流程分为四步：</p><ol><li><p>引导用户进入授权页面同意授权，获取code</p></li><li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p></li><li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p></li><li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p></li></ol><p>时序图如下：</p><p><img src="/images/pasted-47.png" alt="upload successful"></p><h3 id="授权code的获取"><a href="#授权code的获取" class="headerlink" title="授权code的获取"></a>授权code的获取</h3><p>以上是大概流程，这里主要分析用户统一授权后，获取code的两个路径：前端截取及后端获取。</p><p>原理是：获取用户授权需要按照微信规定拼装链接，让用户点击访问，其中拼接的链接中有个redirect_uri参数(授权后重定向的回调链接地址)，微信服务器处理后会将redirect_uri拼接code等参数，浏览器会重定向该地址，也就形成了两个获取code的方法，前端在url截取code,后端也可以通过浏览器访问此链接获取code参数。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line">const url &#x3D; &#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br></pre></td></tr></table></figure><h4 id="前端获取"><a href="#前端获取" class="headerlink" title="前端获取"></a>前端获取</h4><p>如果不是每次进入页面都要从微信获取code码时（用户信息），建议在前端获取，需要时才改变浏览器链接让用户访问链接获取授权，把code码传给后端获取用户信息。</p><p>也可以参看此代码：<strong><a href="https://www.cnblogs.com/congfeicong/p/11125575.html" target="_blank" rel="noopener">H5页面获取微信公众号的openid</a></strong>，或者如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line"></span><br><span class="line">const url&#x3D;&#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br><span class="line"></span><br><span class="line">const querystring &#x3D; getQueryString()</span><br><span class="line">let code &#x3D; querystring.code;</span><br><span class="line"></span><br><span class="line">if(!code)&#123;</span><br><span class="line">    location.href &#x3D; url;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    https.get(&#39;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;auth&#39;,&#123;code&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getQueryString() &#123;</span><br><span class="line">    const url &#x3D; location.search;</span><br><span class="line">    const rs &#x3D; &#123;&#125;</span><br><span class="line">    if(url.indexOf(&#39;?&#39;) &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">        const querystring &#x3D; url.substr(1);</span><br><span class="line">        const kvArr &#x3D; querystring.split(&#39;&amp;&#39;);</span><br><span class="line">        kvArr.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">            const temp &#x3D; item.split(&#39;&#x3D;&#39;)</span><br><span class="line">            const key &#x3D; temp[0];</span><br><span class="line">            const val &#x3D; temp[1];</span><br><span class="line">            rs[key] &#x3D; val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return rs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端获取"><a href="#后端获取" class="headerlink" title="后端获取"></a>后端获取</h4><p>如果每次都要获取code码，就让用户只要进入页面就访问接口链接，但这时的redirectUri要配置成后端接口的链接，也就是说微信会带着code码访问后端接口，后端直接获取code码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;后端使用koa2</span><br><span class="line">&#x2F;&#x2F;Superagent时一个后端的http请求中间件</span><br><span class="line">router.get(&#39;&#x2F;auth&#39;, async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    code &#x3D; ctx.querystring.split(&#39;&amp;&#39;)[0].split(&#39;&#x3D;&#39;)[1];</span><br><span class="line">    &#x2F;&#x2F; 使用code获取openid和access_token </span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;oauth2&#x2F;access_token?appid&#x3D;$&#123;appid&#125;&amp;secret&#x3D;$&#123;appsecret&#125;&amp;code&#x3D;$&#123;code&#125;&amp;grant_type&#x3D;authorization_code&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            let result &#x3D; JSON.parse(res.text)</span><br><span class="line">            access_token &#x3D; result.access_token</span><br><span class="line">            openid &#x3D; result.openid</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用ACCESS_TOKEN和openid获取userinfo</span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;userinfo?access_token&#x3D;$&#123;access_token&#125;&amp;openid&#x3D;$&#123;openid&#125;&amp;lang&#x3D;zh_CN&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F;userinfo返回给前端</span><br><span class="line">            userinfo &#x3D; JSON.parse(res.text)</span><br><span class="line">            ctx.body &#x3D; res.text</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.zhangzonglinagain.xyz/categories/Vue/"/>
    
    
      <category term="微信公众号" scheme="http://blog.zhangzonglinagain.xyz/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/</id>
    <published>2021-05-31T07:32:08.000Z</published>
    <updated>2021-05-31T07:32:59.094Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://cloud.tencent.com/developer/article/1626729" target="_blank" rel="noopener">Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1626729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vertx-plugin build vertx app with gradle</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/</id>
    <published>2021-05-05T17:42:00.000Z</published>
    <updated>2021-05-05T18:06:04.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://plugins.gradle.org/plugin/io.vertx.vertx-plugin" target="_blank" rel="noopener">io.vertx.vertx-plugin</a> 介绍，gradle 添加vertx-plugin，脚本启动vertx application.</p><a id="more"></a><ol><li>build.gradle</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;io.vertx.vertx-plugin&#39; version &#39;1.2.0&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &#39;org.example&#39;</span><br><span class="line">version &#39;1.0-SNAPSHOT&#39;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">![upload successful](&#x2F;images&#x2F;pasted-45.png)</span><br><span class="line">    testImplementation &#39;org.junit.jupiter:junit-jupiter-api:5.6.0&#39;</span><br><span class="line">    testRuntimeOnly &#39;org.junit.jupiter:junit-jupiter-engine&#39;</span><br><span class="line">    compile &quot;io.vertx:vertx-core:4.0.3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vertx &#123;</span><br><span class="line">  mainVerticle &#x3D; &quot;MainVerticle&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>idea Run/Debug configurations</li></ol><p><img src="/images/pasted-46.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/io.vertx.vertx-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;io.vertx.vertx-plugin&lt;/a&gt; 介绍，gradle 添加vertx-plugin，脚本启动vertx application.&lt;/p&gt;
    
    </summary>
    
    
      <category term="vertx" scheme="http://blog.zhangzonglinagain.xyz/categories/vertx/"/>
    
    
      <category term="vertx-plugin" scheme="http://blog.zhangzonglinagain.xyz/tags/vertx-plugin/"/>
    
  </entry>
  
  <entry>
    <title>websocket data transfer </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/</id>
    <published>2021-05-05T10:08:00.000Z</published>
    <updated>2021-05-05T10:09:28.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><a id="more"></a><h3 id="Receiving-Text-and-Binary-Data"><a href="#Receiving-Text-and-Binary-Data" class="headerlink" title="Receiving Text and Binary Data"></a>Receiving Text and Binary Data</h3><p><strong>参考：<a href="https://www.oreilly.com/library/view/high-performance-browser/9781449344757/ch17.html" target="_blank" rel="noopener">websocket receiving Text and Binary Data</a></strong></p><p>WebSocket communication consists of messages and application code and does not need to worry about buffering, parsing, and reconstructing received data. For example, if the server sends a 1 MB payload, the application’s onmessage callback will be called only when the entire message is available on the client.</p><p>Further, the WebSocket protocol makes no assumptions and places no constraints on the application payload: both text and binary data are fair game. Internally, the protocol tracks only two pieces of information about the message: the length of payload as a variable-length field and the type of payload to distinguish UTF-8 from binary transfers.</p><p>When a new message is received by the browser, it is automatically converted to a DOMString object for text-based data, or a Blob object for binary data, and then passed directly to the application. The only other option, which acts as performance hint and optimization for the client, is to tell the browser to convert the received binary data to an ArrayBuffer instead of Blob:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var ws &#x3D; new WebSocket(&#39;wss:&#x2F;&#x2F;example.com&#x2F;socket&#39;);</span><br><span class="line">ws.binaryType &#x3D; &quot;arraybuffer&quot;; 1</span><br><span class="line"></span><br><span class="line">ws.onmessage &#x3D; function(msg) &#123;</span><br><span class="line">  if(msg.data instanceof ArrayBuffer) &#123;</span><br><span class="line">    processArrayBuffer(msg.data);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    processText(msg.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Data-transfer"><a href="#Data-transfer" class="headerlink" title="Data transfer"></a>Data transfer</h3><p><strong>参考：<a href="https://javascript.info/websocket#data-transfer" target="_blank" rel="noopener">websocket data transfer</a></strong></p><p>WebSocket communication consists of “frames” – data fragments, that can be sent from either side, and can be of several kinds:</p><ul><li>“text frames” – contain text data that parties send to each other.</li><li>“binary data frames” – contain binary data that parties send to each other.</li><li>“ping/pong frames” are used to check the connection, sent from the server, the browser responds to these automatically.</li><li>there’s also “connection close frame” and a few other service frames.<br>In the browser, we directly work only with text or binary frames.</li></ul><p><em>WebSocket .send()</em> method can send either text or binary data.</p><p>A call <em>socket.send(body)</em> allows body in string or a binary format, including Blob, ArrayBuffer, etc. No settings required: just send it out in any format.</p><p>When we receive the data, text always comes as string. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><p>That’s set by <em>socket.binaryType</em> property, it’s “blob” by default, so binary data comes as Blob objects.</p><p>Blob is a high-level binary object, it directly integrates with <a>, <img> and other tags, so that’s a sane default. But for binary processing, to access individual data bytes, we can change it to “arraybuffer”:</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  ws.binaryType &#x3D; &quot;arraybuffer&quot;;</span><br><span class="line">  ws.onmessage &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; event.data is either a string (if text) or arraybuffer (if binary)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.&lt;/p&gt;
    
    </summary>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/categories/websocket/"/>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>ProcessExecutor、ProcessBuilder、Runtime.getRuntime().exec(...) </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/</id>
    <published>2021-05-02T05:55:00.000Z</published>
    <updated>2021-05-02T06:47:59.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。</p><a id="more"></a><h3 id="Runtime-amp-ProcessBuilder"><a href="#Runtime-amp-ProcessBuilder" class="headerlink" title="Runtime&amp;ProcessBuilder"></a>Runtime&amp;ProcessBuilder</h3><p><em>Runtime.getInstance().exec (String cmd)</em>和<em>new ProcessBuilder(String cmd).start()</em>都可以产生子进程对象Process。通过调用Process对象的waitFor()方法可以使主进程进入等待状态，直至子进程执行完毕，再进行下一步工作。如果对子进程处理不当，有可能造成主进程阻塞，整个程序死掉。(A program is executed with command(). With waitFor() we can wait for the process to finish.)<br><strong>通过查看JDK源码可知，Runtime.exec最终是通过调用ProcessBuilder来真正执行操作的</strong>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Process exec(String command) throws IOException &#123;</span><br><span class="line">    return exec(command, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String command, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    if (command.length() &#x3D;&#x3D; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Empty command&quot;);</span><br><span class="line"></span><br><span class="line">    StringTokenizer st &#x3D; new StringTokenizer(command);</span><br><span class="line">    String[] cmdarray &#x3D; new String[st.countTokens()];</span><br><span class="line">    for (int i &#x3D; 0; st.hasMoreTokens(); i++)</span><br><span class="line">        cmdarray[i] &#x3D; st.nextToken();</span><br><span class="line">    return exec(cmdarray, envp, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String[] cmdarray, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    return new ProcessBuilder(cmdarray)</span><br><span class="line">        .environment(envp)</span><br><span class="line">        .directory(dir)</span><br><span class="line">        .start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessExecutor-amp-ProcessBuilder"><a href="#ProcessExecutor-amp-ProcessBuilder" class="headerlink" title="ProcessExecutor&amp;ProcessBuilder"></a>ProcessExecutor&amp;ProcessBuilder</h3><p>ProcessExecutor is implemented as a wrapper of <em>ProcessBuilder</em> complementing it with additional features.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ProcessExecutor &#123;</span><br><span class="line"></span><br><span class="line">  private static final Logger log &#x3D; LoggerFactory.getLogger(ProcessExecutor.class);</span><br><span class="line"></span><br><span class="line">  private static final boolean IS_OS_WINDOWS &#x3D; System.getProperty(&quot;os.name&quot;).startsWith(&quot;Windows&quot;);</span><br><span class="line"></span><br><span class="line">  public static final Integer[] DEFAULT_EXIT_VALUES &#x3D; null;</span><br><span class="line"></span><br><span class="line">  private static final Integer NORMAL_EXIT_VALUE &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  public static final boolean DEFAULT_REDIRECT_ERROR_STREAM &#x3D; true;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Process builder used by this executor.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final ProcessBuilder builder &#x3D; new ProcessBuilder();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Environment variables which are added (removed in case of &lt;code&gt;null&lt;&#x2F;code&gt; values) to the process being started.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final Map&lt;String, String&gt; environment &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Set of accepted exit codes or &lt;code&gt;null&lt;&#x2F;code&gt; if all exit codes are allowed.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private Set&lt;Integer&gt; allowedExitValues;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ProcessExecutor在后台运行进程（不阻塞当前代码对执行）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runInBackground() throws IOException, InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    List&lt;Future&lt;ProcessResult&gt;&gt; tasks &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">        Future&lt;ProcessResult&gt; future &#x3D; new ProcessExecutor().command(&quot;java&quot;, &quot;-version&quot;)</span><br><span class="line">                .start().getFuture();</span><br><span class="line">        tasks.add(future);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Future&lt;ProcessResult&gt; future : tasks) &#123;</span><br><span class="line">        ProcessResult processResult &#x3D; future.get(1, TimeUnit.SECONDS);</span><br><span class="line">        int exitValue &#x3D; processResult.getExitValue();</span><br><span class="line">        log.info(&quot;The exit value of the finished process is &#123;&#125;&quot;, exitValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<strong><a href="https://github.com/zeroturnaround/zt-exec" target="_blank" rel="noopener">GitHub: ZT Process Executor</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu apt-get autoclean,clean,autoremove</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/29/Ubuntu-apt-get-autoclean-clean-autoremove/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/29/Ubuntu-apt-get-autoclean-clean-autoremove/</id>
    <published>2021-04-29T11:50:00.000Z</published>
    <updated>2021-04-29T12:03:21.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ubuntu移除安装包时用到的几个命令：autoclean,clean,autoremove</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoclean:</span><br></pre></td></tr></table></figure><blockquote><p>如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的.deb安装文件从硬盘中删<br>除掉。如果你仍然需要硬盘空间的话，可以试试apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get clean:</span><br></pre></td></tr></table></figure><blockquote><p>类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoremove:</span><br></pre></td></tr></table></figure><blockquote><p>删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。</p></blockquote><p>其它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove 软件包名称：</span><br></pre></td></tr></table></figure><blockquote><p>删除已安装的软件包（保留配置文件）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get --purge remove 软件包名称：</span><br></pre></td></tr></table></figure><blockquote><p>删除已安装包（不保留配置文件)。</p></blockquote><p>This completely depends on what you want to achieve, they are separate for a reason. But lets see what they actually do:</p><blockquote><p>apt/apt-get clean → cleans the packages and install script in /var/cache/apt/archives/<br>apt/apt-get autoclean → cleans obsolete deb-packages, less than clean<br>apt/apt-get autoremove → removes orphaned packages which are not longer needed from the system, but not purges them, use the –purge option together with the command for that.  </p></blockquote><p>So it is up to you to decide if you want to combine one of the first two with the last one and you can do this like below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove &amp;&amp; sudo apt clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ubuntu移除安装包时用到的几个命令：autoclean,clean,autoremove&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/ubuntu/"/>
    
    
      <category term="apt-get" scheme="http://blog.zhangzonglinagain.xyz/tags/apt-get/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 桌面死机(重启gnome-shell)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/19/ubuntu-%E6%A1%8C%E9%9D%A2%E6%AD%BB%E6%9C%BA/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/19/ubuntu-%E6%A1%8C%E9%9D%A2%E6%AD%BB%E6%9C%BA/</id>
    <published>2021-04-19T10:54:00.000Z</published>
    <updated>2021-04-19T17:01:55.765Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu有时桌面会卡死，鼠标点击失灵，解决方法：重启gnome-shell。<br>建议以下两种二选一：</p><ul><li><span style="color:red">alt + F2</span>  弹出的输入框里输入小写<span style="color:red">r</span> ，回车，如此重启gnome-shell桌面环境。</li><li><span style="color:red">ctrl + alt + F3</span> 切换到其它虚拟终端tty3(Ubuntu18.04 默认tty1是选择用户登录界面，tty2往往就是对应卡死的桌面位置，我们选择tty3进行操作)，输入用户密码登录，输入<span style="color:red">ps -ef|grep gnome-shell</span> ，找到tty2对应的gnome-shell pid（一般有两个，一个是tty1的，一个是tty2的），<span style="color:red">kill -9 pidNum</span> ，系统自动重启gnome-shell,最后<span style="color:red">crl + alt +F2</span> 切换至tty2,这种方法的优点是不会干扰其他正在运行的程序。<a id="more"></a>其他方法还有（未验证）：</li></ul><h3 id="How-to-restart-GUI-on-Ubuntu-20-04-step-by-step-instructions"><a href="#How-to-restart-GUI-on-Ubuntu-20-04-step-by-step-instructions" class="headerlink" title="How to restart GUI on Ubuntu 20.04 step by step instructions"></a>How to restart GUI on Ubuntu 20.04 step by step instructions</h3><p>Sometimes you many need to restart/reload GUI because you may have done some changes which require it. However, occasionally you are forced to restart GUI because it froze and you do not wish to restart the entire system. In any case you might find some of the bellow information helpful.</p><h4 id="The-first-method-is-the-least-destructing-however-it-might-not-provide-the-expected-result"><a href="#The-first-method-is-the-least-destructing-however-it-might-not-provide-the-expected-result" class="headerlink" title="The first method is the least destructing, however, it might not provide the expected result."></a>The first method is the least destructing, however, it might not provide the expected result.</h4><p>Enter a restart gui Command</p><p><img src="/images/pasted-36.png" alt="upload successful"></p><p>While logged in to your GNOME desktop press <span style="color:red">ALT + F2</span> key combination. Into the Enter a Command box type <span style="color:red">r </span> and press <span style="color:red">Enter</span> .</p><h4 id="Another-alternative-to-do-the-GUI-restart-trick-might-be-the-most-obvious-to-simply-re-login"><a href="#Another-alternative-to-do-the-GUI-restart-trick-might-be-the-most-obvious-to-simply-re-login" class="headerlink" title="Another alternative to do the GUI restart trick might be the most obvious to simply re-login."></a>Another alternative to do the GUI restart trick might be the most obvious to simply re-login.</h4><p><img src="/images/pasted-37.png" alt="upload successful"><br>Restart GUI by first Log Out and consequently Log In to your GUI desktop</p><h4 id="In-this-scenario-we-simply-restart-the-gnome-shell-as-non-privileged-user"><a href="#In-this-scenario-we-simply-restart-the-gnome-shell-as-non-privileged-user" class="headerlink" title="In this scenario we simply restart the gnome-shell as non-privileged user."></a>In this scenario we simply restart the gnome-shell as non-privileged user.</h4><p><img src="/images/pasted-38.png" alt="upload successful"><br>Open up terminal and enter the <span style="color:red">gnome-shell –replace </span>command.</p><h4 id="The-following-restart-GUI-solution-is-guaranteed-to-restart-your-desktop-even-if-your-GUI-froze-while-the-system-is-still-functioning-However-it-needs-administrative-sudo-privileges"><a href="#The-following-restart-GUI-solution-is-guaranteed-to-restart-your-desktop-even-if-your-GUI-froze-while-the-system-is-still-functioning-However-it-needs-administrative-sudo-privileges" class="headerlink" title="The following restart GUI solution is guaranteed to restart your desktop even if your GUI froze while the system is still functioning. However, it needs administrative sudo privileges."></a>The following restart GUI solution is guaranteed to restart your desktop even if your GUI froze while the system is still functioning. However, it needs administrative sudo privileges.</h4><p><img src="/images/pasted-39.png" alt="upload successful"><br>Either enter the <span style="color:red">sudo systemctl restart systemd-logind.service </span>command directly into the terminal while in GUI. However, if your GUI is frozen you may need to first change to TTY console using <span style="color:red">CTRL + ALT + F2</span>, login and execute command from there.</p><h4 id="In-this-method-we-will-restart-the-Display-Manager-which-will-consequently-also-restart-GNOME-shell"><a href="#In-this-method-we-will-restart-the-Display-Manager-which-will-consequently-also-restart-GNOME-shell" class="headerlink" title="In this method we will restart the Display Manager which will consequently also restart GNOME shell."></a>In this method we will restart the Display Manager which will consequently also restart GNOME shell.</h4><p><img src="/images/pasted-40.png" alt="upload successful"><br>Either from GUI and TTY console <span style="color:red">CTRL + ALT + F2</span> execute <span style="color:red">sudo systemctl restart gdm</span> command. However, if you have deployed LightDM display manager in that case execute<span style="color:red"> sudo systemctl restart lightdm</span> command.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu有时桌面会卡死，鼠标点击失灵，解决方法：重启gnome-shell。&lt;br&gt;建议以下两种二选一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;color:red&quot;&gt;alt + F2&lt;/span&gt;  弹出的输入框里输入小写&lt;span style=&quot;color:red&quot;&gt;r&lt;/span&gt; ，回车，如此重启gnome-shell桌面环境。&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;color:red&quot;&gt;ctrl + alt + F3&lt;/span&gt; 切换到其它虚拟终端tty3(Ubuntu18.04 默认tty1是选择用户登录界面，tty2往往就是对应卡死的桌面位置，我们选择tty3进行操作)，输入用户密码登录，输入&lt;span style=&quot;color:red&quot;&gt;ps -ef|grep gnome-shell&lt;/span&gt; ，找到tty2对应的gnome-shell pid（一般有两个，一个是tty1的，一个是tty2的），&lt;span style=&quot;color:red&quot;&gt;kill -9 pidNum&lt;/span&gt; ，系统自动重启gnome-shell,最后&lt;span style=&quot;color:red&quot;&gt;crl + alt +F2&lt;/span&gt; 切换至tty2,这种方法的优点是不会干扰其他正在运行的程序。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/ubuntu/"/>
    
    
      <category term="gnome-shell" scheme="http://blog.zhangzonglinagain.xyz/tags/gnome-shell/"/>
    
  </entry>
  
  <entry>
    <title>markdown的html标签应用及常用语法</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/19/markdown%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/19/markdown%E5%86%85%E5%AE%B9%E6%8A%98%E5%8F%A0/</id>
    <published>2021-04-19T06:59:00.000Z</published>
    <updated>2021-04-29T11:54:24.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Markdown 是一种轻量级标记语言，非常适合网络书写。同时，Markdown支持嵌入html标签，我们就可以借此实现markdown不具有的某些功能，如代码折叠和文字样式等。</p><p><strong><a href="http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/" target="_blank" rel="noopener">Markdown的常用语法(个人总结) | ConnorLin’s Blog </a></strong></p><a id="more"></a><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;</span><br><span class="line">  &lt;font color&#x3D;&quot;#0000ff&quot; &gt;点击时的区域标题：点击查看详细内容&lt;&#x2F;font&gt;</span><br><span class="line">  &lt;&#x2F;summary&gt;</span><br><span class="line">  &lt;p&gt; - 测试 测试测试&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;pre&gt;&lt;code&gt;  title，value，callBack可以缺省  &lt;&#x2F;code&gt;  &lt;&#x2F;pre&gt;</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><ul><li><p>summary：折叠语法展示的摘要</p></li><li><p>details：折叠语法标签</p></li><li><p>pre：以原有格式显示元素内的文字是已经格式化的文本。</p></li><li><p>blockcode：表示程序的代码块。</p></li><li><p>code：指定代码范例。</p></li></ul><p>效果如下：</p><details>  <summary><font color="#0000ff">点击时的区域标题：点击查看详细内容</font></summary>  <p> - 测试 测试测试</p>  <pre><code>  title，value，callBack可以缺省  </code>  </pre></details><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style&#x3D;&#39;color:red&#39;&gt;This is red&lt;&#x2F;span&gt;   &#x2F;&#x2F;字体颜色</span><br><span class="line">&lt;ruby&gt; 漢 &lt;rt&gt; ㄏㄢˋ &lt;&#x2F;rt&gt; &lt;&#x2F;ruby&gt; &#x2F;&#x2F; 特殊字</span><br><span class="line">&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;F9&lt;&#x2F;kbd&gt;  &#x2F;&#x2F; 按键标识</span><br><span class="line">&lt;span style&#x3D;&quot;font-size:2rem; background:yellow;&quot;&gt;**Bigger**&lt;&#x2F;span&gt; &#x2F;&#x2F;字体大小和背景</span><br><span class="line"></span><br><span class="line">&lt;font face&#x3D;&quot;微软雅黑&quot; color&#x3D;&quot;red&quot; size&#x3D;&quot;6&quot;&gt;字体及字体颜色和大小&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;&quot;#0000ff&quot;&gt;字体颜色&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">&lt;p align&#x3D;&quot;left&quot;&gt;居左文本&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;center&quot;&gt;居中文本&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p align&#x3D;&quot;right&quot;&gt;居右文本&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>使用span或者font标签，同时用style属性控制样式。</p><p>效果如下：<br><span style="color:red">This is red</span>   //字体颜色</p><p><ruby> 漢 <rt> ㄏㄢˋ </rt> </ruby> // 特殊字</p><p><kbd>Ctrl</kbd>+<kbd>F9</kbd>  // 按键标识</p><p><span style="font-size:2rem; background:yellow;"><strong>Bigger</strong></span> //字体大小和背景</p><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font></p><p><font color="#0000ff">字体颜色</font></p><p align="left">居左文本</p><p align="center">居中文本</p><p align="right">居右文本</p><p>参考来源：<br><strong><a href="https://www.cnblogs.com/buwuliao/p/9578918.html" target="_blank" rel="noopener">【MarkDown】使用Html样式和折叠语法</a></strong>、<br><strong><a href="http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/" target="_blank" rel="noopener">Markdown的常用语法(个人总结) | ConnorLin’s Blog </a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，非常适合网络书写。同时，Markdown支持嵌入html标签，我们就可以借此实现markdown不具有的某些功能，如代码折叠和文字样式等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://connorlin.github.io/2016/05/06/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95(%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93)/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown的常用语法(个人总结) | ConnorLin’s Blog &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://blog.zhangzonglinagain.xyz/categories/markdown/"/>
    
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-04-19T06:49:00.000Z</published>
    <updated>2021-05-03T13:16:24.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>linux常用的命令，随时添加。</p><a id="more"></a><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>The type command is used to display information about the command type. It will show you how a given command would be interpreted if typed on the command line.<br>一般情况下，type命令被用于判断另外一个命令是否是内置命令，但是它实际上有更多的用法。  </p><ol><li><p>判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是：</p><blockquote><p>type ls 的输出是 ls 是 `ls –color=auto&#39; 的别名</p></blockquote><blockquote><p>type if 的输出是 if 是 shell 关键字</p></blockquote><blockquote><p>type type 的输出是 type 是 shell 内嵌</p></blockquote><blockquote><p>type frydsh 的输出是 bash: type: frydsh: 未找到</p></blockquote></li></ol><ol start="2"><li><p>判断一个名字当前是否是alias、keyword、function、builtin、file或者什么都不是的另一种方法（适用于脚本编程）：</p><blockquote><p>type -t ls 的输出是 alias</p></blockquote><blockquote><p>type -t if 的输出是 keyword</p></blockquote><blockquote><p>type -t type 的输出是 builtin</p></blockquote><blockquote><p>type -t gedit 的输出是 file</p></blockquote><blockquote><p>type -t frydsh 没有输出</p></blockquote></li><li><p>显示一个名字的所有可能：</p><blockquote><p>type -a kill 的输出是 kill 是 shell 内嵌 和 kill 是 /bin/kill</p></blockquote><blockquote><p>type -at kill 的输出是 builtin 和 file</p></blockquote></li><li><p>查看一个命令的执行路径（如果它是外部命令的话）：</p><blockquote><p>type -p gedit 的输出是 /usr/bin/gedit</p></blockquote><blockquote><p>type -p kill 没有输出（因为kill是内置命令）</p></blockquote></li></ol><ol start="5"><li><p>强制搜索外部命令：</p><blockquote><p>type -P kill 的输出是 /bin/kill</p></blockquote></li></ol><hr><h3 id="ll-amp-ls"><a href="#ll-amp-ls" class="headerlink" title="ll&amp;ls"></a>ll&amp;ls</h3><p>ll is aliased to &#39;ls -alF&#39;<br><img src="/images/pasted-35.png" alt="upload successful"></p><p>ls 几个重要参数：</p><ul><li>-a 显示所有文件及目录 (. 开头的隐藏文件也会列出)</li><li>-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li>-r 将文件以相反次序显示(原定依英文字母次序)</li><li>-t 将文件依建立时间之先后次序列出</li><li>-A 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</li><li>-F 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</li><li>-R 若目录下有文件，则以下之文件亦皆依序列出</li></ul><p>详细参数ls –help 查看。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><p>查看，其中-S sort by file size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -Sl 由大到小排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -Slr 从小到大排序</span><br></pre></td></tr></table></figure><p>-h，表示”–human-readable”，单位是k或者M ，比较容易看清楚结果。</p><p>显示子目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -R</span><br></pre></td></tr></table></figure><p>ls按时间排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -lt 从新到旧</span><br><span class="line">ls -lrt 从旧到新</span><br></pre></td></tr></table></figure><p>参考：<strong><u><a href="https://linux.cn/article-5109-1.html" target="_blank" rel="noopener">Linux中的15个基本‘ls’命令示例</a></u></strong></p><hr><h3 id="xdg-open"><a href="#xdg-open" class="headerlink" title="xdg-open"></a>xdg-open</h3><p>有时需要从terminal打开doc pdf jpg等文件，可以用xdg-open命令。</p><p>xdg-open command in the Linux system is used to open a file or URL in the user’s preferred application.<br>The URL will be opened in the user’s preferred web browser if a URL is provided. The file will be opened in the preferred application for files of that type if a file is provided. xdg-open supports ftp, file, https and http URLs. This can be used inside a desktop session only. It is not recommended to use xdg-open as root. Here, the zero is an indication of success while non-zero show the failure.</p><p>Syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdg-open &#123;file | URL&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="sort-uniq"><a href="#sort-uniq" class="headerlink" title="sort uniq"></a>sort uniq</h3><p>字如其义：排序和去重</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><strong>sort</strong> - sort lines of text files(对文本文件的行进行排序)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将它们按升序输出。</span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><p><strong>OPTION:</strong></p><ul><li>-b, –ignore-leading-blanks ignore leading blanks</li><li>-d, –dictionary-order consider only blanks and alphanumeric characters</li><li>-f, –ignore-case fold lower case to upper case characters</li><li>-g, –general-numeric-sort compare according to general numerical value</li><li>-i, –ignore-nonprinting consider only printable characters</li><li>-M, –month-sort compare (unknown) &lt; <code>JAN&#39; &lt; ... &lt;</code>DEC’</li><li>-n, –numeric-sort compare according to string numerical value</li><li>-r, –reverse reverse the result of comparisons</li></ul><p><strong>Other option:</strong></p><ul><li>-c, –check check whether input is sorted; do not sort</li><li>-k, –key=POS1[,POS2] start a key at POS1, end it at POS2 (origin 1)</li><li>-m, –merge merge already sorted files; do not sort</li><li>-o, –output=FILE write result to FILE instead of standard output</li><li>-s, –stable stabilize sort by disabling last-resort comparison</li><li>-S, –buffer-size=SIZE use SIZE for main memory buffer</li><li>-t, –field-separator=SEP use SEP instead of non-blank to blank transition</li><li>-T, –temporary-directory=DIR use DIR for temporaries, not $TMPDIR or/tmp;<br>multiple options specify multiple directories</li><li>-u, –unique with -c, check for strict ordering;<br>without -c, output only the first of an equal run</li><li>-z, –zero-terminated end lines with 0 byte, not newline</li><li>–help 显示此帮助信息并退出</li><li>–version 输出版本号信息并退出</li></ul><h4 id="sort的-o选项"><a href="#sort的-o选项" class="headerlink" title="sort的-o选项"></a>sort的-o选项</h4><p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort oldfile &gt; newfile<br>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ericshenMacPro@root duweixin]$ sort -r duweixin.txt &gt; duweixin.txt</span><br><span class="line">[ericshenMacPro@root duweixin]$ cat duweixin.txt</span><br><span class="line">[ericshenMacPro@root duweixin]$</span><br></pre></td></tr></table></figure><p>看，竟然将duweixin清空了。</p><p>加上-o选项，解决了这个问题，让你放心的将结果写入原文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[ericshenMacPro@root duweixin]$ cat number.txt</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">[ericshenMacPro@root duweixin]$ sort -r number.txt -o number.txt</span><br><span class="line">[ericshenMacPro@root duweixin]$ cat number.txt</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="sort的-t选项和-k选项"><a href="#sort的-t选项和-k选项" class="headerlink" title="sort的-t选项和-k选项"></a>sort的-t选项和-k选项</h4><p>如果有一个文件的内容是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ericshenMacPro@root duweixin]$ cat facebook.txt</span><br><span class="line">banana:30:5.5</span><br><span class="line">apple:10:2.5</span><br><span class="line">pear:90:2.3</span><br><span class="line">orange:20:3.4</span><br></pre></td></tr></table></figure><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。</p><p>那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？</p><p>幸好，sort提供了-t选项，后面可以设定间隔符。（是不是想起了cut和paste的-d选项，共鸣～～）</p><p>指定了间隔符之后，就可以用-k来指定列数了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ericshenMacPro@root duweixin]$ sort -n -k 2 -t : facebook.txt</span><br><span class="line">apple:10:2.5</span><br><span class="line">orange:20:3.4</span><br><span class="line">banana:30:5.5</span><br><span class="line">pear:90:2.3</span><br></pre></td></tr></table></figure><p>我们使用冒号作为间隔符，并针对第二列来进行数值升序排序，结果很令人满意。</p><p>有时候学习脚本，你会发现sort命令后面跟了一堆类似-k1,2，或者-k1.2<br>-k3.4的东东，有些匪夷所思。今天，我们就来搞定它—-k选项！</p><h4 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h4><p>一、准备素材</p><p>第一个域是公司名称，第二个域是公司人数，第三个域是员工平均工资。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat duweixin.net.txt</span><br><span class="line">google 110 5000</span><br><span class="line">baidu 100 5000</span><br><span class="line">guge 50 3000</span><br><span class="line">sohu 100 4500</span><br></pre></td></tr></table></figure><p>二、 我想让这个文件按公司的字母顺序排序，也就是按第一个域进行排序：（这个duweixin.net.txt文件有三个域）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t ‘ ‘ -k 1 duweixin.net.txt</span><br><span class="line">baidu 100 5000</span><br><span class="line">google 110 5000</span><br><span class="line">guge 50 3000</span><br><span class="line">sohu 100 4500</span><br></pre></td></tr></table></figure><p>就直接用-k 1设定就可以了。（其实此处并不严格，稍后你就会知道）</p><p>三、我想让duweixin.net.txt按照公司人数排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -n -t ‘ ‘ -k 2 duweixin.net.txt</span><br><span class="line">guge 50 3000</span><br><span class="line">baidu 100 5000</span><br><span class="line">sohu 100 4500</span><br><span class="line">google 110 5000</span><br></pre></td></tr></table></figure><p>但是，此处出现了问题，那就是baidu和sohu的公司人数相同，都是100人，这个时候怎么办呢？按照默认规矩，是从第一个域开始进行升序排序，因此baidu排在了sohu前面。</p><p>四、我想让facebook.txt按照公司人数排序 ，人数相同的按照员工平均工资升序排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -n -t ‘ ‘ -k 2 -k 3 duweixin.net.txt</span><br><span class="line">guge 50 3000</span><br><span class="line">sohu 100 4500</span><br><span class="line">baidu 100 5000</span><br><span class="line">google 110 5000</span><br></pre></td></tr></table></figure><p>加了一个-k2 -k3就解决了问题。对滴，sort支持这种设定，就是说设定域排序的优先级，先以第2个域进行排序，如果相同，再以第3个域进行排序。</p><p>五、我想让facebook.txt按照员工工资降序排序，如果员工人数相同的，则按照公司人数升序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -n -t ‘ ‘ -k 3r -k 2 duweixin.net.txt</span><br><span class="line">baidu 100 5000</span><br><span class="line">google 110 5000</span><br><span class="line">sohu 100 4500</span><br><span class="line">guge 50 3000</span><br></pre></td></tr></table></figure><p>此处有使用了一些小技巧，你仔细看看，在-k 3后面偷偷加上了一个小写字母r。你想想，再结合我们上一篇文章，能得到答案么？揭晓：r和-r选项的作用是一样的，就是表示逆序。因为sort默认是按照升序排序的，所以此处需要加上r表示第三个域（员工平均工资）是按照降序排序。此处你还可以加上n，就表示对这个域进行排序时，要按照数值大小进行排序，举个例子吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sort -t ‘ ‘ -k 3nr -k 2n duweixin.net.txt</span><br><span class="line">baidu 100 5000</span><br><span class="line">google 110 5000</span><br><span class="line">sohu 100 4500</span><br><span class="line">guge 50 3000</span><br></pre></td></tr></table></figure><p>去掉了最前面的-n选项，而是将它加入到了每一个-k选项中了。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F&#39;|&#39; &#39;&#123;print $2&#125;&#39; nginx_access.log | uniq -c  | sort -n -r | head -n 10   #查询访问次数前10的ip地址。uniq -c 表示统计各行在文件中出现的次数</span><br><span class="line">   2582 120.26.40.76</span><br><span class="line">    826 120.26.40.76</span><br><span class="line">    716 120.26.40.76</span><br><span class="line">    525 120.26.40.76</span><br><span class="line">    424 120.26.40.76</span><br><span class="line">    325 120.26.40.76</span><br><span class="line">    235 120.26.40.76</span><br><span class="line">    233 120.26.40.76</span><br><span class="line">    226 120.26.40.76</span><br><span class="line">    120 120.26.40.76</span><br></pre></td></tr></table></figure><p>参考：<strong><a href="https://segmentfault.com/a/1190000005713784" target="_blank" rel="noopener">linux sort 多列正排序，倒排序</a></strong></p><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p><strong>uniq</strong> - report or omit repeated lines(报告或省略重复的行)</p><p>描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniq 命令删除文件中的重复行。uniq 命令读取由 InFile 参数指定的标准输入或文件。该命令首先比较相邻的行，然后除去第二行和该行的后续副本。重复的行一定相邻。（在发出 uniq 命令之前，请使用 sort 命令使所有重复行相邻。uniq命令这种方式估计是想节省系统资源）最后，uniq 命令将最终单独的行写到标准输出或由 OutFile 参数指定的文件。InFile 和 OutFile 参数必须指定不同的文件。</span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniq [OPTION]... [InFile [OutFile]]</span><br></pre></td></tr></table></figure><p><strong>OPTION:</strong></p><ul><li>-c :在输出行前面加上每行在文件中出现的次数</li><li>-d :仅显示重复行</li><li>-u :仅显示不重复的行</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ cat fruit.txt </span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line">apple</span><br><span class="line">$ uniq fruit.txt  #可以看到apple不是邻近的，所以无法去重</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line">apple</span><br><span class="line">$ uniq -d fruit.txt   </span><br><span class="line">$</span><br><span class="line">$ sort fruit.txt   #先排序，将相同的行安排在一起</span><br><span class="line">apple</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange    </span><br><span class="line">$ sort fruit.txt | uniq  #排序后，去重</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ awk -F&#39;|&#39; &#39;&#123;print $2&#125;&#39;nginx_access.log | sort -n  |uniq -c | sort -n | tail -n 10     #只有先sort后在uniq才能生效</span><br><span class="line">     28 122.192.13.58</span><br><span class="line">     31 183.212.188.57</span><br><span class="line">     31 223.104.4.82</span><br><span class="line">     35 223.104.4.61</span><br><span class="line">     36 112.20.81.240</span><br><span class="line">     71 183.209.48.38</span><br><span class="line">     86 122.96.43.243</span><br><span class="line">    216 183.208.16.53</span><br><span class="line">    616 49.77.231.174</span><br><span class="line">   6268 120.26.40.76</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>uniq必须得和sort一起使用才能够达到所需要的结果。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><strong><a href="https://www.linuxjournal.com/content/back-basics-sort-and-uniq" target="_blank" rel="noopener">Back to Basics: Sort and Uniq</a></strong></p><hr><h3 id="tar-amp-gzip"><a href="#tar-amp-gzip" class="headerlink" title="tar&amp;gzip"></a>tar&amp;gzip</h3><p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z</p><p>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2。</p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>The Linux “tar” stands for tape archive, which is used by large number of Linux/Unix system administrators to deal with tape drives backup. </p><p><strong>OPTION:</strong></p><ul><li>c – create a archive file.</li><li>x – extract a archive file.</li><li>v – show the progress of archive file.</li><li>f – filename + of archive file.</li><li>t – viewing content of archive file.</li><li>j  – filter archive through bzip2.</li><li>z – filter archive through gzip.</li><li>r – append or update files or directories to existing archive file.</li><li>W – Verify a archive file.</li><li>wildcards – Specify patterns in unix tar command.</li></ul><p>其中j,z参数代表在压缩时需要注意选择压缩格式。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. Create tar Archive File</span><br><span class="line"></span><br><span class="line"> tar -cvf tecmint-14-09-12.tar &#x2F;home&#x2F;tecmint&#x2F;</span><br><span class="line"> </span><br><span class="line">2. Create tar.gz Archive File</span><br><span class="line"></span><br><span class="line">tar cvzf MyImages-14-09-12.tar.gz &#x2F;home&#x2F;MyImages</span><br><span class="line"></span><br><span class="line">3. Create tar.bz2 Archive File</span><br><span class="line"></span><br><span class="line"> tar cvfj Phpfiles-org.tar.bz2 &#x2F;home&#x2F;php</span><br></pre></td></tr></table></figure><p>事实上, <span style="color:red">从1.15版本开始tar就可以自动识别压缩的格式</span>,故不需人为区分压缩格式就能正确解压或者查看里面的内容。如解压文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf filename.tar</span><br><span class="line">tar -xvf filename.tar.gz  </span><br><span class="line">tar -xvf filename.tar.bz2  </span><br><span class="line">tar -xvf filename.tar.xz  </span><br><span class="line">tar -xvf filename.tar.Z</span><br></pre></td></tr></table></figure><p>抑或查看打包内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -tvf filename.tar</span><br><span class="line">tar -tvf filename.tar.gz  </span><br><span class="line">tar -tvf filename.tar.bz2  </span><br><span class="line">tar -tvf filename.tar.xz  </span><br><span class="line">tar -tvf filename.tar.Z</span><br></pre></td></tr></table></figure><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p>Gzip is one of the most popular compression algorithms that allow you to reduce the size of a file and keep the original file mode, ownership, and timestamp.</p><p>Gzip also refers to the .gz file format and the gzip utility which is used to compress and decompress files.</p><p>In this tutorial, we will show you how to use the gzip command.</p><h5 id="gzip-Command-Syntax"><a href="#gzip-Command-Syntax" class="headerlink" title="gzip Command Syntax"></a>gzip Command Syntax</h5><p>The general syntax for the gzip command is as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><p>Gzip compresses only single files and creates a compressed file for each given file. By convention, the name of a file compressed with Gzip should end with either .gz or .z.</p><p>If you want to compress multiple files or directory into one file, first you need to create a Tar archive and then compress the .tar file with Gzip. A file that ends in .tar.gz or .tgz is a Tar archive compressed with Gzip.</p><p>Gzip is most often used to compress text files, Tar archives, and web pages. <span style="color:red">Do not use Gzip to compress images, audio, PDF documents, and other binary files as they are already compressed</span>.</p><p><em>gzip</em> can compress only regular files. The <em>symbolic links</em> are ignored.</p><h5 id="Compressing-Files-with-gzip"><a href="#Compressing-Files-with-gzip" class="headerlink" title="Compressing Files with gzip"></a>Compressing Files with gzip</h5><p>To compress a single file invoke the gzip command followed by the filename:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip filename</span><br></pre></td></tr></table></figure><p>gzip will create a file filename.gz and delete the original file.</p><p>By default, gzip keeps the original file timestamp, mode, ownership, and name in the compressed file.</p><p>Keep the original file<br>If you want to keep the input (original) file, use the -k option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -k filename</span><br></pre></td></tr></table></figure><p>Another option to keep the original file is to use the -c option which tells gzip to write on standard output and redirect the output to a file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -c filename &gt; filename.gz</span><br></pre></td></tr></table></figure><h5 id="Verbose-output"><a href="#Verbose-output" class="headerlink" title="Verbose output"></a>Verbose output</h5><p>Use the -v option if you want to see the percentage reduction and the names of the files that are being processed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -v filename</span><br></pre></td></tr></table></figure><p>filename:      7.5% – replaced with filename.gz</p><h5 id="Compress-multiple-files"><a href="#Compress-multiple-files" class="headerlink" title="Compress multiple files"></a>Compress multiple files</h5><p>You can also pass multiple files as arguments to the command. For example, to compress the files named file1, file2, file3, you would run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip file1 file2 file3</span><br></pre></td></tr></table></figure><p>The command above will create three compressed files, file1.gz, file2.gz, file3.gz.</p><h5 id="Compress-all-files-in-a-directory"><a href="#Compress-all-files-in-a-directory" class="headerlink" title="Compress all files in a directory"></a>Compress all files in a directory</h5><p>To compress all files in a given directory, use the -r option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -r directory</span><br></pre></td></tr></table></figure><p><em>gzip</em> will recursively traverse through the whole directory structure and compress all the files in the directory and it’s subdirectories.</p><h5 id="Change-the-compression-level"><a href="#Change-the-compression-level" class="headerlink" title="Change the compression level"></a>Change the compression level</h5><p>gzip allows you to specify a range of compression levels, from 1 to 9. -1 or –fast means fastest compression speed with minimal compression ratio, -9 or –best indicates the slowest compression speed with maximum compression ratio. The default compression level is -6.</p><p>For example, to get maximum compression, you would run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -9 filename</span><br></pre></td></tr></table></figure><p>Compression is a CPU-intensive task, the higher the compression level, the longer the process takes.</p><h5 id="Using-standard-input"><a href="#Using-standard-input" class="headerlink" title="Using standard input"></a>Using standard input</h5><p>To create a .gz file from the stdin, pipe the output of the command to gzip. For example, to create a Gzipped MySQL database backup you would run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump database_name | gzip -c &gt; database_name.sql.gz</span><br></pre></td></tr></table></figure><p>The output of the mysqldump command will be input for gzip.</p><h5 id="Decompressing-Files-with-gzip"><a href="#Decompressing-Files-with-gzip" class="headerlink" title="Decompressing Files with gzip"></a>Decompressing Files with gzip</h5><p>To decompress a .gz file , use the -d option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d filename.gz</span><br></pre></td></tr></table></figure><p>Another command that you can use to decompress a Gzip file is gunzip . This command is basically an alias to gzip -d:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip filename.gz</span><br></pre></td></tr></table></figure><p>You might find it easier to remember gunzip than gzip -d.</p><h5 id="Keep-the-compressed-file"><a href="#Keep-the-compressed-file" class="headerlink" title="Keep the compressed file"></a>Keep the compressed file</h5><p>Same as when compressing a file, the -k option tells gzip to keep the input file, in this case, that is the compressed file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -dk filename.gz</span><br></pre></td></tr></table></figure><h5 id="Decompress-multiple-files"><a href="#Decompress-multiple-files" class="headerlink" title="Decompress multiple files"></a>Decompress multiple files</h5><p>To decompress multiple files at once pass the filenames to gzip as arguments:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d file1.gz file2.gz file3.gz</span><br></pre></td></tr></table></figure><h5 id="Decompress-all-files-in-a-directory"><a href="#Decompress-all-files-in-a-directory" class="headerlink" title="Decompress all files in a directory"></a>Decompress all files in a directory</h5><p>When used with -d and -r options, gzip decompresses all files in a given directory recursively:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -dr directory</span><br></pre></td></tr></table></figure><h5 id="List-the-Compressed-File-Contents"><a href="#List-the-Compressed-File-Contents" class="headerlink" title="List the Compressed File Contents"></a>List the Compressed File Contents</h5><p>When used with the -l option, gzip shows statistics about the given compressed files:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -l filename</span><br></pre></td></tr></table></figure><p>The output will include the uncompressed file name, the compressed and uncompressed size, and the compression ratio:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">compressed        uncompressed  ratio uncompressed_name</span><br><span class="line">       130                 107   7.5% filename</span><br></pre></td></tr></table></figure><p>To get more information, add the -v option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gzip -lv filename</span><br><span class="line">method  crc     date  time           compressed        uncompressed  ratio uncompressed_name</span><br><span class="line">defla a9b9e776 Sep  3 21:20                 130                 107   7.5% filename</span><br></pre></td></tr></table></figure><hr><h3 id="du-amp-df"><a href="#du-amp-df" class="headerlink" title="du&amp;df"></a>du&amp;df</h3><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>du command (short for disk usage) is useful command which is used to find disk usage for files &amp; directories. du command when used with various options provides results in many formats.</p><p><strong>Syntax :</strong>  </p><blockquote><p>du [OPTION]… [FILE]…<br>du [OPTION]… –files0-from=F</p></blockquote><p><strong>Options :</strong></p><blockquote><ul><li>-0, –null : end each output line with NULL</li><li>-a, –all : write count of all files, not just directories</li><li>–apparent-size&gt; : print apparent sizes, rather than disk usage.</li><li>-B, –block-s&gt;ize&gt;=SIZE : scale sizes to SIZE before printing on console</li><li>-c, –total : pro&gt;duce grand total</li><li>-d, –max-depth=N :   print the total for a directory (or file, with –all) only if it is N or fewer levels below the command line argument;  –max-depth=0 is the same as –summarize</li><li>-h, –human-readable : print sizes in human readable format</li><li>-S, -separate-dirs : for directories, don’t include size of subdirectories</li><li>-s, –summarize : display only total for each directory</li><li>–time : show time of last modification of any file or directory.</li><li>–exclude=PATTERN : exclude files that match PATTERN</li></ul></blockquote><p>Some of the examples are mentioned below:-</p><ol><li><p>To find out summary of disk usage for a directory with all its sub-directories</p><p> $ du /hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:&#x2F;mnt&#x2F;Secert&#x2F;hexo$ du &#x2F;var</span><br><span class="line">4&#x2F;var&#x2F;lib&#x2F;misc</span><br><span class="line">44&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;yaml</span><br><span class="line">240&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main&#x2F;64x64</span><br><span class="line">132&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main&#x2F;48x48</span><br><span class="line">376&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main</span><br></pre></td></tr></table></figure><p>Output of the command shows all the files &amp; directories in /home with block size.</p></li><li><p>Disk usage with file/directory sizes in human readable format I.e. in kb, mb etc</p><p> $ du -h /var</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:&#x2F;mnt&#x2F;Secert&#x2F;hexo$ du -h &#x2F;var</span><br><span class="line">4.0K&#x2F;var&#x2F;lib&#x2F;misc</span><br><span class="line">44K&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;yaml</span><br><span class="line">240K&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main&#x2F;64x64</span><br><span class="line">132K&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main&#x2F;48x48</span><br><span class="line">376K&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-main</span><br><span class="line">8.0K&#x2F;var&#x2F;lib&#x2F;app-info&#x2F;icons&#x2F;ubuntu-bionic-updates-multiverse&#x2F;64x64</span><br></pre></td></tr></table></figure></li><li><p>Total disk size of a directory</p><p> $ du -s /home/zzl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:&#x2F;$ du -s &#x2F;home&#x2F;zzl&#x2F;</span><br><span class="line">8572584&#x2F;home&#x2F;zzl&#x2F;</span><br><span class="line">zzl@zzl-J:&#x2F;$ du -sh &#x2F;home&#x2F;zzl&#x2F;</span><br><span class="line">8.2G&#x2F;home&#x2F;zzl&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>To print sizes till particular level, use -d option with level no.<br> $ du -d 1 /home/zzl<br> or du –maxdepth=1 /home/zzl</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:&#x2F;$ du -d 1 &#x2F;home&#x2F;zzl&#x2F;</span><br><span class="line">136&#x2F;home&#x2F;zzl&#x2F;.m2</span><br><span class="line">2635600&#x2F;home&#x2F;zzl&#x2F;.local</span><br><span class="line">868&#x2F;home&#x2F;zzl&#x2F;snap</span><br><span class="line">8&#x2F;home&#x2F;zzl&#x2F;.pip</span><br></pre></td></tr></table></figure><p>Now try with level 2, you will get some extra directories.<br>    $ du -d 2 /home/zzl<br>    or du –maxdepth=2 /home/zzl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:&#x2F;$ du -d 2 &#x2F;home&#x2F;zzl&#x2F;</span><br><span class="line">132&#x2F;home&#x2F;zzl&#x2F;.m2&#x2F;repository</span><br><span class="line">136&#x2F;home&#x2F;zzl&#x2F;.m2</span><br><span class="line">65548&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;lib</span><br><span class="line">1695880&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;idea-IU-203.7717.56</span><br><span class="line">32&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;bin</span><br><span class="line">100756&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;Telegram</span><br><span class="line">636576&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;share</span><br><span class="line">48&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;etc</span><br><span class="line">136756&#x2F;home&#x2F;zzl&#x2F;.local&#x2F;redis-6.2.1</span><br><span class="line">2635600&#x2F;home&#x2F;zzl&#x2F;.local</span><br><span class="line">320&#x2F;home&#x2F;zzl&#x2F;snap&#x2F;gnome-system-monitor</span><br></pre></td></tr></table></figure><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>The df command (short for disk free), is used to display information related to file systems about total space and available space.</p><p><strong>Syntax :</strong></p><blockquote><p>df [OPTION]… [FILE]…  </p></blockquote><p><strong>Options :</strong></p><blockquote><ul><li>-a, –all : includes pseudo, duplicate and inaccessible file systems.</li><li>-B, –block-size=SIZE : scales sizes by SIZE before printing them.</li><li>-h, –human-readable : print sizes in power of 1024</li><li>-H, –si: print sizes in power of 1000</li><li>-i, –inodes : list inode information instead of block usage</li><li>-l, –local : limit listing to local file systems</li><li>-P, –portability : use POSIX output format</li><li>–sync : invoke sync before getting usage info</li><li>–total : elide all entries insignificant to available space, and produce grand total</li><li>-t, –type=TYPE : limit listing to file systems of type TYPE</li><li>-T, –print-type : print file system type</li></ul></blockquote><p>If no file name is given, it displays the space available on all currently mounted file systems.<br>For example :</p><p>df<br>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:~$ df</span><br><span class="line">Filesystem     1K-blocks      Used Available Use% Mounted on</span><br><span class="line">udev             3998520         0   3998520   0% &#x2F;dev</span><br><span class="line">tmpfs             804612      2108    802504   1% &#x2F;run</span><br><span class="line">&#x2F;dev&#x2F;nvme0n1p7  33203920  13543756  17943788  44% &#x2F;</span><br><span class="line">tmpfs            4023048    710744   3312304  18% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs               5120         4      5116   1% &#x2F;run&#x2F;lock</span><br><span class="line">tmpfs            4023048         0   4023048   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;loop0        261760    261760         0 100% &#x2F;snap&#x2F;gnome-3-34-1804&#x2F;36</span><br><span class="line">&#x2F;dev&#x2F;loop2         66688     66688         0 100% &#x2F;snap&#x2F;gtk-common-themes&#x2F;1515</span><br><span class="line">&#x2F;dev&#x2F;loop3          1024      1024         0 100% &#x2F;snap&#x2F;gnome-logs&#x2F;100</span><br><span class="line">&#x2F;dev&#x2F;loop1         56832     56832         0 100% &#x2F;snap&#x2F;core18&#x2F;1988</span><br><span class="line">&#x2F;dev&#x2F;loop4           384       384         0 100% &#x2F;snap&#x2F;gnome-characters&#x2F;570</span><br><span class="line">&#x2F;dev&#x2F;loop7          2304      2304         0 100% &#x2F;snap&#x2F;gnome-system-monitor&#x2F;148</span><br><span class="line">&#x2F;dev&#x2F;loop6        101632    101632         0 100% &#x2F;snap&#x2F;core&#x2F;10908</span><br><span class="line">&#x2F;dev&#x2F;loop5         33152     33152         0 100% &#x2F;snap&#x2F;snapd&#x2F;11588</span><br><span class="line">&#x2F;dev&#x2F;loop8        101632    101632         0 100% &#x2F;snap&#x2F;core&#x2F;10958</span><br><span class="line">&#x2F;dev&#x2F;loop9           640       640         0 100% &#x2F;snap&#x2F;gnome-logs&#x2F;103</span><br><span class="line">&#x2F;dev&#x2F;loop10         2304      2304         0 100% &#x2F;snap&#x2F;gnome-system-monitor&#x2F;157</span><br><span class="line">&#x2F;dev&#x2F;loop13         2560      2560         0 100% &#x2F;snap&#x2F;gnome-calculator&#x2F;884</span><br><span class="line">&#x2F;dev&#x2F;loop11       224256    224256         0 100% &#x2F;snap&#x2F;gnome-3-34-1804&#x2F;66</span><br><span class="line">&#x2F;dev&#x2F;loop12        63616     63616         0 100% &#x2F;snap&#x2F;gtk-common-themes&#x2F;1506</span><br><span class="line">&#x2F;dev&#x2F;loop14        56832     56832         0 100% &#x2F;snap&#x2F;core18&#x2F;1997</span><br><span class="line">&#x2F;dev&#x2F;loop15          384       384         0 100% &#x2F;snap&#x2F;gnome-characters&#x2F;708</span><br><span class="line">&#x2F;dev&#x2F;loop16        33152     33152         0 100% &#x2F;snap&#x2F;snapd&#x2F;11402</span><br><span class="line">&#x2F;dev&#x2F;loop17         2560      2560         0 100% &#x2F;snap&#x2F;gnome-calculator&#x2F;748</span><br><span class="line">&#x2F;dev&#x2F;nvme0n1p1    262144     36868    225276  15% &#x2F;boot&#x2F;efi</span><br><span class="line">&#x2F;dev&#x2F;nvme0n1p8  34464424   8620596  24063400  27% &#x2F;home</span><br><span class="line">&#x2F;dev&#x2F;sda2      244073468 183912216  60161252  76% &#x2F;mnt&#x2F;Workspace</span><br><span class="line">&#x2F;dev&#x2F;sda1      244308988 193341424  50967564  80% &#x2F;mnt&#x2F;Secert</span><br><span class="line">tmpfs             804608        16    804592   1% &#x2F;run&#x2F;user&#x2F;121</span><br><span class="line">tmpfs             804608        28    804580   1% &#x2F;run&#x2F;user&#x2F;1000</span><br><span class="line">overlay         33203920  13543756  17943788  44% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;de94e0676e57477d87aba630ff494dd43ad714de367cf5031e544f25bb613f64&#x2F;merged</span><br></pre></td></tr></table></figure><p><strong>df usage Examples with options :</strong></p><ol><li><p>If you want to display all the file system, use -a option.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -a</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">zzl@zzl-J:~$ df -a</span><br><span class="line">Filesystem     1K-blocks      Used Available Use% Mounted on</span><br><span class="line">sysfs                  0         0         0    - &#x2F;sys</span><br><span class="line">proc                   0         0         0    - &#x2F;proc</span><br><span class="line">udev             3998520         0   3998520   0% &#x2F;dev</span><br><span class="line">devpts                 0         0         0    - &#x2F;dev&#x2F;pts</span><br><span class="line">tmpfs             804612      2108    802504   1% &#x2F;run</span><br><span class="line">&#x2F;dev&#x2F;nvme0n1p7  33203920  13543884  17943660  44% &#x2F;</span><br><span class="line">securityfs             0         0         0    - &#x2F;sys&#x2F;kernel&#x2F;security</span><br><span class="line">tmpfs            4023048    705236   3317812  18% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs               5120         4      5116   1% &#x2F;run&#x2F;lock</span><br><span class="line">tmpfs            4023048         0   4023048   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">cgroup                 0         0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;unified</span><br><span class="line">cgroup                 0         0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemd</span><br><span class="line">pstore                 0         0         0    - &#x2F;sys&#x2F;fs&#x2F;pstore</span><br><span class="line">efivarfs               0         0         0    - &#x2F;sys&#x2F;firmware&#x2F;efi&#x2F;efivars</span><br><span class="line">cgroup                 0         0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacct</span><br></pre></td></tr></table></figure><p>The above is not complete output, but you can see that the information shown is extended to info provided by df command.</p></li><li><p>Use -h option to display size in power of 1024</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h &#x2F;home&#x2F;mandeep</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda10       76G   65G  7.0G  91% &#x2F;home</span><br></pre></td></tr></table></figure></li><li><p>Use -H option to display sizes in power of 1000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -H &#x2F;home&#x2F;mandeep</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda10       81G   70G  7.5G  91% &#x2F;home</span><br></pre></td></tr></table></figure><p>You can observe the size section of two command with -h and -H option for difference.</p></li><li><p>To get complete grand total, use –total option</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df --total</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             3996816        0   3996816   0% &#x2F;dev</span><br><span class="line">tmpfs             804624    10072    794552   2% &#x2F;run</span><br><span class="line">&#x2F;dev&#x2F;sda9       68117056 18036336  46597536  28% &#x2F;</span><br><span class="line">tmpfs            4023116    50140   3972976   2% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs               5120        4      5116   1% &#x2F;run&#x2F;lock</span><br><span class="line">tmpfs            4023116        0   4023116   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;loop0         88832    88832         0 100% &#x2F;snap&#x2F;simplescreenrecorder&#x2F;1</span><br><span class="line">&#x2F;dev&#x2F;loop2         85888    85888         0 100% &#x2F;snap&#x2F;core&#x2F;3748</span><br><span class="line">&#x2F;dev&#x2F;loop3         85888    85888         0 100% &#x2F;snap&#x2F;core&#x2F;3604</span><br><span class="line">&#x2F;dev&#x2F;loop1         83328    83328         0 100% &#x2F;snap&#x2F;core&#x2F;3887</span><br><span class="line">&#x2F;dev&#x2F;sda10      78873504 67529320   7314540  91% &#x2F;home</span><br><span class="line">&#x2F;dev&#x2F;sda1         507904    30908    476996   7% &#x2F;boot&#x2F;efi</span><br><span class="line">tmpfs             804624       12    804612   1% &#x2F;run&#x2F;user&#x2F;121</span><br><span class="line">tmpfs             804624       64    804560   1% &#x2F;run&#x2F;user&#x2F;1000</span><br><span class="line">total          162304440 86000792  68790820  56% -</span><br></pre></td></tr></table></figure><p>Observe the last row of above table output, it specifies grand total.</p></li><li><p>Use -T option to display file type<br>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -T &#x2F;home&#x2F;mandeep</span><br></pre></td></tr></table></figure><p>Output :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filesystem     Type 1K-blocks     Used Available Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;sda10     ext4  78873504 67528128   7315732  91% &#x2F;home</span><br></pre></td></tr></table></figure><p>You can see the file type for /home/mandeep is ext4.</p></li><li><p>And for more help, you can use –help option.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df --help</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;linux常用的命令，随时添加。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>linux小技巧</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/16/linux%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/16/linux%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2021-04-16T07:17:00.000Z</published>
    <updated>2021-04-19T09:47:03.099Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux小技巧"><a href="#linux小技巧" class="headerlink" title="linux小技巧"></a>linux小技巧</h3><p>linux有用的小技巧，随时添加。</p><p>源链接：<strong><u><a href="https://mp.weixin.qq.com/s/KZcnlW4RRZowPUelsRQAGA" target="_blank" rel="noopener">15 个 Linux 实用技巧</a></u></strong></p><a id="more"></a><h3 id="命令不记录到history"><a href="#命令不记录到history" class="headerlink" title="命令不记录到history"></a>命令不记录到history</h3><p>我们在所要执行的命令前，加一个空格，那这条命令就不会被 history 保存到历史记录</p><p>有时候，执行的命令中包含敏感信息，这个小技巧就显得非常实用了，你也不会再因为忘记执行 history -c 而烦恼了。</p><h3 id="快速搜索历史命令"><a href="#快速搜索历史命令" class="headerlink" title="快速搜索历史命令"></a>快速搜索历史命令</h3><p>在 Linux 下经常会敲很多的命令，我们要怎么快速查找并执行历史命令呢？</p><p>通过上下键来翻看历史命令，No No No，可以通过执行 Ctrl + r，然后键入要所搜索的命令关键词，进行搜索，回车就可以执行，非常高效。</p><h3 id="历史命令使用技巧"><a href="#历史命令使用技巧" class="headerlink" title="历史命令使用技巧"></a>历史命令使用技巧</h3><p>分享几个历史命令的使用技巧，能够提高你的工作效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!!：重复执行上条命令；</span><br><span class="line">!N：重复执行 history 历史中第 N 条命令，N 可以通过 history 查看；</span><br><span class="line">!pw：重复执行最近一次，以pw开头的历史命令，这个非常有用，小编使用非常高频；</span><br><span class="line">!$：表示最近一次命令的最后一个参数；</span><br></pre></td></tr></table></figure><p>猜测大部分同学没用过 !$，这里简单举个例子，让你感受一下它的高效用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim &#x2F;root&#x2F;sniffer&#x2F;src&#x2F;main.c</span><br><span class="line">$ mv !$ !$.bak</span><br><span class="line"># 相当于</span><br><span class="line">$ mv &#x2F;root&#x2F;sniffer&#x2F;src&#x2F;main.c &#x2F;root&#x2F;sniffer&#x2F;src&#x2F;main.c.bak</span><br></pre></td></tr></table></figure><p>当前工作目录是 root，想把 main.c 改为 main.c.bak。正常情况你可能需要敲 2 遍包含 main.c 的长参数，当然你也可能会选择直接复制粘贴。</p><p>而我通过使用 !$ 变量，可以很轻松优雅的实现改名。</p><h3 id="优雅的删除、修改乱码名字的文件"><a href="#优雅的删除、修改乱码名字的文件" class="headerlink" title="优雅的删除、修改乱码名字的文件"></a>优雅的删除、修改乱码名字的文件</h3><p>在 Linux 系统中，会经常碰到名称乱码的文件。想要删除它，却无法通过键盘输入名字，有时候复制粘贴乱码名称，终端可能识别不了，该怎么办？</p><p>不用担心，下边来展示下 find 是如何优雅的解决问题的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls  -i</span><br><span class="line">138957 a.txt  138959 T.txt  132395 ڹ��.txt</span><br><span class="line"></span><br><span class="line">$ find . -inum 132395 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>命令中，-inum 指定的是文件的 inode 号，它是系统中每个文件对应的唯一编号，find 通过编号找到后，执行删除操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find -inum 节点号 -exec rm &#123;&#125; \; &#x2F;&#x2F;删除</span><br><span class="line">find -inum 节点号 -exec mv &#123;&#125; newname \; &#x2F;&#x2F;重命名</span><br><span class="line">find -inum 节点号 -exec cat &#123;&#125; \; &#x2F;&#x2F;查看内容</span><br></pre></td></tr></table></figure><h3 id="Linux上获取你的公网IP地址"><a href="#Linux上获取你的公网IP地址" class="headerlink" title="Linux上获取你的公网IP地址"></a>Linux上获取你的公网IP地址</h3><p>在办公或家庭环境，我们的虚拟机或服务器上配置的通常是内网 IP 地址，我们如何知道，在与外网通信时，我们的公网出口 IP 是神马呢？</p><p>这个在 Linux 上非常简单，一条命令搞定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl ip.sb</span><br><span class="line">$ curl ifconfig.me</span><br></pre></td></tr></table></figure><p>上述两条命令都可以</p><h3 id="动态实时查看日志"><a href="#动态实时查看日志" class="headerlink" title="动态实时查看日志"></a>动态实时查看日志</h3><p>通过 tail 命令 -f 选项，可以动态地监控日志文件的变化，非常实用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f test.log</span><br></pre></td></tr></table></figure><p>如果想在日志中出现 Failed 等信息时立刻停止 tail 监控，可以通过如下命令来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f test.log | sed &#39;&#x2F;Failed&#x2F; q&#39;</span><br></pre></td></tr></table></figure><h3 id="快速清空文件的方法"><a href="#快速清空文件的方法" class="headerlink" title="快速清空文件的方法"></a>快速清空文件的方法</h3><p>快速清空一个文件，有 N 种方法，我比较喜欢下边这种，因为它最短</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &gt; access.log</span><br></pre></td></tr></table></figure><p>不过瘾？好吧，我也顺便总结下，其它几种最常见的清空文件的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">: &gt; access.log</span><br><span class="line">true &gt; access.log</span><br><span class="line">cat &#x2F;dev&#x2F;null &gt; access.log</span><br><span class="line">echo -n &quot;&quot; &gt; access.log</span><br><span class="line">echo &gt; access.log</span><br><span class="line">truncate -s 0 access.log</span><br></pre></td></tr></table></figure><p>简单解释下， : 在 shell 中是一个内置命令，表示 no-op，大概就是空语句的意思，所以 : 的那个用法，就是执行命令后，什么都没有输出，将空内容覆盖到文件。</p><h3 id="快速生成大文件"><a href="#快速生成大文件" class="headerlink" title="快速生成大文件"></a>快速生成大文件</h3><p>有时候，在 Linux 上，我们需要一个大文件，用于测试上传或下载的速度，通过 dd 命令可以快速生成一个大文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;file.img bs&#x3D;1M count&#x3D;1024</span><br></pre></td></tr></table></figure><p>上述命令，生成一个文件名为 file.img 大小为 1G 的文件。</p><h3 id="安全擦除硬盘数据"><a href="#安全擦除硬盘数据" class="headerlink" title="安全擦除硬盘数据"></a>安全擦除硬盘数据</h3><p>介绍一种擦除硬盘数据的方法，高效，安全。可以通过 dd 命令，轻松实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;urandom of&#x3D;&#x2F;dev&#x2F;sda</span><br></pre></td></tr></table></figure><p>使用 /dev/urandom 生成随机数据，将生成的数据写入 sda 硬盘中，相当于安全的擦除了硬盘数据。</p><h3 id="快速制作系统盘"><a href="#快速制作系统盘" class="headerlink" title="快速制作系统盘"></a>快速制作系统盘</h3><p>在 Linux 下制作系统盘，老毛桃神么工具都弱爆了，直接一条命令搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd if&#x3D;ubuntu-server-amd64.iso of&#x3D;&#x2F;dev&#x2F;sdb</span><br></pre></td></tr></table></figure><p>哈哈，是不是很爽，sdb 可以 U 盘，也可以是普通硬盘</p><h3 id="查看某个进程的运行时间"><a href="#查看某个进程的运行时间" class="headerlink" title="查看某个进程的运行时间"></a>查看某个进程的运行时间</h3><p>可能，大部分同学只会使用 ps aux，其实可以通过 -o 参数，指定只显示具体的某个字段，会得到更清晰的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -p 10167 -o etimes,etime</span><br><span class="line">ELAPSED     ELAPSED</span><br><span class="line">1712055 19-19:34:15</span><br></pre></td></tr></table></figure><p>通过 etime 获取该进程的运行时间，可以很直观地看到，进程运行了 19 天</p><p>同样，可以通过 -o 指定 rss 可以只获取该进程的内存信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -p 10167 -o rss</span><br><span class="line">  RSS</span><br><span class="line"> 2180</span><br></pre></td></tr></table></figure><h3 id="时间戳的快速转换"><a href="#时间戳的快速转换" class="headerlink" title="时间戳的快速转换"></a>时间戳的快速转换</h3><p>时间操作，对程序员来说就是家常便饭。有时候希望能够将时间戳，转换为日期时间，在 Linux 命令行上，也可以快速的进行转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date -d@1234567890 +&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2009-02-14 07:31:30</span><br></pre></td></tr></table></figure><p>当然，也可以在命令行上，查看当前的时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ date +%s</span><br><span class="line">1617514141</span><br></pre></td></tr></table></figure><h3 id="优雅的计算程序运行时间"><a href="#优雅的计算程序运行时间" class="headerlink" title="优雅的计算程序运行时间"></a>优雅的计算程序运行时间</h3><p>在 Linux 下，可以通过 time 命令，很容易获取程序的运行时间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ time .&#x2F;test</span><br><span class="line">real    0m1.003s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m0.000s</span><br></pre></td></tr></table></figure><p>可以看到，程序的运行时间为: 1.003s。细心的同学，会看到 real 貌似不等于 user + sys，而且还远远大于，这是怎么回事呢？</p><p>先来解释下这三个参数的含义：</p><ul><li>real：表示的钟表时间，也就是从程序执行到结束花费的时间；</li><li>user：表示运行期间，cpu 在用户空间所消耗的时间；</li><li>sys：表示运行期间，cpu 在内核空间所消耗的时间；</li></ul><p>由于 user 和 sys 只统计 cpu 消耗的时间，程序运行期间会调用 sleep 发生阻塞，也可能会等待网络或磁盘 IO，都会消耗大量时间。因此对于类似情况，real 的值就会大于其它两项之和。</p><p>另外，也会遇到 real 远远小于 user + sys 的场景，这是什么鬼情况？</p><p>这个更好理解，如果程序在多个 cpu 上并行，那么 user 和 sys 统计时间是多个 cpu 时间，实际消耗时间 real 很可能就比其它两个之和要小了</p><h3 id="命令行查看ascii码"><a href="#命令行查看ascii码" class="headerlink" title="命令行查看ascii码"></a>命令行查看ascii码</h3><p>我们在开发过程中，通常需要查看 ascii 码，通过 Linux 命令行就可以轻松查看，而不用去 Google 或 Baidu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man ascii</span><br></pre></td></tr></table></figure><h3 id="如何批量下载网页资源"><a href="#如何批量下载网页资源" class="headerlink" title="如何批量下载网页资源"></a>如何批量下载网页资源</h3><p>有时，同事会通过网页的形式分享文件下载链接，在 Linux 系统，通过 wget 命令可以轻松下载，而不用写脚本或爬虫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget -r -nd -np --accept&#x3D;pdf http:&#x2F;&#x2F;fast.dpdk.org&#x2F;doc&#x2F;pdf-guides&#x2F;</span><br><span class="line"># --accept：选项指定资源类型格式 pdf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;linux小技巧&quot;&gt;&lt;a href=&quot;#linux小技巧&quot; class=&quot;headerlink&quot; title=&quot;linux小技巧&quot;&gt;&lt;/a&gt;linux小技巧&lt;/h3&gt;&lt;p&gt;linux有用的小技巧，随时添加。&lt;/p&gt;
&lt;p&gt;源链接：&lt;strong&gt;&lt;u&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KZcnlW4RRZowPUelsRQAGA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;15 个 Linux 实用技巧&lt;/a&gt;&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu登录界面美化</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/14/ubuntu%E5%BC%80%E6%9C%BA%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/14/ubuntu%E5%BC%80%E6%9C%BA%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</id>
    <published>2021-04-13T18:03:00.000Z</published>
    <updated>2021-04-13T18:03:45.688Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://blog.csdn.net/vselfdom/article/details/88546349" target="_blank" rel="noopener">Ubuntu 18.04 用户登录界面优化</a></strong>，备用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.csdn.net/vselfdom/article/details/88546349&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu 18.04 用户登录界面优化&lt;/a&gt;&lt;/stron
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Async/await</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/14/Async-await/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/14/Async-await/</id>
    <published>2021-04-13T17:05:00.000Z</published>
    <updated>2021-04-13T18:00:19.428Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://javascript.info/async-await" target="_blank" rel="noopener">Async/await</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://javascript.info/async-await&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Async/await&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.zhangzonglinagain.xyz/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Using the Switch(true) Pattern in JavaScript</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/13/Using-the-Switch-true-Pattern-in-JavaScript-https-seanbarry-dev-posts-switch-true-pattern/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/13/Using-the-Switch-true-Pattern-in-JavaScript-https-seanbarry-dev-posts-switch-true-pattern/</id>
    <published>2021-04-12T17:19:00.000Z</published>
    <updated>2021-04-12T17:20:35.825Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://seanbarry.dev/posts/switch-true-pattern" target="_blank" rel="noopener">Using the Switch(true) Pattern in JavaScript</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://seanbarry.dev/posts/switch-true-pattern&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using the Switch(true) Pattern in JavaScript&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.zhangzonglinagain.xyz/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.zhangzonglinagain.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>centos 免密切换root</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/11/centos-switch-to-root-without-password/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/11/centos-switch-to-root-without-password/</id>
    <published>2021-04-10T17:29:00.000Z</published>
    <updated>2021-04-13T19:16:18.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>centos6上免密切换到root，原理、步骤。</p><a id="more"></a><h3 id="execute-ALL-sudo-commands-without-password"><a href="#execute-ALL-sudo-commands-without-password" class="headerlink" title="execute ALL sudo commands without password"></a>execute ALL sudo commands without password</h3><p>Type the following command as root user:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># visudo</span><br></pre></td></tr></table></figure><p>Or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo</span><br></pre></td></tr></table></figure><p>Append the following entry to run ALL command without a password for a user named marlena:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remo ALL&#x3D;(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>Save and close the file in vim. It is also possible to grant access to the group name such as sysadm. Any member of sysadm group can run command without a password. The syntax is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sysadm ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>Of course, you can force the sysadm group to run only given commands such as /usr/sbin/reboot and systemctl:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sysadm ALL&#x3D;(ALL) NOPASSWD: &#x2F;sbin&#x2F;reboot, systemctl</span><br></pre></td></tr></table></figure><p>参考：<strong><a href="https://www.cyberciti.biz/faq/how-to-sudo-without-password-on-centos-linux/" target="_blank" rel="noopener">How to sudo without password on CentOS Linux</a></strong></p><h3 id="switch-to-root-without-password"><a href="#switch-to-root-without-password" class="headerlink" title="switch to root without password"></a>switch to root without password</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@lansetongxin2 &#x2F;]# vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>相应位置添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-34.png" alt="upload successful"><br>ps: By default on CentOS systems, members of the group wheel are granted with sudo access.</p><p>:wq 保存后，便可以免密切换到root(sudo su -)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[remo@lansetongxin2 ~]$ sudo su #最好使用sudo su -完全切换，su会加载不出来环境变量</span><br></pre></td></tr></table></figure><p>ps: su命令和su -命令最大的本质区别就是：前者只是切换了root身份，但Shell环境仍然是普通用户的Shell；而后者连用户和Shell环境一起切换成root身份了。只有切换了Shell环境才不会出现PATH环境变量错误。su切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；而用su -命令切换以后，工作目录变成root的工作目录了。用echo $PATH命令看一下su和su -以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用su -命令。</p><h3 id="root-ALL-ALL-ALL详解"><a href="#root-ALL-ALL-ALL详解" class="headerlink" title="root ALL=(ALL) ALL详解"></a>root ALL=(ALL) ALL详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><p>/etc/sudoers中的此行表示：root用户可以从所有终端执行，充当所有（任何）用户，并运行ALL（任何）命令。<br>第一部分是用户，第二部分是用户可以使用sudo命令的终端，第三部分是他可以充当哪些用户，最后一部分是使用时可以运行的命令sudo。</p><p>sudoers的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">operator ALL&#x3D; &#x2F;sbin&#x2F;poweroff</span><br></pre></td></tr></table></figure><p>以上命令，使用户操作员可以从任何终端，关闭命令电源。</p><p>您还可以为以下项创建别名：users - &gt; User_Alias，以其他用户身份运行命令 - &gt; Runas_Alias，主机 - &gt; Host_Alias 命令 - &gt; Cmnd_Alias</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User_Alias OPERATORS &#x3D; joe, mike, jude Runas_Alias OP &#x3D; root, operator Host_Alias OFNET &#x3D; 10.1.2.0&#x2F;255.255.255.0 Cmnd_Alias PRINTING &#x3D; &#x2F;usr&#x2F;sbin&#x2F;lpc, &#x2F;usr&#x2F;bin&#x2F;lprm</span><br></pre></td></tr></table></figure><p>正如您所看到的别名OPERATORS包括用户joe，mike和jude，别名OP包括用户root和operator，别名OFNET包括网络10.1.2.0（所有C类），命令别名PRINTING包含命令lpc和lprm。</p><p>因此，典型的sudoers文件可能如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> User_Alias     OPERATORS &#x3D; joe, mike, jude</span><br><span class="line"> Runas_Alias    OP &#x3D; root, operator</span><br><span class="line"> Host_Alias     OFNET &#x3D; 10.1.2.0&#x2F;255.255.255.0</span><br><span class="line"> Cmnd_Alias     PRINTING &#x3D; &#x2F;usr&#x2F;sbin&#x2F;lpc, &#x2F;usr&#x2F;bin&#x2F;lprm</span><br><span class="line"></span><br><span class="line">OPERATORS ALL&#x3D;ALL</span><br><span class="line"></span><br><span class="line">#The users in the OPERATORS group can run any command from</span><br><span class="line"> any terminal.</span><br><span class="line"></span><br><span class="line">linus ALL&#x3D;(OP) ALL</span><br><span class="line"></span><br><span class="line"># The user linus can run any command from any terminal as any </span><br><span class="line">user in the OP group (root or operator).</span><br><span class="line"></span><br><span class="line">user2 OFNET&#x3D;(ALL) ALL</span><br><span class="line"></span><br><span class="line"># user user2 may run any command from any machine in the </span><br><span class="line">OFNET network, as any user.</span><br><span class="line"></span><br><span class="line">user3 ALL&#x3D; PRINTING</span><br><span class="line"></span><br><span class="line"># user user3 may run lpc and lprm from any machine.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yujiaao ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><p>在编辑器中打开 sudoers 文件后，您需要向下滚动到编辑器的末尾并在其中添加以下代码！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yujiaao ALL&#x3D;(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>用您的用户名替换“ yujiaao ”！（例如：anderson ALL =（ALL）NOPASSWD：ALL），命令NOPASSWD将在终端中运行SUDO命令时跳过密码验证。</p><p>如何在为特定命令运行sudo时跳过密码：<br>您可以允许某些命令使用密码运行sudo，使用以下命令来实现它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yujiaao ALL&#x3D;(ALL) NOPASSWD:&#x2F;bin&#x2F;cp,&#x2F;bin&#x2F;install,bin&#x2F;remove</span><br></pre></td></tr></table></figure><p>完成编辑后，请保存文件并退出终端。</p><p>NOPASSWD 是一个“标签”，表示不会请求密码。它有一个名为的伴随命令 PASSWD，是默认行为。标签与规则的其余部分相关，除非在其后面的“双胞胎”标签上被否决。<br>例如，我们可以有这样的一行：</p><p>在 /etc/sudoers文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GROUPTWO    ALL &#x3D; NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;updatedb, PASSWD: &#x2F;bin&#x2F;kill</span><br></pre></td></tr></table></figure><p>另一个有用的标签NOEXEC，可用于防止某些程序中的某些危险行为。</p><p>例如，某些程序（如“less”）可以通过在其界面中键入以下内容来生成其他命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!command_to_run</span><br></pre></td></tr></table></figure><p>这基本上执行用户赋予它的任何命令，具有“less”运行的相同权限，这可能非常危险。</p><p>为了限制这一点，我们可以使用这样的一行：</p><p>在 /etc/sudoers文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username  ALL &#x3D; NOEXEC: &#x2F;usr&#x2F;bin&#x2F;less</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;centos6上免密切换到root，原理、步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Let’sEncrypt 证书自动更新脚本</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/08/Let%E2%80%99sEncrypt-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/08/Let%E2%80%99sEncrypt-%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC/</id>
    <published>2021-04-08T10:49:00.000Z</published>
    <updated>2021-04-12T17:21:51.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>vps科学上网用的Let’sEncrypt免费证书，有效期一般是3个月，需要定期更新。写个脚本，定时更新。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#Version:1.0</span><br><span class="line">#Author:zzl</span><br><span class="line">#Automatically renew Let&#39;s Encrypt certificates</span><br><span class="line">#A cron job will run this shell script everyday</span><br><span class="line">i&#x3D;0</span><br><span class="line">while [[ $i -lt 10]]</span><br><span class="line">do</span><br><span class="line">  let &quot;i++&quot;</span><br><span class="line">  if [ $(ps -C nginx --no-header | wc -l) -ne 0];then</span><br><span class="line">    service nginx stop</span><br><span class="line">    sleep 3s</span><br><span class="line">    if [ $(ps -C nginx --no-header | wc -l) -eq 0];then</span><br><span class="line">      break</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">certbot renew </span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>或者直接用certbot renew command，详情如下<br>        <strong><a href="https://certbot.eff.org/docs/using.html?highlight=hooks#renewing-certificates" target="_blank" rel="noopener">Certbot documentation on renewing certificates</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;vps科学上网用的Let’sEncrypt免费证书，有效期一般是3个月，需要定期更新。写个脚本，定时更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>shell脚本检查nginx服务状态</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/04/08/shell%E8%84%9A%E6%9C%AC%E6%A3%80%E6%9F%A5nginx%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/04/08/shell%E8%84%9A%E6%9C%AC%E6%A3%80%E6%9F%A5nginx%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/</id>
    <published>2021-04-08T10:35:00.000Z</published>
    <updated>2021-04-08T10:36:20.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有的时候我们需要对某个服务状态进行监控，下面就是个脚本例子。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;&#96;ps -C nginx --no-header |wc -l&#96;</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    service nginx start</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="脚本解析"><a href="#脚本解析" class="headerlink" title="脚本解析"></a>脚本解析</h3><p>以上是通过进程判断，也可以通过端口判断，如netstat -nlpt | grep nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@newyork ~]# netstat -nlpt | grep nginx</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      8801&#x2F;nginx: master</span><br></pre></td></tr></table></figure><p>以下，以进程为例详解，ps -C nginx –no-header<br>这里涉及ps 的用法，我们一般用ps查看相关进程，一般都是用ps -ef | grep XX 或 ps -aux| grep XX 的模式<br>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root      8801     1  0 09:06 ?        00:00:00 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">root      8802  8801  0 09:06 ?        00:00:00 nginx: worker process</span><br><span class="line">root     11660  5532  0 09:55 pts&#x2F;1    00:00:00 grep --color&#x3D;auto nginx</span><br></pre></td></tr></table></figure><p>但是这样通常都会覆盖一个grep的进程。</p><p>我们可以用ps -ef|grep nginx|grep -v grep的方式排除grep的进程，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@newyork ~]# ps -ef|grep nginx|grep -v grep</span><br><span class="line">root      8801     1  0 09:06 ?        00:00:00 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">root      8802  8801  0 09:06 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure><p>也可以直接用ps -C 或ps -c 的方式， -C 后面接命令的名字（推荐） ，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ps -C nginx</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  8801 ?        00:00:00 nginx</span><br><span class="line">  8802 ?        00:00:00 nginx</span><br></pre></td></tr></table></figure><p>–no-header 就是去挑title,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon ~]# ps -C nginx --no-header</span><br><span class="line"> 8801 ?        00:00:00 nginx</span><br><span class="line"> 8802 ?        00:00:00 nginx</span><br></pre></td></tr></table></figure><p>wc -l 这个很熟悉了，行数计算</p><p>所以用这种方式可判断，如果<br>ps -C nginx –no-header|wc -l</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">值为0，即代表服务未启动</span><br><span class="line">值为非0，即代表服务已启动</span><br></pre></td></tr></table></figure><p>最后，killall keepalived 这个是以服务名称杀死进程，日常中也用的挺多的</p><p>上面那段完整的脚本意思即为：<br>判断nginx 服务是否启动<br>如果未启动，执行启动命令<br>再次判断，如果启动失败，关掉keepalived，进入从节点</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有的时候我们需要对某个服务状态进行监控，下面就是个脚本例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://blog.zhangzonglinagain.xyz/categories/shell/"/>
    
    
      <category term="shell" scheme="http://blog.zhangzonglinagain.xyz/tags/shell/"/>
    
  </entry>
  
</feed>
