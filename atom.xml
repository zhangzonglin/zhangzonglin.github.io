<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2023-02-26T15:15:00.217Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅析 Java Stream 实现原理</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/26/%E6%B5%85%E6%9E%90-Java-Stream-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/26/%E6%B5%85%E6%9E%90-Java-Stream-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-26T14:27:05.000Z</published>
    <updated>2023-02-26T15:15:00.217Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/CarpenterLee/p/6637118.html" target="_blank" rel="noopener">深入理解Java Stream流水线</a>、<a href="https://zhuanlan.zhihu.com/p/47478339?utm_id=0" target="_blank" rel="noopener">浅析 Java Stream 实现原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/CarpenterLee/p/6637118.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解Java Stream流水线&lt;/a&gt;、&lt;a href=&quot;https://zhua
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java 泛型擦除</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/</id>
    <published>2023-02-24T20:00:28.000Z</published>
    <updated>2023-02-24T20:03:26.985Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/hongdada/p/13993251.html" target="_blank" rel="noopener">Java 泛型擦除 </a></p><p>Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。<br>例如：List<String> 和 List<Integer> 在编译后都变成 List。<br>  <a id="more"></a></Integer></String></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hongdada/p/13993251.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 泛型擦除 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。&lt;br&gt;例如：List&lt;String&gt; 和 List&lt;Integer&gt; 在编译后都变成 List。&lt;br&gt;&lt;/Integer&gt;&lt;/String&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java 内部类与实例化</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/25/java-%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96/</id>
    <published>2023-02-24T19:55:03.000Z</published>
    <updated>2023-02-24T21:27:12.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_47552600/article/details/106888302" target="_blank" rel="noopener">Java内部类基本介绍、如何实例化内部类和如何调用外部类属性和方法</a>、<a href="https://blog.csdn.net/qq_28214047/article/details/53229331" target="_blank" rel="noopener">java内部类的实例化</a>、<a href="https://zhuanlan.zhihu.com/p/61735448" target="_blank" rel="noopener">内部类和静态内部类的区别</a>、<a href="https://blog.csdn.net/naoguoteng/article/details/124177958?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&utm_relevant_index=4" target="_blank" rel="noopener">内部类与外部类之间的访问</a></p><p>局部内部类访问外部类的局部变量，局部变量必须用final修饰，使之成为常量.</p><a id="more"></a><p>为什么呢? 因为局部变量会随着方法的调用完毕而消失，这个时候，局部对象并没有立马从堆内存中消失，还要使用那个变量。为了让数据还能继续被使用，就用final修饰，这样，在堆内存里面存储的其实是一个常量值。(JDK1.8之后，final会默认加上)  <a href="https://blog.csdn.net/qq_38238296/article/details/83315263" target="_blank" rel="noopener">局部内部类访问局部变量时，变量必须用final修饰</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_47552600/article/details/106888302&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java内部类基本介绍、如何实例化内部类和如何调用外部类属性和方法&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/qq_28214047/article/details/53229331&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java内部类的实例化&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/p/61735448&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内部类和静态内部类的区别&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/naoguoteng/article/details/124177958?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-124177958-blog-107604508.pc_relevant_recovery_v2&amp;utm_relevant_index=4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内部类与外部类之间的访问&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;局部内部类访问外部类的局部变量，局部变量必须用final修饰，使之成为常量.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>interface.super.method()</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/20/Parentinterface-super-method/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/20/Parentinterface-super-method/</id>
    <published>2023-02-19T16:30:32.000Z</published>
    <updated>2023-02-19T16:41:29.541Z</updated>
    
    <content type="html"><![CDATA[<p>看到类A有个方法，其中有一句 interface.super.method(),interface是该class实现的接口，method是interface的default method。</p><a id="more"></a><p>在java8里，这个用法主要是应对此场景：该类实现了多个接口，每个接口都有default method，并且它们的signature类似，此时该类调用接口的default method时，就要特别指出用的是哪个接口的。</p><p>Consider the example about computer-controlled cars that can now fly. You have two interfaces (OperateCar and FlyCar) that provide default implementations for the same method, (startEngine):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface OperateCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    default public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        &#x2F;&#x2F; Implementation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public interface FlyCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    default public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        &#x2F;&#x2F; Implementation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A class that implements both OperateCar and FlyCar must override the method startEngine. You could invoke any of the of the default implementations with the super keyword.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class FlyingCar implements OperateCar, FlyCar &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    public int startEngine(EncryptedKey key) &#123;</span><br><span class="line">        FlyCar.super.startEngine(key);</span><br><span class="line">        OperateCar.super.startEngine(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The name preceding super (in this example, FlyCar or OperateCar) must refer to a direct superinterface that defines or inherits a default for the invoked method. This form of method invocation is not restricted to differentiating between multiple implemented interfaces that contain default methods with the same signature. You can use the super keyword to invoke a default method in both classes and interfaces.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到类A有个方法，其中有一句 interface.super.method(),interface是该class实现的接口，method是interface的default method。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringMVC工作原理</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/SpringMVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/SpringMVC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2023-02-19T11:10:14.000Z</published>
    <updated>2023-02-19T11:13:18.761Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7139807630024769549" target="_blank" rel="noopener">深入理解SpringMVC工作原理</a></p><a id="more"></a><p><img src="/images/pasted-61.png" alt="upload successful"></p><blockquote><ul><li>用户发送请求至会先进入DispatcherServlet控制器进行相应处理。</li><li>DispatcherServlet会调用HandlerMapping根据请求路径查找Handler。</li><li>处理器映射器找到具体的处理器后，生成Handler对象及Handler拦截器（如果有则生成），然后返回给DispatcherServlet。</li><li>DispatcherServlet紧接着会调用HandlerAdapter，准备执行Handler。</li><li>HandlerAdapter底层会利用反射机制，对前面生成的Handler对象进行执行。</li><li>执行完对应的Java方法后，HandlerAdapter会得到一个ModelAndView对象。</li><li>HandlerAdapter将ModelAndView再返回给DispatcherServlet控制器。</li><li>DisPatcherServlet再调用ViewReslover，并将ModelAndView传递给它。</li><li>ViewReslover视图解析器开始解析ModelAndView并返回解析出的View视图。</li><li>解析出View视图后，对视图进行数据渲染（即将模型数据填充至视图中）。</li><li>DispatcherServlet最终将渲染好的View视图响应给用户浏览器。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7139807630024769549&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解SpringMVC工作原理&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu miss Settings</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/ubuntu-miss-Setting/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/ubuntu-miss-Setting/</id>
    <published>2023-02-19T05:10:08.000Z</published>
    <updated>2023-02-19T05:12:31.282Z</updated>
    
    <content type="html"><![CDATA[<p>清理磁盘空间，删了一大堆有的没的，不知道误删了哪块儿，系统的Settings没了,重新安装gnome-control-center即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall gnome-control-center</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;清理磁盘空间，删了一大堆有的没的，不知道误删了哪块儿，系统的Settings没了,重新安装gnome-control-center即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webflux mysql</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/19/webflux-mysql/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/19/webflux-mysql/</id>
    <published>2023-02-18T19:39:53.000Z</published>
    <updated>2023-02-18T19:46:56.972Z</updated>
    
    <content type="html"><![CDATA[<p>在熟悉webflux，看看跟vertx的区别，配置数据库的时候，发现项目跑不起来</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">R2DBC connection pooling configuration should be provided by either the spring.r2dbc.pool.* properties or the spring.r2dbc.url property but both have been used.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your configuration so that R2DBC connection pooling is configured using either the spring.r2dbc.url property or the spring.r2dbc.pool.* properties</span><br></pre></td></tr></table></figure><p>application.properties如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8088</span><br><span class="line"></span><br><span class="line">#USE MYSQL</span><br><span class="line">spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dev?useSSL&#x3D;false</span><br><span class="line">spring.r2dbc.username&#x3D;root</span><br><span class="line">spring.r2dbc.password&#x3D;12345678</span><br><span class="line">spring.r2dbc.pool.enabled&#x3D;true</span><br><span class="line">spring.r2dbc.pool.initial-size&#x3D;5</span><br><span class="line">spring.r2dbc.pool.max-size&#x3D;20</span><br><span class="line">spring.r2dbc.pool.max-idle-time&#x3D;30m</span><br><span class="line">spring.r2dbc.pool.validation-query&#x3D;SELECT 1</span><br><span class="line"></span><br><span class="line">#logging.level.org.springframework.data.r2dbc&#x3D;DEBUG</span><br><span class="line">logging.level.org.springframework&#x3D;DEBUG</span><br></pre></td></tr></table></figure><p>后面发现把spring.r2dbc.pool…注释掉就跑起来了，原来是spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;localhost:3306&#x2F;dev?useSSL&#x3D;false中已经有了pool的配置，把url里的pool去掉，下面pool的配置不动就可以了，记录一下这个错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在熟悉webflux，看看跟vertx的区别，配置数据库的时候，发现项目跑不起来&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu20.04 mysql change data directory</title>
    <link href="http://blog.zhangzonglinagain.xyz/2023/02/18/ubuntu20-04-install-mysql-and-change-data-dir/"/>
    <id>http://blog.zhangzonglinagain.xyz/2023/02/18/ubuntu20-04-install-mysql-and-change-data-dir/</id>
    <published>2023-02-18T13:09:32.000Z</published>
    <updated>2023-02-18T14:03:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>安装mysql，主要是修改data directory。</p><a id="more"></a><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><h3 id="change-data-directory"><a href="#change-data-directory" class="headerlink" title="change data directory"></a>change data directory</h3><h4 id="Moving-the-MySQL-Data-Directory"><a href="#Moving-the-MySQL-Data-Directory" class="headerlink" title="Moving the MySQL Data Directory"></a>Moving the MySQL Data Directory</h4><p>First, shut down mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><p>Now that the server is shut down, you can copy the existing database directory, &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;, to the new location, &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data, with rsync. Using the -a flag preserves the permissions and other directory properties, while-v provides verbose output so you can follow the progress:</p><blockquote><p>Note: Be sure there is a trailing slash on the directory, which may be added if you use  tab completion. When there’s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -av &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data</span><br></pre></td></tr></table></figure><p>Once the rsync command is complete, rename the current folder with a .bak extension and keep it until you’ve confirmed the move was successful. By renaming it, you’ll avoid confusion that could arise from files in both the new and the old location:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;mysql &#x2F;var&#x2F;lib&#x2F;mysql.bak</span><br></pre></td></tr></table></figure><p>Now you’re ready to proceed with the next step and begin configuration.</p><h4 id="Pointing-to-the-New-Data-Location"><a href="#Pointing-to-the-New-Data-Location" class="headerlink" title="Pointing to the New Data Location"></a>Pointing to the New Data Location</h4><p>MySQL has several ways to override configuration values. By default, the datadir is set to <em>&#x2F;var&#x2F;lib&#x2F;mysql</em> in the <em>&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</em> file. Edit this file in your preferred text editor to reflect the new data directory. Here we’ll use vim:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>Find the line that begins with datadir&#x3D;. Uncomment the line by deleting the pound sign (#) and change the path to reflect the new location. In this case, the updated file(&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf) contents will be as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datadir &#x3D; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data</span><br></pre></td></tr></table></figure><p>Once you’ve made this update, save and exit the file.  Now it’s almost time to bring up MySQL again, but before that, there’s one more thing to configure in order to be successful.</p><h4 id="Configuring-AppArmor-Access-Control-Rules"><a href="#Configuring-AppArmor-Access-Control-Rules" class="headerlink" title="Configuring AppArmor Access Control Rules"></a>Configuring AppArmor Access Control Rules</h4><p>In this step, you need to tell AppArmor to let MySQL write to the new directory by creating an alias between the default directory and the new location. AppArmor is a security module in the Linux kernel that allows system administrators to restrict program capabilities through program profiles, rather than users themselves. Start by opening up and editing the AppArmor alias file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;apparmor.d&#x2F;tunables&#x2F;alias</span><br></pre></td></tr></table></figure><p>At the bottom of the file, uncomment the following line and add the alias rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; -&gt; &#x2F;mnt&#x2F;Secert&#x2F;ubuntu-mysql-data&#x2F;,</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note: Don’t miss the last comma(,)</strong></p></blockquote><p>When you’re finished, save and exit the file.</p><p>For the changes to take effect, restart AppArmor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apparmor</span><br></pre></td></tr></table></figure><blockquote><p>Note: If you skipped the AppArmor configuration step, you will receive the following error message:</p><blockquote><p>Output<br>Job for mysql.service failed because the control process<br>exited with error code. See “systemctl status mysql.service”<br>and “journalctl -xe” for details.</p></blockquote><p>Since this message doesn’t make an explicit connection between AppArmor and the data directory, this error can take some time to figure out.</p></blockquote><p>Once you’ve properly configured AppArmor, you can move on to the next step.</p><h4 id="Restarting-MySQL"><a href="#Restarting-MySQL" class="headerlink" title="Restarting MySQL"></a>Restarting MySQL</h4><p>由于我的ubuntu安装的是mysql8.0.32，脚本跟下面的并不一致(没用写死&#x2F;var&#x2F;lib&#x2F;mysql的方式判断是否data dir存在)，也就没有碰到下面的错误，直接就重启了，下面脚本的部分仅供参考。</p><p>Now it’s time to start MySQL. If you do, however, you’ll run into another error. Instead of an AppArmor issue, this error is caused by mysql-systemd-start, a script that supports managing MySQL through systemd. You can inspect this script with the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start</span><br></pre></td></tr></table></figure><p>This script checks for the existence of either a directory, -d, or a symbolic link, -L, that matches the default data directory path. If it doesn’t find either of these, the script(&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start) will trigger an error and prevent MySQL from starting:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if [ ! -d &#x2F;var&#x2F;lib&#x2F;mysql ] &amp;&amp; [ ! -L &#x2F;var&#x2F;lib&#x2F;mysql ]; then</span><br><span class="line"> echo &quot;MySQL data dir not found at &#x2F;var&#x2F;lib&#x2F;mysql. Please create one.&quot;</span><br><span class="line"> exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -d &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql ] &amp;&amp; [ ! -L &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql ]; then</span><br><span class="line"> echo &quot;MySQL system database not found. Please run mysql_install_db tool.&quot;</span><br><span class="line"> exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>After you’ve inspected this file, close it without making any changes.</p><p>Since you need either an appropriate directory or symbolic link to start the server, you must create the minimal directory structure to pass the script’s environment check:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql -p</span><br></pre></td></tr></table></figure><p>Now you’re ready to start MySQL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p>Confirm MySQL is running by checking the status:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><blockquote><p>Output<br>● mysql.service - MySQL Community Server<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset:&gt;<br>     Active: active (running) since Wed 2022-03-23 20:51:18 UTC; 4s ago<br>    Process: 17145 ExecStartPre&#x3D;&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start pre (code&#x3D;&gt;<br>   Main PID: 17162 (mysqld)<br>     Status: “Server is operational”<br>      Tasks: 38 (limit: 1132)<br>     Memory: 376.7M<br>     CGroup: &#x2F;system.slice&#x2F;mysql.service<br>             └─17162 &#x2F;usr&#x2F;sbin&#x2F;mysqld</p></blockquote><p>To ensure that the new data directory is indeed in use, start the MySQL monitor:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u sammy -p</span><br></pre></td></tr></table></figure><p>Now query for the value of the data directory again:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@datadir;</span><br><span class="line">Output</span><br><span class="line">+----------------------------+</span><br><span class="line">| @@datadir                  |</span><br><span class="line">+----------------------------+</span><br><span class="line">| &#x2F;mnt&#x2F;volume-nyc1-01&#x2F;mysql&#x2F; |</span><br><span class="line">+----------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>After you’ve restarted MySQL and confirmed that it’s using the new location, take the opportunity to ensure that your database is fully functional. Once you’ve finished, exit the database as in the following and return to the command prompt:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>Now that you’ve verified the integrity of any existing data, you can remove the backup data directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -Rf &#x2F;var&#x2F;lib&#x2F;mysql.bak</span><br></pre></td></tr></table></figure><p>Then restart MySQL one final time:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>And finally, confirm it’s working as expected by checking the status:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure><blockquote><p>Output<br>● mysql.service - MySQL Community Server<br>     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysql.service; enabled; vendor preset:&gt;<br>     Active: active (running) since Wed 2022-03-23 20:53:03 UTC; 4s ago<br>    Process: 17215 ExecStartPre&#x3D;&#x2F;usr&#x2F;share&#x2F;mysql&#x2F;mysql-systemd-start pre (code&#x3D;&gt;<br>   Main PID: 17234 (mysqld)<br>     Status: “Server is operational”<br>      Tasks: 38 (limit: 1132)<br>     Memory: 368.9M<br>     CGroup: &#x2F;system.slice&#x2F;mysql.service<br>             └─17234 &#x2F;usr&#x2F;sbin&#x2F;mysqld</p></blockquote><p>If the Active line states active(running) this confirms that MySQL is working.</p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p><a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-20-04" target="_blank" rel="noopener">原文链接</a></p><p>In this tutorial, you learned how to move MySQL’s data directory to a new location and update Ubuntu’s AppArmor access control lists to accommodate the adjustment. Although we were using a block storage device, the instructions here should be suitable for redefining the location of the data directory regardless of the underlying technology.</p><p>For more information on managing MySQL’s data directories, check out the following sections in the official MySQL documentation:</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/data-directory.html" target="_blank" rel="noopener">The MySQL Data Directory</a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/multiple-data-directories.html" target="_blank" rel="noopener">Setting Up Multiple Data Directories</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装mysql，主要是修改data directory。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SQL语句的执行顺序</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/12/07/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/12/07/SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-12-07T15:31:52.000Z</published>
    <updated>2022-12-07T19:50:42.482Z</updated>
    
    <content type="html"><![CDATA[<p>Logical Query Processing Phases in Brief—《Microsoft SQL Server 2008技术内幕T-SQL语言基础.pdf》p27</p><a id="more"></a><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>  The FROM phase identifi es the query’s source tables and processes table operators. Each table operator applies a series of subphases. For example, the phases involved in a join are (1-J1) Cartesian Product, (1-J2) ON Filter, (1-J3) Add Outer Rows. The FROM phase generates virtual table VT1. </p><h4 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a><em>Cartesian Product</em></h4><p>This phase performs a Cartesian product (cross join) between the two tables involved in the table operator, generating VT1-J1. </p><h4 id="ON-Filter"><a href="#ON-Filter" class="headerlink" title="ON Filter"></a><em>ON Filter</em></h4><p>This phase fi lters the rows from VT1-J1 based on the predicate that appears in the ON clause (<on_predicate>). Only rows for which the predicate evaluates to TRUE are inserted into VT1-J2.</on_predicate></p><h4 id="Add-Outer-Rows"><a href="#Add-Outer-Rows" class="headerlink" title="Add Outer Rows"></a><em>Add Outer Rows</em></h4><p>If OUTER JOIN is specifi ed (as opposed to CROSS JOIN or INNER JOIN), rows from the preserved table or tables for which a match was not found are added to the rows from VT1-J2 as outer rows, generating VT1-J3.</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><p>This phase fi lters the rows from VT1 based on the predicate that appears in the WHERE clause (<where_predicate>). Only rows for which the predicate evaluates to TRUE are inserted into VT2. </where_predicate></p><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><p>This phase arranges the rows from VT2 in groups based on the column list specifi ed in the GROUP BY clause, generating VT3. Ultimately, there will be one result row per group. </p><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>This phase fi lters the groups from VT3 based on the predicate that appears in the HAVING clause (<having_predicate>). Only groups for which the predicate evaluates to TRUE are inserted into VT4. </having_predicate></p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p>This phase processes the elements in the SELECT clause, generating VT5. </p><h4 id="Evaluate-Expressions"><a href="#Evaluate-Expressions" class="headerlink" title="Evaluate Expressions"></a><em>Evaluate Expressions</em></h4><p>This phase evaluates the expressions in the SELECT list, generating VT5-1. </p><h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a><em>DISTINCT</em></h4><p>This phase removes duplicate rows from VT5-1, generating VT5-2. </p><h4 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a><em>TOP</em></h4><p>This phase fi lters the specifi ed top number or percentage of rows from VT5-2 based on the logical ordering defi ned by the ORDER BY clause, generating the table VT5-3. </p><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><p>This phase sorts the rows from VT5-3 according to the column list specifi ed in the ORDER BY clause, generating the cursor VC6.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logical Query Processing Phases in Brief—《Microsoft SQL Server 2008技术内幕T-SQL语言基础.pdf》p27&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>centos 命令补全失效(硬盘满了)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/12/04/centos-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8%E5%A4%B1%E6%95%88-%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/12/04/centos-%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8%E5%A4%B1%E6%95%88-%E7%A1%AC%E7%9B%98%E6%BB%A1%E4%BA%86/</id>
    <published>2022-12-04T14:37:32.000Z</published>
    <updated>2022-12-04T19:08:13.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tab补全失效"><a href="#Tab补全失效" class="headerlink" title="Tab补全失效"></a>Tab补全失效</h3><p>登录服务器，cd 相应路径按Tab补全时，提示*-bash: cannot create temp file for here-document: No space left on device*。</p><a id="more"></a><p>如图所示：<br><img src="/images/pasted-52.png" alt="upload successful"><br>谷歌查询是硬盘满了。df命令查看，果然如此：</p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>然后用du命令查看可以目录</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>发现可以目录&#x2F;var &#x2F;app &#x2F;sftproot,继续用du命令挨个查看，最后发现&#x2F;var&#x2F;log目录占用12G</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>进入log继续du加sort排序查看(ll -h也可)</p><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>就是这几个messages文件占了10多G，且都是最近产生的，随便打开进去一看都是如下内容：</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><p>是crond产生的垃圾日志，不管它，先来个重启大法<em>service crond stop</em>、<em>service crond start</em>，再瞧问题依旧。谷歌之，<em>No configuration file found at &#x2F;root&#x2F;.esmtprc or &#x2F;etc&#x2F;esmtprc</em>,没找到问题原因，只看到个解决方法 <a href="https://www.axinblog.com/2022/02/16/Linux-%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/" target="_blank" rel="noopener">Linux 日志清理</a>，先暂且安装重启crond，记下来以观后效，明天再查…</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tab补全失效&quot;&gt;&lt;a href=&quot;#Tab补全失效&quot; class=&quot;headerlink&quot; title=&quot;Tab补全失效&quot;&gt;&lt;/a&gt;Tab补全失效&lt;/h3&gt;&lt;p&gt;登录服务器，cd 相应路径按Tab补全时，提示*-bash: cannot create temp file for here-document: No space left on device*。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java内存使用情况查看工具(jmap,jinfo,jstack...)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/07/02/Java%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/07/02/Java%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7/</id>
    <published>2022-07-02T10:43:19.000Z</published>
    <updated>2022-12-04T19:29:57.085Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/hellozhxy/article/details/80496550" target="_blank" rel="noopener">Java内存使用情况查看工具</a>、或者直接采用阿里的开源工具<a href="https://developer.aliyun.com/article/764933" target="_blank" rel="noopener">Java 线上问题排查神器 Arthas 快速上手与原理浅谈</a>&amp;&amp;<a href="https://cloud.tencent.com/developer/article/1534894" target="_blank" rel="noopener">Arthas - Java 线上问题定位处理的终极利器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hellozhxy/article/details/80496550&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java内存使用情况查看工具&lt;/a&gt;、或者直接采用阿里的开源工具&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6中js的运算符（?.、?:、? ?、? ?=、）</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/06/25/ES6%E4%B8%ADjs%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%E3%80%81-%E3%80%81-%E3%80%81-%E3%80%81%EF%BC%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/06/25/ES6%E4%B8%ADjs%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-%E3%80%81-%E3%80%81-%E3%80%81-%E3%80%81%EF%BC%89/</id>
    <published>2022-06-25T07:50:33.000Z</published>
    <updated>2022-07-15T20:58:25.094Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ShIcily/article/details/121673976" target="_blank" rel="noopener">ES6中js的运算符（?.、?:、? ?、? ?&#x3D;、）</a>、<a href="https://blog.csdn.net/sinat_36146776/article/details/112170829" target="_blank" rel="noopener">JavaScript表达式和运算符之：逻辑或赋值（||&#x3D; ），逻辑空赋值（??&#x3D;） ，逻辑与赋值（&amp;&amp;&#x3D;），空值合并操作符（??），可选链式操作符（?.）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ShIcily/article/details/121673976&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ES6中js的运算符（?.、?:、? ?、? ?&amp;#x3D;、）&lt;/a&gt;、&lt;a 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring中@Import的各种用法以及ImportAware接口</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/05/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bsynchronized%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/05/15/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bsynchronized%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-05-14T17:05:42.000Z</published>
    <updated>2022-05-18T21:49:00.657Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/640a339474fb" target="_blank" rel="noopener">Spring中@Import的各种用法以及ImportAware接口</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/640a339474fb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring中@Import的各种用法以及ImportAware接口&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java 内部类详解</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/05/15/Java-%E5%86%85%E9%83%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/05/15/Java-%E5%86%85%E9%83%A8%E7%B1%BB%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-05-14T16:44:56.000Z</published>
    <updated>2022-05-14T16:45:09.141Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/java-inner-class-intro.html" target="_blank" rel="noopener">Java 内部类详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/java-inner-class-intro.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java 内部类详解&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网络抓包常用命令</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/05/04/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/05/04/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-05-04T08:09:58.000Z</published>
    <updated>2022-05-04T08:10:13.476Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://plantegg.github.io/2022/01/01/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" target="_blank" rel="noopener">网络抓包常用命令</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://plantegg.github.io/2022/01/01/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>IDEA中的后缀补全</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/04/24/IDEA%E4%B8%AD%E7%9A%84%E5%90%8E%E7%BC%80%E8%A1%A5%E5%85%A8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/04/24/IDEA%E4%B8%AD%E7%9A%84%E5%90%8E%E7%BC%80%E8%A1%A5%E5%85%A8/</id>
    <published>2022-04-23T17:57:53.000Z</published>
    <updated>2022-04-23T17:58:02.069Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/correlate/article/details/109578810" target="_blank" rel="noopener">IDEA中的后缀补全</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/correlate/article/details/109578810&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IDEA中的后缀补全&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hard Links VS Soft Links in Linux: What’s the Difference</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/04/23/Hard-Links-VS-Soft-Links-in-Linux-What%E2%80%99s-the-Difference/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/04/23/Hard-Links-VS-Soft-Links-in-Linux-What%E2%80%99s-the-Difference/</id>
    <published>2022-04-23T15:12:15.000Z</published>
    <updated>2022-04-23T15:27:08.837Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/techtofreedom/hard-links-vs-soft-links-in-linux-whats-the-difference-bbd3dfbe24f7" target="_blank" rel="noopener">Hard Links VS Soft Links in Linux: What’s the Difference</a></p><a id="more"></a><p>总结：</p><ul><li>A hard link is a link pointing to an existing file’s inode, One or more hard links for an existing file can be created, and they have the <strong>same  inode number</strong>. </li><li>A soft link is a pointer to a file or directory.Unlike a hard link, a soft link has its own inode and inode number. </li><li>A hard link: <ul><li>A file can be accessed with different filenames.</li><li>Modifications of a file by one of its filenames will affect all filenames.</li><li>Deleting one filename does not affect access to other filenames.</li></ul></li><li>A soft link points to another existing file’s content. This means that a soft link depends on its “host file” to exist. If its host file is deleted, opening the soft link will report an error: “No such file or directory”. (This is totally different with hard links.)</li><li>Hard links, by the way, <strong>cannot</strong> be created for directories and files on a different filesystem, cause different filesystems manage their own inodes.</li><li>A soft link is a pointer and there’s nothing about inodes, a soft link can point to a file or a directory on a different filesystem or partition.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://medium.com/techtofreedom/hard-links-vs-soft-links-in-linux-whats-the-difference-bbd3dfbe24f7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hard Links VS Soft Links in Linux: What’s the Difference&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ssh 复用(避免重输密码)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/04/10/ssh-%E5%A4%8D%E7%94%A8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/04/10/ssh-%E5%A4%8D%E7%94%A8/</id>
    <published>2022-04-09T20:14:44.000Z</published>
    <updated>2022-04-09T20:20:20.280Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/int32bit/notes/blob/master/linux/%E8%AE%BE%E7%BD%AEssh%E8%BF%9E%E6%8E%A5%E4%BC%9A%E8%AF%9D%E5%A4%8D%E7%94%A8.md" target="_blank" rel="noopener">设置ssh连接会话复用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/int32bit/notes/blob/master/linux/%E8%AE%BE%E7%BD%AEssh%E8%BF%9E%E6%8E%A5%E4%BC%9A%E8%AF%9D%E5%A4%8D%E7%94%A8.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ulauncher</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/04/10/Ulauncher/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/04/10/Ulauncher/</id>
    <published>2022-04-09T18:13:58.000Z</published>
    <updated>2022-04-09T23:00:35.731Z</updated>
    
    <content type="html"><![CDATA[<p>Ulauncher(Application launcher for Linux)效率提升工具…</p><p><a href="https://ulauncher.io/#Download" target="_blank" rel="noopener">官网</a>、<a href="https://www.geeksforgeeks.org/how-to-install-ulauncher-in-ubuntu/" target="_blank" rel="noopener">How to Install Ulauncher in Ubuntu?</a>、<a href="https://www.makeuseof.com/install-ulauncher-on-linux/" target="_blank" rel="noopener">How to Install Extensions And Best Ulauncher Extensions</a>.<br>实测好用的插件：Terminal Runner(关机重启方便)、IpCopy（查看自己内网外网IP并复制）、Better file browser（文件浏览及搜索）、Translate（翻译。默认翻译成en，如果是英译汉格式为“tr :zh english”）、Calculate Anything</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ulauncher(Application launcher for Linux)效率提升工具…&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ulauncher.io/#Download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;、&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>重装ubuntu及win10引导修复</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/04/08/%E9%87%8D%E8%A3%85ubuntu%E5%8F%8Awin10%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/04/08/%E9%87%8D%E8%A3%85ubuntu%E5%8F%8Awin10%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</id>
    <published>2022-04-07T19:27:52.000Z</published>
    <updated>2022-04-07T20:06:51.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>人被杀就会死，ubuntu20果然崩溃了，起因似乎是重装搜狗输入法，卸载时autoremove不知删了哪个依赖，桌面死活进不去（oh,no,something went wrong警告），<a id="more"></a> 后面<em>Ctrl+Alt+F3</em>通过tty3登录，进去翻日志，一通装一通删，试了N次，发现把gnome-session删了，倒是能进桌面了，算了，直接转移数据，重装。切到win10系统，下载镜像、刻盘一气呵成，隐约记得以前用EasyBCD添加引导，下了个进去手贱，把WIN10的引导给删了,这时候才想起ubuntu新版本不用自己添加引导了~~. 幸亏U盘已经刻好，索性先重装ubuntu，再在ubuntu下，看看有什么方法恢复引导文件。装系统网上很多教程，倒是在ubuntu下刻盘，恢复win10引导值得记录一下（毕竟两个晚上的青春）。</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>度娘说，可以通过winPE，修复引导，所以第一步：下载镜像文件。国内镜像多坑爹，问问我那逝去的青春就知道了，直接谷歌救我命<a href="https://archive.org/details/wpe-64" target="_blank" rel="noopener">WinPE.iso</a>–!</p><h3 id="刻盘"><a href="#刻盘" class="headerlink" title="刻盘"></a>刻盘</h3><p>ubuntu下刻盘，看大部分推荐dd命令，用国内坑爹的镜像试了几次，不确定是哪儿的原因，反正开机进不去WinPE, 包括救我命的镜像，用该命令失败。后面还是用WoeUSB（采用命令行方式，GUI失败）成功</p><h4 id="安装WoeUSB"><a href="#安装WoeUSB" class="headerlink" title="安装WoeUSB"></a>安装WoeUSB</h4><p>在github上下载最新版本：<a href="https://github.com/WoeUSB/WoeUSB/releases/download/v5.2.4/woeusb-5.2.4.bash" target="_blank" rel="noopener">WoeUSB github</a></p><p>安装 WoeUSB-ng 的依赖项，和第一种方法要安装的依赖项是一样的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x woeusb-5.2.4.bash</span><br></pre></td></tr></table></figure><p>然后还需要安装一些依赖项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git p7zip-full python3-pip python3-wxgtk4.0 grub2-common grub-pc-bin wimtools</span><br></pre></td></tr></table></figure><p>现在就可以执行这个文件了 .&#x2F;woeusb-5.2.4.bash 可以看到命令提示，只需要制定一个windows镜像文件地址 和 u盘的位置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l #查看U盘</span><br><span class="line">umount &#x2F;dev&#x2F;sdb  #卸载u盘</span><br><span class="line">sudo mkfs.ntfs -F &#x2F;dev&#x2F;sdb #格式化U盘</span><br><span class="line">sudo .&#x2F;woeusb-5.2.4.bash --device &#39;WinPE.iso&#39;  &#x2F;dev&#x2F;sdb  --tgt-fs  NTFS #刻盘</span><br></pre></td></tr></table></figure><h3 id="WIN10-引导修复"><a href="#WIN10-引导修复" class="headerlink" title="WIN10 引导修复"></a>WIN10 引导修复</h3><p>拿着刻好的U盘，重新开机，狂按F12,进入WINPE，接来下的修复过程，严格参照下面的链接（C盘和D盘，我的也是反着的）<br><a href="https://blog.csdn.net/A_Sen_A/article/details/89545311" target="_blank" rel="noopener">win10 UEFI引导恢复</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;人被杀就会死，ubuntu20果然崩溃了，起因似乎是重装搜狗输入法，卸载时autoremove不知删了哪个依赖，桌面死活进不去（oh,no,something went wrong警告），&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
