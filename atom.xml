<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2022-03-16T18:27:04.506Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust copy 、move、clone</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/03/17/Rust-copy%E4%B8%8Emove%E8%AF%AD%E4%B9%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/03/17/Rust-copy%E4%B8%8Emove%E8%AF%AD%E4%B9%89/</id>
    <published>2022-03-16T17:37:00.000Z</published>
    <updated>2022-03-16T18:27:04.506Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rust-book.junmajinlong.com/ch6/02_move_copy.html" target="_blank" rel="noopener">Rust Copy语义</a></p><a id="more"></a><h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>比如下面的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let s1 &#x3D; String::from(&quot;hello&quot;);</span><br><span class="line">let s2 &#x3D; s1;</span><br></pre></td></tr></table></figure><p>上面已经分析过，值的所有权会从变量s1转移到变量s2，所有权的转移，涉及到的过程是拷贝到目标变量，同时重置原变量到未初始状态，整个过程就像是进行了一次数据的移动。但注意，上面示例中拷贝的是栈中的胖指针，而不是拷贝堆中的实际数据，因此这样的拷贝效率是相对较高的。</p><p>所有权转移之后，将只有新的所有者才会指向堆中的实际数据，而原变量将不再指向堆中实际数据，因此所有权转移之后仍然只有一个指针指向堆中数据。</p><p>Move不仅发生在变量赋值过程中，在函数传参、函数返回数据时也会Move，因此，如果将一个大对象(例如包含很多数据的数组，包含很多字段的struct)作为参数传递给函数，是否会让效率很低下？</p><p>按照上面的结论来说，确实如此。但Rust编译器会对Move语义的行为做出一些优化，简单来说，当数据量较大且不会引起程序正确性问题时，它会传递大对象的指针而非内存拷贝。</p><p>此外，对于胖指针类型的变量(如Vec、String)，即使发生了拷贝，其性能也不差，因为拷贝的只是它的胖指针部分。</p><p>总之，Move虽然发生了内存拷贝，但它的性能并不会太受影响。</p><p>此处部分结论参考：<em><a href="https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust" target="_blank" rel="noopener">https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust</a></em>。</p><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><strong>默认情况下，在将一个值保存到某个位置时总是进行值的移动(实际上是拷贝  如String 拷贝的值是指针)，使得只有目标位置才拥有这个值，而原始变量将变回未初始化状态，也就是暂时不可用的状态。这是Rust的移动语义</strong>。</p><p>Rust还有Copy语义，和Move语义几乎相同，唯一的区别是Copy后，原始变量仍然可用。</p><p>前面说过，Move实际上是进行了拷贝，只不过拷贝后让原始变量变回未初始化状态了，而Copy的行为，就是保留原始变量。</p><p>但Rust默认是使用Move语义，如果想要使用Copy语义，要求要拷贝的数据类型实现了Copy Trait。</p><p>例如，i32默认就已经实现了Copy Trait，因此它在进行所有权转移的时候，会自动使用Copy语义，而不是Move语义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x &#x3D; 3;   &#x2F;&#x2F; 3是原始数据类型，它直接存储在栈中，所以x变量的值是3，x拥有3</span><br><span class="line">let n &#x3D; x;   &#x2F;&#x2F; Copy x的值(即3)到变量n，n现在拥有一个3，但x仍然拥有自己的3</span><br></pre></td></tr></table></figure><p>Rust中默认实现了Copy Trait的类型，包括但不限于：</p><ul><li>所有整数类型，比如u32</li><li>所有浮点数类型，比如f64</li><li>布尔类型，bool，它的值是true和false</li><li>字符类型，char</li><li>元组，当且仅当其包含的类型也都是Copy的时候。比如(i32, i32)是Copy的，但(i32, String)不是</li><li>共享指针类型或共享引用类型</li></ul><p>对于那些没有实现Copy的自定义类型，可以手动去实现Copy(要求同时实现Clone)，方式很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#[derive(Copy, Clone)]</span><br><span class="line">struct Abc(i32, i32);</span><br></pre></td></tr></table></figure><p>下面是实现了Copy和未实现Copy时的一个对比示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#[derive(Debug)]</span><br><span class="line">struct Xyz(i32, i32);</span><br><span class="line"></span><br><span class="line">#[derive(Copy, Clone, Debug)]</span><br><span class="line">struct Def(i32, i32);</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">  let x &#x3D; Xyz(11, 22);</span><br><span class="line">  let y &#x3D; x;</span><br><span class="line">  &#x2F;&#x2F; println!(&quot;x: &#123;&#125;&quot;, x); &#x2F;&#x2F; 报错</span><br><span class="line">  println!(&quot;y: &#123;:?&#125;&quot;, y);</span><br><span class="line"></span><br><span class="line">  let d &#x3D; Def(33, 44);</span><br><span class="line">  let e &#x3D; d;</span><br><span class="line">  println!(&quot;d: &#123;:?&#125;&quot;, d);</span><br><span class="line">  println!(&quot;e: &#123;:?&#125;&quot;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-51.png" alt="upload successful"></p><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p>虽然实现Copy Trait可以让原变量继续拥有自己的值，但在某些需求下，不便甚至不能去实现Copy。这时如果想要继续使用原变量，可以使用clone()方法手动拷贝变量的数据，同时不会让原始变量变回未初始化状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">  let s1 &#x3D; String::from(&quot;hello&quot;);</span><br><span class="line">  &#x2F;&#x2F; 克隆s1，克隆之后，变量s1仍然绑定原始数据</span><br><span class="line">  let s2 &#x3D; s1.clone();</span><br><span class="line">  println!(&quot;&#123;&#125;,&#123;&#125;&quot;, s1, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但不是所有数据类型都可以进行克隆，只有那些实现了Clone Trait的类型才可以进行克隆(Trait类似于面向对象语言中的接口，如果不了解可先不管Trait是什么)，常见的数据类型都已经实现了Clone，因此它们可以直接使用clone()来克隆。</p><p>对于那些没有实现Clone Trait的自定义类型，需要手动实现Clone Trait。在自定义类型之前加上#[derive(Copy, Clone)]即可。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#[derive(Copy, Clone)]</span><br><span class="line">struct Abc(i32, i32);</span><br></pre></td></tr></table></figure><p>这样Abc类型的值就可以使用clone()方法进行克隆。</p><p>要注意Copy和Clone时的区别，如果不考虑自己实现Copy trait和Clone trait，而是使用它们的默认实现，那么：</p><p>Copy时，只拷贝变量本身的值，如果这个变量指向了其它数据，则不会拷贝其指向的数据<br>Clone时，拷贝变量本身的值，如果这个变量指向了其它数据，则也会拷贝其指向的数据<br>也就是说，Copy是浅拷贝，Clone是深拷贝，Rust会对每个字段每个元素递归调用clone()，直到最底部。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">  let vb0 &#x3D; vec![&quot;s1&quot;.to_string()];</span><br><span class="line">  let v &#x3D; vec![vb0];</span><br><span class="line">  println!(&quot;&#123;:p&#125;&quot;, &amp;v[0][0]);     &#x2F;&#x2F; 0x21c43a20c50</span><br><span class="line"></span><br><span class="line">  let vc &#x3D; v.clone();</span><br><span class="line">  println!(&quot;&#123;:p&#125;&quot;, &amp;vc[0][0]);  &#x2F;&#x2F; 0x21c43a20b70</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，使用Clone的默认实现时，clone()操作的性能是较低的。但可以自己实现自己的克隆逻辑，也不一定总是会效率低。比如Rc，它的clone用于增加引用计数，同时只拷贝少量数据，它的clone效率并不低。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://rust-book.junmajinlong.com/ch6/02_move_copy.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rust Copy语义&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="http://blog.zhangzonglinagain.xyz/categories/rust/"/>
    
    
      <category term="move" scheme="http://blog.zhangzonglinagain.xyz/tags/move/"/>
    
      <category term="copy" scheme="http://blog.zhangzonglinagain.xyz/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>Rust引用</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/03/17/Rust%E5%BC%95%E7%94%A8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/03/17/Rust%E5%BC%95%E7%94%A8/</id>
    <published>2022-03-16T17:07:00.000Z</published>
    <updated>2022-03-16T17:14:47.643Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rust-book.junmajinlong.com/ch3/07_reference_type.html" target="_blank" rel="noopener">Rust中的引用</a></p><a id="more"></a><h3 id="解引用"><a href="#解引用" class="headerlink" title="解引用"></a>解引用</h3><p>Rust绝大多数时候不会自动地解除引用。但在某些环境下，Rust会自动进行解引用。</p><p>自动解引用的情况有(结论先总结在此，混脸熟，以后涉及到时再来)：</p><ol><li><p>使用.操作符时(包括取属性值和方法调用)，会隐式地尽可能解除或创建多层引用</p></li><li><p>使用比较操作符时，若比较的两边是相同类型的引用，则会自动解除引用到它们的值然后比较<br>对于(1)，Rust会自动分析func()的参数，并在需要的时候自动创建或自动解除引用。例如以abc.func()有可能会自动转换为&amp;abc.func()，反之，&amp;abc.func()也有可能会自动转换为abc.func()。</p></li></ol><p>对于(2)，例如有引用类型的变量n，那么n &gt; &amp;30和*n &gt; 30的效果是一样的。</p><p>————————————————《rust入门秘籍》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://rust-book.junmajinlong.com/ch3/07_reference_type.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rust中的引用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="http://blog.zhangzonglinagain.xyz/categories/rust/"/>
    
    
      <category term="references" scheme="http://blog.zhangzonglinagain.xyz/tags/references/"/>
    
  </entry>
  
  <entry>
    <title>Rust是基于表达式的语言</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/03/16/rust-%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/03/16/rust-%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-03-15T17:04:00.000Z</published>
    <updated>2022-03-16T17:15:02.351Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rust-book.junmajinlong.com/ch1/01_expression.html" target="_blank" rel="noopener">Rust是基于表达式的语言</a></p><a id="more"></a><p>除了在表达式尾部加分号的代码是语句之外，还有另外一种情况的代码是语句而非表达式：<strong>用于声明或定义</strong>。例如let声明变量、fn定义函数、struct声明结构体等。</p><p>Rust很多地方都会结合表达式和语句来做变量赋值。例如，if结构也是一个表达式，所以它有返回值，可以将if的返回值赋值给变量，而<strong>它的返回值来自于它的大括号</strong>：当大括号最后执行的一条代码不加分号结尾时，该代码的计算结果就是if结构的返回值。</p><p>————————————————《rust入门秘籍》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://rust-book.junmajinlong.com/ch1/01_expression.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rust是基于表达式的语言&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="rust" scheme="http://blog.zhangzonglinagain.xyz/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>int&amp;Integer、 double&amp;Double&amp;BigDecimal</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/03/09/int%E5%92%8CInteger%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/03/09/int%E5%92%8CInteger%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-03-09T06:42:51.000Z</published>
    <updated>2022-03-10T14:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/guodongdidi/p/6953217.html" target="_blank" rel="noopener">int和Integer的区别</a>&nbsp;&nbsp;<a href="http://www.louisvv.com/archives/2514.html" target="_blank" rel="noopener">double、Double与BigDecimal</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/guodongdidi/p/6953217.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;int和Integer的区别&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http:/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>netstat 命令</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/02/15/netstat-%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/02/15/netstat-%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-14T18:23:00.000Z</published>
    <updated>2022-02-14T18:42:53.179Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntu|awk &#39;&#123;pring $5&#125;&#39;|cut -d : -f 1|sort|uniq -c</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>-n 显示数字IP, -t tcp连接, -u udp连接, -a 全部连接…</p><p><strong><a href="https://blog.csdn.net/qq_42014600/article/details/90372315" target="_blank" rel="noopener">netstat详解</a></strong></p><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>-F 指定分割符(如 awk -F: ), 如不显示指定字段分隔符，awk的默认字段分隔符为任意空白字符，包括制表符、空格符、换行符等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$0表示整行文本</span><br><span class="line">$1表示文本行中第一个数据字段</span><br><span class="line">$2表示文本行中第二个数据字段</span><br><span class="line">$n表示文本行中第n个数据字段</span><br></pre></td></tr></table></figure><p><strong><a href="https://blog.csdn.net/u010502101/article/details/81839519" target="_blank" rel="noopener">awk详解</a></strong></p><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>cut -[n]b file</p><p>cut -c file</p><p>cut -d[分隔符] -f[域] file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-b(bytes) ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</span><br><span class="line">-c(characters) ：以字符为单位进行分割。</span><br><span class="line">-d ：自定义分隔符，默认为制表符。</span><br><span class="line">-f(filed) ：与-d一起使用，指定显示哪个区域。</span><br><span class="line">-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的</span><br><span class="line">范围之内，该字符将被写出；否则，该字符将被排除。</span><br></pre></td></tr></table></figure><p><strong><a href="https://blog.csdn.net/u011003120/article/details/52190187" target="_blank" rel="noopener">cut用法</a></strong></p><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>　报告或删除文件中重复的行。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> -c, --count           在每行前加上表示相应行目出现次数的前缀编号</span><br><span class="line">-d, --repeated        只输出重复的行</span><br><span class="line">-D, --all-repeated[&#x3D;delimit-method    显示所有重复的行</span><br><span class="line">                      delimit-method&#x3D;&#123;none(default),prepend,separate&#125;</span><br><span class="line">                      以空行为界限</span><br><span class="line">-f, --skip-fields&#x3D;N   比较时跳过前N 列</span><br><span class="line">-i, --ignore-case     在比较的时候不区分大小写</span><br><span class="line">-s, --skip-chars&#x3D;N    比较时跳过前N 个字符</span><br><span class="line">-u, --unique          只显示唯一的行</span><br><span class="line">-z, --zero-terminated 使用&#39;\0&#39;作为行结束符，而不是新换行</span><br><span class="line">-w, --check-chars&#x3D;N   对每行第N 个字符以后的内容不作对照</span><br><span class="line">    --help            显示此帮助信息并退出</span><br><span class="line">    --version         显示版本信息并退出</span><br></pre></td></tr></table></figure></p><p> <strong><a href="https://www.cnblogs.com/ftl1012/p/uniq.html" target="_blank" rel="noopener">uniq详解</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -ntu|awk &amp;#39;&amp;#123;pring $5&amp;#125;&amp;#39;|cut -d : -f 1|sort|uniq -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhangzonglinagain.xyz/categories/linux/"/>
    
    
      <category term="linux command" scheme="http://blog.zhangzonglinagain.xyz/tags/linux-command/"/>
    
  </entry>
  
  <entry>
    <title>图解--函数调用过程及栈帧分析</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/02/11/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%A0%88%E5%B8%A7%E5%88%86%E6%9E%90/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/02/11/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%A0%88%E5%B8%A7%E5%88%86%E6%9E%90/</id>
    <published>2022-02-10T16:15:09.000Z</published>
    <updated>2022-02-10T16:27:51.268Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yishizuofei/article/details/78282958" target="_blank" rel="noopener">函数调用过程原理及函数栈帧分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yishizuofei/article/details/78282958&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数调用过程原理及函数栈帧分析&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue nginx 压缩</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/02/10/vue-nginx-%E5%8E%8B%E7%BC%A9/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/02/10/vue-nginx-%E5%8E%8B%E7%BC%A9/</id>
    <published>2022-02-10T08:42:00.000Z</published>
    <updated>2022-02-10T16:12:50.763Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://blog.csdn.net/qq_43363884/article/details/108195408" target="_blank" rel="noopener">vue打包时gzip压缩的两种方案</a></strong>  ,   &nbsp;&nbsp;<strong><a href="https://blog.csdn.net/github_38924695/article/details/108773173" target="_blank" rel="noopener">nginx中配置gzip_static on</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.csdn.net/qq_43363884/article/details/108195408&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue打包时gzip压缩的两种方案&lt;/a&gt;&lt;/stron
      
    
    </summary>
    
    
    
      <category term="vue" scheme="http://blog.zhangzonglinagain.xyz/tags/vue/"/>
    
      <category term="nginx" scheme="http://blog.zhangzonglinagain.xyz/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>rust --堆栈(内存)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/02/08/rust-%E7%9A%84%E5%A0%86%E6%A0%88-%E5%BC%95%E7%94%A8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/02/08/rust-%E7%9A%84%E5%A0%86%E6%A0%88-%E5%BC%95%E7%94%A8/</id>
    <published>2022-02-08T09:50:00.000Z</published>
    <updated>2022-02-08T10:28:58.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以<strong>创建某个变量的引用时，引用的是栈中的那个值</strong>.   </p><a id="more"></a><h4 id="Rust将哪些数据存放于栈中？"><a href="#Rust将哪些数据存放于栈中？" class="headerlink" title="Rust将哪些数据存放于栈中？"></a>Rust将哪些数据存放于栈中？</h4><p>Rust中各种类型的值默认都存储在栈中，除非显式地使用Box::new()将它们存放在堆上。</p><p>但数据要存放在栈中，要求其数据类型的大小已知。对于静态大小的类型，可直接存储在栈上。</p><p>例如如下类型的数据存放在栈中：</p><ul><li>裸指针(一个机器字长)、普通引用(一个机器字长)、胖指针(除了指针外还包含其他元数据信息，智能指针也是一种带有额外功能的胖指针，而胖指针实际上又是Struct结构)</li><li>布尔值</li><li>char</li><li>各种整数、浮点数</li><li>数组(Rust数组的元素数据类型和数组长度都是固定不变的)</li><li>元组</li></ul><p>对于动态大小的类型(如Vec、String)，则数据部分分布在堆中(被称为allocate buffer)，并在栈中留下胖指针(Struct方式实现)指向实际的数据，栈中的那个胖指针结构是静态大小的(换句话说，动态类型以Vec为例，Vec类型的值理应是那些连续的元素，但因为这样的连续内存的大小是不确定的，所以改变了它的行为，它的值是那个栈中的胖指针，而不是存储在allocatge buffer中的实际数据)。</p><p>以上分类需要注意几点：</p><ul><li>将栈中数据赋值给变量时，数据直接存放在栈中。比如i32类型的33，33直接存放在栈内，而不是在堆中存放33并在栈中存放指向33的指针</li><li>因为类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以<strong>创建某个变量的引用时，引用的是栈中的那个值</strong></li><li>有些数据是0字节的，不需要占用空间，比如()</li><li>尽管【容器】结构中(如数组、元组、Struct)可以存放任意数据，但保存在容器中的要么是原始类型的栈中值，要么是指向堆中数据的引用，所以这些容器类型的值也在栈中。例如，对于struct User {name: String}，name字段存储的是String类型的胖指针，String类型实际的数据则在堆中</li><li>尽管Box::new(T)可以将类型T的数据放入堆中，但Box类型本身是一个struct，它是一个胖指针(更严格地说是智能指针)，它在栈中</li></ul><p>实际上，对于理解来说，只有Box才能让数据存放到堆中，但对于实现上，只有调用alloc才能申请堆内存并将数据存放在堆中。比如，自己想实现一个类型，将某些数据明确存放在堆中，那么必须要在实现代码中调用alloc来分配堆内存，但同时，要实现的这个类型本身，它的值是在栈中的。</p><p>(5).Rust除了使用堆栈，还使用全局内存区(静态变量区和字面量区)。</p><p>Rust编译器会将全局内存区的数据直接嵌入在二进制程序文件中，当启动并加载程序时，嵌入在全局内存区的数据被放入内存的某个位置。</p><p>全局内存区的数据是编译期间就可确定的，且存活于整个程序运行期间。</p><p>字符串字面量、static定义的静态变量(相当于全局变量)都会硬编码嵌入到二进制程序的全局内存区。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">  let _s &#x3D; &quot;hello&quot;;     &#x2F;&#x2F; (1)</span><br><span class="line">  let _ss &#x3D; String::from(&quot;hello&quot;); &#x2F;&#x2F; (2)</span><br><span class="line">  let _arr &#x3D; [&quot;hello&quot;;3];    &#x2F;&#x2F; (3)</span><br><span class="line">  let _tuple &#x3D; (&quot;hello&quot;,);   &#x2F;&#x2F; (4)</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的几个变量都使用了字符串字面量，且使用的都是相同的字面量”hello”，在编译期间，它们会共用同一个”hello”，该”hello”会硬编码到二进制程序文件中。当程序被加载到内存时，该被放入到全局内存区，它在全局内存区有自己的内存地址，当运行到以上各行代码时：</p><ul><li>代码(1)、(3)、(4)，将根据地址取得其引用，并分别保存到变量_s、_arr各元素、_tuple元素中</li><li>代码(2)，将根据地址取得数据并将其拷贝到堆中(转换为Vec<u8>的方式存储，它是String类型的底层存储方式)</u8></li></ul><h4 id="Rust中允许使用const定义常量。"><a href="#Rust中允许使用const定义常量。" class="headerlink" title="Rust中允许使用const定义常量。"></a>Rust中允许使用const定义常量。</h4><p>常量将在编译期间直接以硬编码的方式内联(inline)插入到使用常量的地方。</p><p>所谓内联，即将它代表的值直接替换到使用它的地方。</p><p>比如，定义了常量ABC=33，在第100行和第300行处都使用了常量ABC，那么在编译期间，会将33硬编码到第100行和第300行处。</p><p>Rust中，除了const定义的常量会被内联，某些函数也可以被内联。将函数进行内联，表示将该函数对应的代码体直接展开并插入到调用该函数的地方，这样就没有函数调用的开销(比如没有调用函数时申请栈帧、在寄存器保存某些变量等的行为)，效率会更高一些。但只有那些频繁调用的短函数才适合被内联，并且内联会导致程序的代码膨胀。</p><p>原地址: <strong><a href="https://rust-book.junmajinlong.com/ch5/02_rust_mem.html" target="_blank" rel="noopener">Rust如何使用堆和栈</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以&lt;strong&gt;创建某个变量的引用时，引用的是栈中的那个值&lt;/strong&gt;.   &lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="http://blog.zhangzonglinagain.xyz/categories/rust/"/>
    
    
      <category term="引用" scheme="http://blog.zhangzonglinagain.xyz/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>mybatis mysql in (#{list}) 只能查询/删除第一条的问题</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/30/mybatis-mysql-in-list-%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2-%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/30/mybatis-mysql-in-list-%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2-%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-30T06:33:17.000Z</published>
    <updated>2021-12-30T06:33:44.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/do-your-best/p/9513194.html" target="_blank" rel="noopener">mysql in (#{list}) 只能查询/删除第一条的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/do-your-best/p/9513194.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mysql in (#{list}) 只能查询/删除第一条的问题&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你真的会用Gson吗?Gson使用指南（一）</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/23/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8Gson%E5%90%97-Gson%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/23/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8Gson%E5%90%97-Gson%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-12-23T15:58:30.000Z</published>
    <updated>2021-12-23T15:59:27.469Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.jianshu.com/p/e740196225a4" target="_blank" rel="noopener">你真的会用Gson吗?Gson使用指南（一）</a></strong>&nbsp;&nbsp;<strong><a href="https://blog.csdn.net/majalis_c/article/details/79801863?utm_term=gsonjsonobject%E8%BD%ACstring&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-79801863&spm=3001.4430" target="_blank" rel="noopener">Gson基本操作，JsonObject，JsonArray，String，JavaBean，List互转</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.jianshu.com/p/e740196225a4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你真的会用Gson吗?Gson使用指南（一）&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-12-17T15:21:08.000Z</published>
    <updated>2021-12-17T15:21:18.896Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/jpfss/p/9928747.html" target="_blank" rel="noopener">Java泛型详解：<T>和Class<T>的使用。泛型类，泛型方法的详细使用实例 </T></T></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jpfss/p/9928747.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 &lt;/T&gt;&lt;/T&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring security 处理filter chain抛出的异常</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/</id>
    <published>2021-12-15T14:55:00.000Z</published>
    <updated>2021-12-15T15:13:43.565Z</updated>
    
    <content type="html"><![CDATA[<p>springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json<br>异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,<br>另一种是spring security filter chain 抛出的异常,由于在@RestControllerAdvice之前,所以需要其它方式处理.<br>1: 自定义MyErrorController ,overriding default Spring Boot /error handler<br>2:在filter chain里第一的位置新增自定义filter,处理后面没有处理掉的异常.</p><p><strong><a href="https://blog.csdn.net/muyuanjin67/article/details/120373168" target="_blank" rel="noopener">Spring和SpringSecurity 的全局异常处理</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring" target="_blank" rel="noopener">How to manage exceptions thrown in filters in Spring?</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://www.jianshu.com/p/f528fe2377e2" target="_blank" rel="noopener">Spring security restful like 服务下的异常处理</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json&lt;br&gt;异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,&lt;br&gt;另一种是sp
      
    
    </summary>
    
    
    
      <category term="spring security" scheme="http://blog.zhangzonglinagain.xyz/tags/spring-security/"/>
    
      <category term="filter chain" scheme="http://blog.zhangzonglinagain.xyz/tags/filter-chain/"/>
    
  </entry>
  
  <entry>
    <title>js  0 == &#39;&#39; 引出的判等</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/</id>
    <published>2021-12-07T16:13:22.000Z</published>
    <updated>2021-12-07T16:16:54.048Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://segmentfault.com/a/1190000021394035" target="_blank" rel="noopener">javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)</a></strong> &nbsp;&nbsp;&nbsp;<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">JavaScript 中的相等性判断</a></strong></p><a id="more"></a><table class="standard-table"> <caption>判等</caption> <thead>  <tr>   <th scope="col" style="text-align: center;">x</th>   <th scope="col" style="text-align: center;">y</th>   <th scope="col" style="width: 10em; text-align: center;"><code>==</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>===</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>Object.is</code></th>  </tr> </thead> <tbody>  <tr>   <td><code>undefined</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>true</code></td>   <td><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>false</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>+0</code></td>   <td><code>-0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"0"</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"17"</code></td>   <td><code>17</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>[1,2]</code></td>   <td><code>"1,2"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>undefined</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>{ foo: "bar" }</code></td>   <td><code>{ foo: "bar" }</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>new String("foo")</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>NaN</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr> </tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000021394035&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)&lt;/a&gt;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 中的相等性判断&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hashtable、HashMap、ConcurrentHashMap</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/</id>
    <published>2021-12-01T13:40:33.000Z</published>
    <updated>2021-12-01T13:46:33.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://blog.csdn.net/Mr_YanMingXin/article/details/118601591" target="_blank" rel="noopener">详解Java中HashMap、HashTable、ConcurrentHashMap常见问题</a></strong> &nbsp;;&nbsp;<strong><a href="https://blog.csdn.net/amunamuna/article/details/107773902" target="_blank" rel="noopener">Hashtable、HashMap、ConcurrentHashMap等及常用阻塞队列</a></strong> &nbsp;&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.csdn.net/Mr_YanMingXin/article/details/118601591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解Java中HashMap、HashTable、C
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-29T11:14:00.000Z</published>
    <updated>2021-11-29T11:14:41.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.it610.com/article/1280947627608784896.htm" target="_blank" rel="noopener">Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.it610.com/article/1280947627608784896.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="zssh" scheme="http://blog.zhangzonglinagain.xyz/tags/zssh/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Form Data &amp; Request Payload</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/</id>
    <published>2021-11-27T13:10:00.000Z</published>
    <updated>2021-11-27T13:23:52.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>简单来说,request headers里的Content-Type: application/json 表明request body里是json数据; Content-Type: application/x-www-form-urlencoded表明request body里是Form Data数据(以key1=value1&amp;key2=value2形式). 根据content-type的不同, 后端也要相应处理,或@RequestParam 处理表单数据, 或@RequestBody处理json数据等.<br><strong><a href="https://segmentfault.com/a/1190000018774494" target="_blank" rel="noopener">前后端联调之Form Data与Request Payload，你真的了解吗？</a></strong> &nbsp;&nbsp;<strong><a href="https://www.cnblogs.com/zoro-zero/p/11608491.html" target="_blank" rel="noopener">SpringBoot 传入JSON对象参数</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;简单来说,request headers里的Content-Type: application/json 表明request body里是j
      
    
    </summary>
    
    
    
      <category term="application/x-www-form-urlencoded" scheme="http://blog.zhangzonglinagain.xyz/tags/application-x-www-form-urlencoded/"/>
    
      <category term="application/json" scheme="http://blog.zhangzonglinagain.xyz/tags/application-json/"/>
    
  </entry>
  
  <entry>
    <title>vue cli 前端跨域设置</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-11-27T12:13:00.000Z</published>
    <updated>2021-11-27T12:22:11.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.</p><a id="more"></a><p><strong><a href="https://blog.csdn.net/qq_34450741/article/details/107444815?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link" target="_blank" rel="noopener">[vue] vue cli 4.0+ 解决前端跨域问题</a></strong> &nbsp;&nbsp;<strong><a href="https://blog.csdn.net/weixin_39553363/article/details/104152142" target="_blank" rel="noopener">图解vue3.0/vueCli4解决跨域问题</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="跨域" scheme="http://blog.zhangzonglinagain.xyz/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>@PostConstruct注解原理解析</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-16T05:31:00.000Z</published>
    <updated>2021-11-16T05:32:14.597Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lay2017/p/11735802.html" target="_blank" rel="noopener">@PostConstruct注解原理解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lay2017/p/11735802.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@PostConstruct注解原理解析&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
      <category term="PostConstruct" scheme="http://blog.zhangzonglinagain.xyz/tags/PostConstruct/"/>
    
  </entry>
  
  <entry>
    <title>Filter和Interceptor的比较</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2021-11-15T12:58:00.000Z</published>
    <updated>2021-11-15T13:12:15.065Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/5f5e5211bbdb" target="_blank" rel="noopener">Filter和Interceptor的比较</a>, &nbsp;&nbsp;&nbsp;<a href="https://www.cnblogs.com/hellovoyager1/p/9152292.html" target="_blank" rel="noopener">Listener、Filter 和Interceptor 总结</a>, &nbsp;&nbsp;<a href="https://www.cnblogs.com/hhhshct/p/8808115.html" target="_blank" rel="noopener">springboot配置监听器、过滤器和拦截器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/5f5e5211bbdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filter和Interceptor的比较&lt;/a&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="spring" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/"/>
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/java/"/>
    
    
      <category term="interceptor" scheme="http://blog.zhangzonglinagain.xyz/tags/interceptor/"/>
    
      <category term="filter" scheme="http://blog.zhangzonglinagain.xyz/tags/filter/"/>
    
      <category term="listener" scheme="http://blog.zhangzonglinagain.xyz/tags/listener/"/>
    
  </entry>
  
  <entry>
    <title> ThreadLocal 详解</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-13T03:57:48.000Z</published>
    <updated>2021-11-13T04:02:29.178Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html" target="_blank" rel="noopener">ThreadLocal原理</a>  ,&nbsp;&nbsp;&nbsp; <a href="https://juejin.cn/post/6844903487193481224" target="_blank" rel="noopener">Java 之 ThreadLocal 详解: 内存泄漏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadLocal原理&lt;/a&gt;  ,&amp;nbsp;&amp;n
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
