<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1.5L的喜欢</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangzonglinagain.xyz/"/>
  <updated>2022-02-08T10:28:58.266Z</updated>
  <id>http://blog.zhangzonglinagain.xyz/</id>
  
  <author>
    <name>zzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rust --堆栈(内存)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2022/02/08/rust-%E7%9A%84%E5%A0%86%E6%A0%88-%E5%BC%95%E7%94%A8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2022/02/08/rust-%E7%9A%84%E5%A0%86%E6%A0%88-%E5%BC%95%E7%94%A8/</id>
    <published>2022-02-08T09:50:00.000Z</published>
    <updated>2022-02-08T10:28:58.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以<strong>创建某个变量的引用时，引用的是栈中的那个值</strong>.   </p><a id="more"></a><h4 id="Rust将哪些数据存放于栈中？"><a href="#Rust将哪些数据存放于栈中？" class="headerlink" title="Rust将哪些数据存放于栈中？"></a>Rust将哪些数据存放于栈中？</h4><p>Rust中各种类型的值默认都存储在栈中，除非显式地使用Box::new()将它们存放在堆上。</p><p>但数据要存放在栈中，要求其数据类型的大小已知。对于静态大小的类型，可直接存储在栈上。</p><p>例如如下类型的数据存放在栈中：</p><ul><li>裸指针(一个机器字长)、普通引用(一个机器字长)、胖指针(除了指针外还包含其他元数据信息，智能指针也是一种带有额外功能的胖指针，而胖指针实际上又是Struct结构)</li><li>布尔值</li><li>char</li><li>各种整数、浮点数</li><li>数组(Rust数组的元素数据类型和数组长度都是固定不变的)</li><li>元组</li></ul><p>对于动态大小的类型(如Vec、String)，则数据部分分布在堆中(被称为allocate buffer)，并在栈中留下胖指针(Struct方式实现)指向实际的数据，栈中的那个胖指针结构是静态大小的(换句话说，动态类型以Vec为例，Vec类型的值理应是那些连续的元素，但因为这样的连续内存的大小是不确定的，所以改变了它的行为，它的值是那个栈中的胖指针，而不是存储在allocatge buffer中的实际数据)。</p><p>以上分类需要注意几点：</p><ul><li>将栈中数据赋值给变量时，数据直接存放在栈中。比如i32类型的33，33直接存放在栈内，而不是在堆中存放33并在栈中存放指向33的指针</li><li>因为类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以<strong>创建某个变量的引用时，引用的是栈中的那个值</strong></li><li>有些数据是0字节的，不需要占用空间，比如()</li><li>尽管【容器】结构中(如数组、元组、Struct)可以存放任意数据，但保存在容器中的要么是原始类型的栈中值，要么是指向堆中数据的引用，所以这些容器类型的值也在栈中。例如，对于struct User {name: String}，name字段存储的是String类型的胖指针，String类型实际的数据则在堆中</li><li>尽管Box::new(T)可以将类型T的数据放入堆中，但Box类型本身是一个struct，它是一个胖指针(更严格地说是智能指针)，它在栈中</li></ul><p>实际上，对于理解来说，只有Box才能让数据存放到堆中，但对于实现上，只有调用alloc才能申请堆内存并将数据存放在堆中。比如，自己想实现一个类型，将某些数据明确存放在堆中，那么必须要在实现代码中调用alloc来分配堆内存，但同时，要实现的这个类型本身，它的值是在栈中的。</p><p>(5).Rust除了使用堆栈，还使用全局内存区(静态变量区和字面量区)。</p><p>Rust编译器会将全局内存区的数据直接嵌入在二进制程序文件中，当启动并加载程序时，嵌入在全局内存区的数据被放入内存的某个位置。</p><p>全局内存区的数据是编译期间就可确定的，且存活于整个程序运行期间。</p><p>字符串字面量、static定义的静态变量(相当于全局变量)都会硬编码嵌入到二进制程序的全局内存区。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">  let _s &#x3D; &quot;hello&quot;;     &#x2F;&#x2F; (1)</span><br><span class="line">  let _ss &#x3D; String::from(&quot;hello&quot;); &#x2F;&#x2F; (2)</span><br><span class="line">  let _arr &#x3D; [&quot;hello&quot;;3];    &#x2F;&#x2F; (3)</span><br><span class="line">  let _tuple &#x3D; (&quot;hello&quot;,);   &#x2F;&#x2F; (4)</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的几个变量都使用了字符串字面量，且使用的都是相同的字面量”hello”，在编译期间，它们会共用同一个”hello”，该”hello”会硬编码到二进制程序文件中。当程序被加载到内存时，该被放入到全局内存区，它在全局内存区有自己的内存地址，当运行到以上各行代码时：</p><ul><li>代码(1)、(3)、(4)，将根据地址取得其引用，并分别保存到变量_s、_arr各元素、_tuple元素中</li><li>代码(2)，将根据地址取得数据并将其拷贝到堆中(转换为Vec<u8>的方式存储，它是String类型的底层存储方式)</u8></li></ul><h4 id="Rust中允许使用const定义常量。"><a href="#Rust中允许使用const定义常量。" class="headerlink" title="Rust中允许使用const定义常量。"></a>Rust中允许使用const定义常量。</h4><p>常量将在编译期间直接以硬编码的方式内联(inline)插入到使用常量的地方。</p><p>所谓内联，即将它代表的值直接替换到使用它的地方。</p><p>比如，定义了常量ABC=33，在第100行和第300行处都使用了常量ABC，那么在编译期间，会将33硬编码到第100行和第300行处。</p><p>Rust中，除了const定义的常量会被内联，某些函数也可以被内联。将函数进行内联，表示将该函数对应的代码体直接展开并插入到调用该函数的地方，这样就没有函数调用的开销(比如没有调用函数时申请栈帧、在寄存器保存某些变量等的行为)，效率会更高一些。但只有那些频繁调用的短函数才适合被内联，并且内联会导致程序的代码膨胀。</p><p>原地址: <strong><a href="https://rust-book.junmajinlong.com/ch5/02_rust_mem.html" target="_blank" rel="noopener">Rust如何使用堆和栈</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;类型的值默认都分布在栈中(即便是动态类型的数据，但也通过胖指针改变了该类型的值的表现形式)，所以&lt;strong&gt;创建某个变量的引用时，引用的是栈中的那个值&lt;/strong&gt;.   &lt;/p&gt;
    
    </summary>
    
    
      <category term="rust" scheme="http://blog.zhangzonglinagain.xyz/categories/rust/"/>
    
    
      <category term="引用" scheme="http://blog.zhangzonglinagain.xyz/tags/%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>mybatis mysql in (#{list}) 只能查询/删除第一条的问题</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/30/mybatis-mysql-in-list-%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2-%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/30/mybatis-mysql-in-list-%E5%8F%AA%E8%83%BD%E6%9F%A5%E8%AF%A2-%E5%88%A0%E9%99%A4%E7%AC%AC%E4%B8%80%E6%9D%A1%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-30T06:33:17.000Z</published>
    <updated>2021-12-30T06:33:44.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/do-your-best/p/9513194.html" target="_blank" rel="noopener">mysql in (#{list}) 只能查询/删除第一条的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/do-your-best/p/9513194.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mysql in (#{list}) 只能查询/删除第一条的问题&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你真的会用Gson吗?Gson使用指南（一）</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/23/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8Gson%E5%90%97-Gson%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/23/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8Gson%E5%90%97-Gson%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-12-23T15:58:30.000Z</published>
    <updated>2021-12-23T15:59:27.469Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://www.jianshu.com/p/e740196225a4" target="_blank" rel="noopener">你真的会用Gson吗?Gson使用指南（一）</a></strong>&nbsp;&nbsp;<strong><a href="https://blog.csdn.net/majalis_c/article/details/79801863?utm_term=gsonjsonobject%E8%BD%ACstring&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-79801863&spm=3001.4430" target="_blank" rel="noopener">Gson基本操作，JsonObject，JsonArray，String，JavaBean，List互转</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.jianshu.com/p/e740196225a4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你真的会用Gson吗?Gson使用指南（一）&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/17/Java%E6%B3%9B%E5%9E%8B%E8%AF%A6%E8%A7%A3%EF%BC%9A-T-%E5%92%8CClass-T-%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82%E6%B3%9B%E5%9E%8B%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-12-17T15:21:08.000Z</published>
    <updated>2021-12-17T15:21:18.896Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/jpfss/p/9928747.html" target="_blank" rel="noopener">Java泛型详解：<T>和Class<T>的使用。泛型类，泛型方法的详细使用实例 </T></T></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jpfss/p/9928747.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java泛型详解：&lt;T&gt;和Class&lt;T&gt;的使用。泛型类，泛型方法的详细使用实例 &lt;/T&gt;&lt;/T&gt;&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring security 处理filter chain抛出的异常</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/15/spring-security-%E5%A4%84%E7%90%86filter-chain%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8/</id>
    <published>2021-12-15T14:55:00.000Z</published>
    <updated>2021-12-15T15:13:43.565Z</updated>
    
    <content type="html"><![CDATA[<p>springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json<br>异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,<br>另一种是spring security filter chain 抛出的异常,由于在@RestControllerAdvice之前,所以需要其它方式处理.<br>1: 自定义MyErrorController ,overriding default Spring Boot /error handler<br>2:在filter chain里第一的位置新增自定义filter,处理后面没有处理掉的异常.</p><p><strong><a href="https://blog.csdn.net/muyuanjin67/article/details/120373168" target="_blank" rel="noopener">Spring和SpringSecurity 的全局异常处理</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://stackoverflow.com/questions/34595605/how-to-manage-exceptions-thrown-in-filters-in-spring" target="_blank" rel="noopener">How to manage exceptions thrown in filters in Spring?</a></strong>&nbsp;&nbsp;&nbsp;&nbsp;,<strong><a href="https://www.jianshu.com/p/f528fe2377e2" target="_blank" rel="noopener">Spring security restful like 服务下的异常处理</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springboot异常处理默认会redirect /error,但前后分离后, 异常处理就要返回json&lt;br&gt;异常一种是controller抛出的异常, 可以通过@RestControllerAdvice @ExceptionHandler全局处理,&lt;br&gt;另一种是sp
      
    
    </summary>
    
    
    
      <category term="spring security" scheme="http://blog.zhangzonglinagain.xyz/tags/spring-security/"/>
    
      <category term="filter chain" scheme="http://blog.zhangzonglinagain.xyz/tags/filter-chain/"/>
    
  </entry>
  
  <entry>
    <title>js  0 == &#39;&#39; 引出的判等</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/08/js-0-%E5%BC%95%E5%87%BA%E7%9A%84%E5%88%A4%E7%AD%89/</id>
    <published>2021-12-07T16:13:22.000Z</published>
    <updated>2021-12-07T16:16:54.048Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://segmentfault.com/a/1190000021394035" target="_blank" rel="noopener">javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)</a></strong> &nbsp;&nbsp;&nbsp;<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">JavaScript 中的相等性判断</a></strong></p><a id="more"></a><table class="standard-table"> <caption>判等</caption> <thead>  <tr>   <th scope="col" style="text-align: center;">x</th>   <th scope="col" style="text-align: center;">y</th>   <th scope="col" style="width: 10em; text-align: center;"><code>==</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>===</code></th>   <th scope="col" style="width: 10em; text-align: center;"><code>Object.is</code></th>  </tr> </thead> <tbody>  <tr>   <td><code>undefined</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>true</code></td>   <td><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>false</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr>  <tr>   <td><code>+0</code></td>   <td><code>-0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>""</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"0"</code></td>   <td><code>0</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"17"</code></td>   <td><code>17</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>[1,2]</code></td>   <td><code>"1,2"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>"foo"</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>undefined</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>null</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>undefined</code></td>   <td><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>{ foo: "bar" }</code></td>   <td><code>{ foo: "bar" }</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>new String("foo")</code></td>   <td><code>new String("foo")</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>null</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>0</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>"foo"</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>  </tr>  <tr>   <td><code>NaN</code></td>   <td><code>NaN</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(255, 144, 144); text-align: center;"><code>false</code></td>   <td style="background-color: rgb(144, 255, 144); text-align: center;"><code>true</code></td>  </tr> </tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000021394035&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javascript中的假值相等判断(false,null,undefined,NaN,数字0,空字符串)&lt;/a&gt;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 中的相等性判断&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hashtable、HashMap、ConcurrentHashMap</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/12/01/Hashtable%E3%80%81HashMap%E3%80%81ConcurrentHashMap/</id>
    <published>2021-12-01T13:40:33.000Z</published>
    <updated>2021-12-01T13:46:33.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://blog.csdn.net/Mr_YanMingXin/article/details/118601591" target="_blank" rel="noopener">详解Java中HashMap、HashTable、ConcurrentHashMap常见问题</a></strong> &nbsp;;&nbsp;<strong><a href="https://blog.csdn.net/amunamuna/article/details/107773902" target="_blank" rel="noopener">Hashtable、HashMap、ConcurrentHashMap等及常用阻塞队列</a></strong> &nbsp;&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.csdn.net/Mr_YanMingXin/article/details/118601591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解Java中HashMap、HashTable、C
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/29/Ubuntu18-04%E4%B8%8B%E9%80%9A%E8%BF%87zssh%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-29T11:14:00.000Z</published>
    <updated>2021-11-29T11:14:41.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.it610.com/article/1280947627608784896.htm" target="_blank" rel="noopener">Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.it610.com/article/1280947627608784896.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu18.04下通过zssh与服务器进行上传/下载文件操作&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="zssh" scheme="http://blog.zhangzonglinagain.xyz/tags/zssh/"/>
    
      <category term="ubuntu" scheme="http://blog.zhangzonglinagain.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Form Data &amp; Request Payload</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/Form-Data-Request-Payload/</id>
    <published>2021-11-27T13:10:00.000Z</published>
    <updated>2021-11-27T13:23:52.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>简单来说,request headers里的Content-Type: application/json 表明request body里是json数据; Content-Type: application/x-www-form-urlencoded表明request body里是Form Data数据(以key1=value1&amp;key2=value2形式). 根据content-type的不同, 后端也要相应处理,或@RequestParam 处理表单数据, 或@RequestBody处理json数据等.<br><strong><a href="https://segmentfault.com/a/1190000018774494" target="_blank" rel="noopener">前后端联调之Form Data与Request Payload，你真的了解吗？</a></strong> &nbsp;&nbsp;<strong><a href="https://www.cnblogs.com/zoro-zero/p/11608491.html" target="_blank" rel="noopener">SpringBoot 传入JSON对象参数</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;简单来说,request headers里的Content-Type: application/json 表明request body里是j
      
    
    </summary>
    
    
    
      <category term="application/x-www-form-urlencoded" scheme="http://blog.zhangzonglinagain.xyz/tags/application-x-www-form-urlencoded/"/>
    
      <category term="application/json" scheme="http://blog.zhangzonglinagain.xyz/tags/application-json/"/>
    
  </entry>
  
  <entry>
    <title>vue cli 前端跨域设置</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/27/vue-cli-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-11-27T12:13:00.000Z</published>
    <updated>2021-11-27T12:22:11.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.</p><a id="more"></a><p><strong><a href="https://blog.csdn.net/qq_34450741/article/details/107444815?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link" target="_blank" rel="noopener">[vue] vue cli 4.0+ 解决前端跨域问题</a></strong> &nbsp;&nbsp;<strong><a href="https://blog.csdn.net/weixin_39553363/article/details/104152142" target="_blank" rel="noopener">图解vue3.0/vueCli4解决跨域问题</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前后分离的前端开发时,一般都缺少后端的支持,开发阶段可以用mock模拟后端的返回请求, 但后续总要访问后端联调, 此时就涉及到前端的跨越了(只有开发阶段,部署的时候统一部署). 本质上就是在前端开一个代理服务,服务器访问服务器就没有浏览器访问后端的跨域限制了.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="跨域" scheme="http://blog.zhangzonglinagain.xyz/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>@PostConstruct注解原理解析</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/16/PostConstruct%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-16T05:31:00.000Z</published>
    <updated>2021-11-16T05:32:14.597Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lay2017/p/11735802.html" target="_blank" rel="noopener">@PostConstruct注解原理解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lay2017/p/11735802.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@PostConstruct注解原理解析&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
      <category term="PostConstruct" scheme="http://blog.zhangzonglinagain.xyz/tags/PostConstruct/"/>
    
  </entry>
  
  <entry>
    <title>Filter和Interceptor的比较</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/15/Filter%E5%92%8CInterceptor%E7%9A%84%E6%AF%94%E8%BE%83/</id>
    <published>2021-11-15T12:58:00.000Z</published>
    <updated>2021-11-15T13:12:15.065Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/5f5e5211bbdb" target="_blank" rel="noopener">Filter和Interceptor的比较</a>, &nbsp;&nbsp;&nbsp;<a href="https://www.cnblogs.com/hellovoyager1/p/9152292.html" target="_blank" rel="noopener">Listener、Filter 和Interceptor 总结</a>, &nbsp;&nbsp;<a href="https://www.cnblogs.com/hhhshct/p/8808115.html" target="_blank" rel="noopener">springboot配置监听器、过滤器和拦截器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/5f5e5211bbdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filter和Interceptor的比较&lt;/a&gt;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="spring" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/"/>
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/spring/java/"/>
    
    
      <category term="interceptor" scheme="http://blog.zhangzonglinagain.xyz/tags/interceptor/"/>
    
      <category term="filter" scheme="http://blog.zhangzonglinagain.xyz/tags/filter/"/>
    
      <category term="listener" scheme="http://blog.zhangzonglinagain.xyz/tags/listener/"/>
    
  </entry>
  
  <entry>
    <title> ThreadLocal 详解</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/13/ThreadLocal-%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-11-13T03:57:48.000Z</published>
    <updated>2021-11-13T04:02:29.178Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html" target="_blank" rel="noopener">ThreadLocal原理</a>  ,&nbsp;&nbsp;&nbsp; <a href="https://juejin.cn/post/6844903487193481224" target="_blank" rel="noopener">Java 之 ThreadLocal 详解: 内存泄漏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.pdai.tech/md/java/thread/java-thread-x-threadlocal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThreadLocal原理&lt;/a&gt;  ,&amp;nbsp;&amp;n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>@interface 简介</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/11/11/interface/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/11/11/interface/</id>
    <published>2021-11-11T13:28:27.000Z</published>
    <updated>2021-11-11T13:29:41.370Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zhangbeizhen18/article/details/87885441/" target="_blank" rel="noopener">自定义注释@interface的用法理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhangbeizhen18/article/details/87885441/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义注释@interface的用法理解&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node升级提示(sudo: npm: command not found)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/12/sudo-npm-command-not-found/</id>
    <published>2021-08-12T13:40:51.000Z</published>
    <updated>2021-08-12T14:42:57.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：<em>sudo npm install n -g</em>，结果提示：<em>sudo : npm :command not found</em>。</p><a id="more"></a><h3 id="node、npm升级"><a href="#node、npm升级" class="headerlink" title="node、npm升级"></a>node、npm升级</h3><p>正常情况下，先安装工具<em>n</em>，然后通过它升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line"></span><br><span class="line">sudo n stable  # 安装最新版本</span><br></pre></td></tr></table></figure><p>但出现了前言里的错误，不加sudo，权限不够，加了又无法识别命令。</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这是什么原因呢？<br>输入<em>which npm*可以得到</em>/home/zzl/.nvm/versions/node/v12.21.0/bin/npm*，这个是普通用户的目录。<br>而sudo执行的是/usr/bin目录，这是root用户的目录,<br>所以使用sudo命令是识别不到这个命令的，我们可以使用软链接来处理这个问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node</span><br><span class="line">sudo ln -s &#x2F;mydata&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;bin&#x2F;npm</span><br></pre></td></tr></table></figure><p>将上面左边的命令位置，替换用which npm查询出来的就行了。</p><p><strong>当然我用了which node之后就意识到我以前是用的nvm管理node的版本，差点儿就用n在另外的位置重新下了个版本，而且还发现以前用apt-get下了个更早的版本，每个工具下载的位置都不同，混乱不堪，统统删了，以后只用nvm管理node版本！教训啊～</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;重拿前端项目，要把以前ubuntu的node、npm升级到最新版本，按照网上找来的方法，输入：&lt;em&gt;sudo npm install n -g&lt;/em&gt;，结果提示：&lt;em&gt;sudo : npm :command not found&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>H5页面在微信浏览器中通过网页授权获取用户信息(openid、昵称、头像等)</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/08/11/H5%E9%A1%B5%E9%9D%A2%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid/</id>
    <published>2021-08-10T18:22:00.000Z</published>
    <updated>2021-08-11T08:38:33.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…</p><a id="more"></a><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>公众号准备：生产环境的微信公众号，需要按照官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）设置。开发环境可以前往<strong><a href="https://link.segmentfault.com/?url=https%3A%2F%2Fmp.weixin.qq.com%2Fdebug%2Fcgi-bin%2Fsandbox%3Ft%3Dsandbox%2Flogin" target="_blank" rel="noopener">微信公众平台</a></strong>申请测试号。</p><p>注意：正式的公众号不需要关注，也可以通过网页授权获取用户信息，而测试号必须要关注！</p><h3 id="微信授权流程"><a href="#微信授权流程" class="headerlink" title="微信授权流程"></a>微信授权流程</h3><p>详细流程见官方文档（<strong><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页开发授权</a></strong>）。</p><p>具体而言，网页授权流程分为四步：</p><ol><li><p>引导用户进入授权页面同意授权，获取code</p></li><li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p></li><li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p></li><li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p></li></ol><p>时序图如下：</p><p><img src="/images/pasted-47.png" alt="upload successful"></p><h3 id="授权code的获取"><a href="#授权code的获取" class="headerlink" title="授权code的获取"></a>授权code的获取</h3><p>以上是大概流程，这里主要分析用户统一授权后，获取code的两个路径：前端截取及后端获取。</p><p>原理是：获取用户授权需要按照微信规定拼装链接，让用户点击访问，其中拼接的链接中有个redirect_uri参数(授权后重定向的回调链接地址)，微信服务器处理后会将redirect_uri拼接code等参数，浏览器会重定向该地址，也就形成了两个获取code的方法，前端在url截取code,后端也可以通过浏览器访问此链接获取code参数。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line">const url &#x3D; &#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br></pre></td></tr></table></figure><h4 id="前端获取"><a href="#前端获取" class="headerlink" title="前端获取"></a>前端获取</h4><p>如果不是每次进入页面都要从微信获取code码时（用户信息），建议在前端获取，需要时才改变浏览器链接让用户访问链接获取授权，把code码传给后端获取用户信息。</p><p>也可以参看此代码：<strong><a href="https://www.cnblogs.com/congfeicong/p/11125575.html" target="_blank" rel="noopener">H5页面获取微信公众号的openid</a></strong>，或者如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const appid &#x3D; &quot;wx3b0e58d4d2dbea9q&quot;;  &#x2F;&#x2F;公众号后台获取</span><br><span class="line">const redirectUri &#x3D; encodeURIComponent(&quot;http:&#x2F;&#x2F;245691q6b5.zicp.vip&quot;)&#x2F;&#x2F;微信会带code码访问这个链接</span><br><span class="line"></span><br><span class="line">const url&#x3D;&#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorizeappid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;redirectUri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;STATE#wechat_redirect&#96;</span><br><span class="line"></span><br><span class="line">const querystring &#x3D; getQueryString()</span><br><span class="line">let code &#x3D; querystring.code;</span><br><span class="line"></span><br><span class="line">if(!code)&#123;</span><br><span class="line">    location.href &#x3D; url;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    https.get(&#39;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;auth&#39;,&#123;code&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getQueryString() &#123;</span><br><span class="line">    const url &#x3D; location.search;</span><br><span class="line">    const rs &#x3D; &#123;&#125;</span><br><span class="line">    if(url.indexOf(&#39;?&#39;) &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">        const querystring &#x3D; url.substr(1);</span><br><span class="line">        const kvArr &#x3D; querystring.split(&#39;&amp;&#39;);</span><br><span class="line">        kvArr.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">            const temp &#x3D; item.split(&#39;&#x3D;&#39;)</span><br><span class="line">            const key &#x3D; temp[0];</span><br><span class="line">            const val &#x3D; temp[1];</span><br><span class="line">            rs[key] &#x3D; val</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return rs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端获取"><a href="#后端获取" class="headerlink" title="后端获取"></a>后端获取</h4><p>如果每次都要获取code码，就让用户只要进入页面就访问接口链接，但这时的redirectUri要配置成后端接口的链接，也就是说微信会带着code码访问后端接口，后端直接获取code码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;后端使用koa2</span><br><span class="line">&#x2F;&#x2F;Superagent时一个后端的http请求中间件</span><br><span class="line">router.get(&#39;&#x2F;auth&#39;, async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">    code &#x3D; ctx.querystring.split(&#39;&amp;&#39;)[0].split(&#39;&#x3D;&#39;)[1];</span><br><span class="line">    &#x2F;&#x2F; 使用code获取openid和access_token </span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;oauth2&#x2F;access_token?appid&#x3D;$&#123;appid&#125;&amp;secret&#x3D;$&#123;appsecret&#125;&amp;code&#x3D;$&#123;code&#125;&amp;grant_type&#x3D;authorization_code&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            let result &#x3D; JSON.parse(res.text)</span><br><span class="line">            access_token &#x3D; result.access_token</span><br><span class="line">            openid &#x3D; result.openid</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 使用ACCESS_TOKEN和openid获取userinfo</span><br><span class="line">    await Superagent</span><br><span class="line">        .get(&#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;userinfo?access_token&#x3D;$&#123;access_token&#125;&amp;openid&#x3D;$&#123;openid&#125;&amp;lang&#x3D;zh_CN&#96;)</span><br><span class="line">        .then(res &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F;userinfo返回给前端</span><br><span class="line">            userinfo &#x3D; JSON.parse(res.text)</span><br><span class="line">            ctx.body &#x3D; res.text</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;需要做一个Vue前端项目，UI选择buefy（一个基于Bulma的vue轻量级组件），其中一个H5页面涉及到，如果是在微信浏览器中，需要在后台服务器自动注册以及登录，即需要通过网页授权来获取用户信息（openid、昵称、头像等)。这儿只涉及前端的工作…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://blog.zhangzonglinagain.xyz/categories/Vue/"/>
    
    
      <category term="微信公众号" scheme="http://blog.zhangzonglinagain.xyz/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/31/Wireshark%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86%EF%BC%88ARP%E5%8A%AB%E6%8C%81%E3%80%81MAC%E6%B3%9B%E6%B4%AA%EF%BC%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%BD%E8%B8%AA%E5%92%8C%E5%9B%BE%E5%83%8F%E6%8A%93%E5%8F%96/</id>
    <published>2021-05-31T07:32:08.000Z</published>
    <updated>2021-05-31T07:32:59.094Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://cloud.tencent.com/developer/article/1626729" target="_blank" rel="noopener">Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1626729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wireshark抓包原理（ARP劫持、MAC泛洪）及数据流追踪和图像抓取&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vertx-plugin build vertx app with gradle</title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/06/build-vertx-app-with-gradle/</id>
    <published>2021-05-05T17:42:00.000Z</published>
    <updated>2021-05-05T18:06:04.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://plugins.gradle.org/plugin/io.vertx.vertx-plugin" target="_blank" rel="noopener">io.vertx.vertx-plugin</a> 介绍，gradle 添加vertx-plugin，脚本启动vertx application.</p><a id="more"></a><ol><li>build.gradle</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#39;io.vertx.vertx-plugin&#39; version &#39;1.2.0&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &#39;org.example&#39;</span><br><span class="line">version &#39;1.0-SNAPSHOT&#39;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">![upload successful](&#x2F;images&#x2F;pasted-45.png)</span><br><span class="line">    testImplementation &#39;org.junit.jupiter:junit-jupiter-api:5.6.0&#39;</span><br><span class="line">    testRuntimeOnly &#39;org.junit.jupiter:junit-jupiter-engine&#39;</span><br><span class="line">    compile &quot;io.vertx:vertx-core:4.0.3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vertx &#123;</span><br><span class="line">  mainVerticle &#x3D; &quot;MainVerticle&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>idea Run/Debug configurations</li></ol><p><img src="/images/pasted-46.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/io.vertx.vertx-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;io.vertx.vertx-plugin&lt;/a&gt; 介绍，gradle 添加vertx-plugin，脚本启动vertx application.&lt;/p&gt;
    
    </summary>
    
    
      <category term="vertx" scheme="http://blog.zhangzonglinagain.xyz/categories/vertx/"/>
    
    
      <category term="vertx-plugin" scheme="http://blog.zhangzonglinagain.xyz/tags/vertx-plugin/"/>
    
  </entry>
  
  <entry>
    <title>websocket data transfer </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/05/websocket-msg-type/</id>
    <published>2021-05-05T10:08:00.000Z</published>
    <updated>2021-05-05T10:09:28.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><a id="more"></a><h3 id="Receiving-Text-and-Binary-Data"><a href="#Receiving-Text-and-Binary-Data" class="headerlink" title="Receiving Text and Binary Data"></a>Receiving Text and Binary Data</h3><p><strong>参考：<a href="https://www.oreilly.com/library/view/high-performance-browser/9781449344757/ch17.html" target="_blank" rel="noopener">websocket receiving Text and Binary Data</a></strong></p><p>WebSocket communication consists of messages and application code and does not need to worry about buffering, parsing, and reconstructing received data. For example, if the server sends a 1 MB payload, the application’s onmessage callback will be called only when the entire message is available on the client.</p><p>Further, the WebSocket protocol makes no assumptions and places no constraints on the application payload: both text and binary data are fair game. Internally, the protocol tracks only two pieces of information about the message: the length of payload as a variable-length field and the type of payload to distinguish UTF-8 from binary transfers.</p><p>When a new message is received by the browser, it is automatically converted to a DOMString object for text-based data, or a Blob object for binary data, and then passed directly to the application. The only other option, which acts as performance hint and optimization for the client, is to tell the browser to convert the received binary data to an ArrayBuffer instead of Blob:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var ws &#x3D; new WebSocket(&#39;wss:&#x2F;&#x2F;example.com&#x2F;socket&#39;);</span><br><span class="line">ws.binaryType &#x3D; &quot;arraybuffer&quot;; 1</span><br><span class="line"></span><br><span class="line">ws.onmessage &#x3D; function(msg) &#123;</span><br><span class="line">  if(msg.data instanceof ArrayBuffer) &#123;</span><br><span class="line">    processArrayBuffer(msg.data);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    processText(msg.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Data-transfer"><a href="#Data-transfer" class="headerlink" title="Data transfer"></a>Data transfer</h3><p><strong>参考：<a href="https://javascript.info/websocket#data-transfer" target="_blank" rel="noopener">websocket data transfer</a></strong></p><p>WebSocket communication consists of “frames” – data fragments, that can be sent from either side, and can be of several kinds:</p><ul><li>“text frames” – contain text data that parties send to each other.</li><li>“binary data frames” – contain binary data that parties send to each other.</li><li>“ping/pong frames” are used to check the connection, sent from the server, the browser responds to these automatically.</li><li>there’s also “connection close frame” and a few other service frames.<br>In the browser, we directly work only with text or binary frames.</li></ul><p><em>WebSocket .send()</em> method can send either text or binary data.</p><p>A call <em>socket.send(body)</em> allows body in string or a binary format, including Blob, ArrayBuffer, etc. No settings required: just send it out in any format.</p><p>When we receive the data, text always comes as string. And for binary data, we can choose between Blob and ArrayBuffer formats.</p><p>That’s set by <em>socket.binaryType</em> property, it’s “blob” by default, so binary data comes as Blob objects.</p><p>Blob is a high-level binary object, it directly integrates with <a>, <img> and other tags, so that’s a sane default. But for binary processing, to access individual data bytes, we can change it to “arraybuffer”:</a></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  ws.binaryType &#x3D; &quot;arraybuffer&quot;;</span><br><span class="line">  ws.onmessage &#x3D; (event) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; event.data is either a string (if text) or arraybuffer (if binary)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;websocket message type： text or binary byte. And for binary data, we can choose between Blob and ArrayBuffer formats.&lt;/p&gt;
    
    </summary>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/categories/websocket/"/>
    
    
      <category term="websocket" scheme="http://blog.zhangzonglinagain.xyz/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>ProcessExecutor、ProcessBuilder、Runtime.getRuntime().exec(...) </title>
    <link href="http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/"/>
    <id>http://blog.zhangzonglinagain.xyz/2021/05/02/ProcessExecutor%E3%80%81ProcessBuilder%E3%80%81Runtime-getRuntime-exec/</id>
    <published>2021-05-02T05:55:00.000Z</published>
    <updated>2021-05-02T06:47:59.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。</p><a id="more"></a><h3 id="Runtime-amp-ProcessBuilder"><a href="#Runtime-amp-ProcessBuilder" class="headerlink" title="Runtime&amp;ProcessBuilder"></a>Runtime&amp;ProcessBuilder</h3><p><em>Runtime.getInstance().exec (String cmd)</em>和<em>new ProcessBuilder(String cmd).start()</em>都可以产生子进程对象Process。通过调用Process对象的waitFor()方法可以使主进程进入等待状态，直至子进程执行完毕，再进行下一步工作。如果对子进程处理不当，有可能造成主进程阻塞，整个程序死掉。(A program is executed with command(). With waitFor() we can wait for the process to finish.)<br><strong>通过查看JDK源码可知，Runtime.exec最终是通过调用ProcessBuilder来真正执行操作的</strong>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public Process exec(String command) throws IOException &#123;</span><br><span class="line">    return exec(command, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String command, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    if (command.length() &#x3D;&#x3D; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Empty command&quot;);</span><br><span class="line"></span><br><span class="line">    StringTokenizer st &#x3D; new StringTokenizer(command);</span><br><span class="line">    String[] cmdarray &#x3D; new String[st.countTokens()];</span><br><span class="line">    for (int i &#x3D; 0; st.hasMoreTokens(); i++)</span><br><span class="line">        cmdarray[i] &#x3D; st.nextToken();</span><br><span class="line">    return exec(cmdarray, envp, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Process exec(String[] cmdarray, String[] envp, File dir)</span><br><span class="line">    throws IOException &#123;</span><br><span class="line">    return new ProcessBuilder(cmdarray)</span><br><span class="line">        .environment(envp)</span><br><span class="line">        .directory(dir)</span><br><span class="line">        .start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProcessExecutor-amp-ProcessBuilder"><a href="#ProcessExecutor-amp-ProcessBuilder" class="headerlink" title="ProcessExecutor&amp;ProcessBuilder"></a>ProcessExecutor&amp;ProcessBuilder</h3><p>ProcessExecutor is implemented as a wrapper of <em>ProcessBuilder</em> complementing it with additional features.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ProcessExecutor &#123;</span><br><span class="line"></span><br><span class="line">  private static final Logger log &#x3D; LoggerFactory.getLogger(ProcessExecutor.class);</span><br><span class="line"></span><br><span class="line">  private static final boolean IS_OS_WINDOWS &#x3D; System.getProperty(&quot;os.name&quot;).startsWith(&quot;Windows&quot;);</span><br><span class="line"></span><br><span class="line">  public static final Integer[] DEFAULT_EXIT_VALUES &#x3D; null;</span><br><span class="line"></span><br><span class="line">  private static final Integer NORMAL_EXIT_VALUE &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  public static final boolean DEFAULT_REDIRECT_ERROR_STREAM &#x3D; true;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Process builder used by this executor.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final ProcessBuilder builder &#x3D; new ProcessBuilder();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Environment variables which are added (removed in case of &lt;code&gt;null&lt;&#x2F;code&gt; values) to the process being started.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private final Map&lt;String, String&gt; environment &#x3D; new LinkedHashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Set of accepted exit codes or &lt;code&gt;null&lt;&#x2F;code&gt; if all exit codes are allowed.</span><br><span class="line">   *&#x2F;</span><br><span class="line">  private Set&lt;Integer&gt; allowedExitValues;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ProcessExecutor在后台运行进程（不阻塞当前代码对执行）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runInBackground() throws IOException, InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    List&lt;Future&lt;ProcessResult&gt;&gt; tasks &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">        Future&lt;ProcessResult&gt; future &#x3D; new ProcessExecutor().command(&quot;java&quot;, &quot;-version&quot;)</span><br><span class="line">                .start().getFuture();</span><br><span class="line">        tasks.add(future);</span><br><span class="line">    &#125;</span><br><span class="line">    for (Future&lt;ProcessResult&gt; future : tasks) &#123;</span><br><span class="line">        ProcessResult processResult &#x3D; future.get(1, TimeUnit.SECONDS);</span><br><span class="line">        int exitValue &#x3D; processResult.getExitValue();</span><br><span class="line">        log.info(&quot;The exit value of the finished process is &#123;&#125;&quot;, exitValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<strong><a href="https://github.com/zeroturnaround/zt-exec" target="_blank" rel="noopener">GitHub: ZT Process Executor</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;There are many approaches to take when running external processes from Java. There are the JRE options such as the Runtime.exec() 、 ProcessBuilder、  Apache Commons Exec and ZT Process Executor. 其中ZT Process Executor是一个更为强大的进程库（process library），能够通过使用一个单一的 ProcessExecutor 类来调用 java.lang.ProcessBuilder 和 Apache Commons Exec 中的接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhangzonglinagain.xyz/categories/java/"/>
    
    
  </entry>
  
</feed>
